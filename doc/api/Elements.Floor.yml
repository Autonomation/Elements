### YamlMime:ManagedReference
items:
- uid: Elements.Floor
  commentId: T:Elements.Floor
  id: Floor
  parent: Elements
  children:
  - Elements.Floor.#ctor(Elements.Geometry.Polygon,Elements.FloorType,System.Double,Elements.Geometry.Transform,System.Collections.Generic.List{Elements.Opening})
  - Elements.Floor.#ctor(Elements.Geometry.Profile,Elements.Geometry.Transform,Elements.Geometry.Vector3,Elements.FloorType,System.Double,Elements.Geometry.Transform)
  - Elements.Floor.Area
  - Elements.Floor.BothSides
  - Elements.Floor.ElementType
  - Elements.Floor.Elevation
  - Elements.Floor.ExtrudeDepth
  - Elements.Floor.ExtrudeDirection
  - Elements.Floor.Geometry
  - Elements.Floor.Openings
  - Elements.Floor.Profile
  - Elements.Floor.ProfileTransformed
  - Elements.Floor.Thickness
  langs:
  - csharp
  - vb
  name: Floor
  nameWithType: Floor
  fullName: Elements.Floor
  type: Class
  source:
    remote:
      path: src/Elements/Floor.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Floor
    path: ../src/Elements/Floor.cs
    startLine: 13
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nA floor is a horizontal element defined by a perimeter and one or several voids.\n"
  example: []
  syntax:
    content: 'public class Floor : Element, IElement, IIdentifiable, ITransformable, IPropertySet, IElementType<FloorType>, ISolid, IExtrude, IProfile, IHasOpenings'
    content.vb: >-
      Public Class Floor
          Inherits Element
          Implements IElement, IIdentifiable, ITransformable, IPropertySet, IElementType(Of FloorType), ISolid, IExtrude, IProfile, IHasOpenings
  inheritance:
  - System.Object
  - Elements.Element
  implements:
  - Elements.Interfaces.IElement
  - Elements.Interfaces.IIdentifiable
  - Elements.Geometry.Interfaces.ITransformable
  - Elements.Interfaces.IPropertySet
  - Elements.Interfaces.IElementType{Elements.FloorType}
  - Elements.Geometry.Interfaces.ISolid
  - Elements.Geometry.Interfaces.IExtrude
  - Elements.Geometry.Interfaces.IProfile
  - Hypar.Elements.Interfaces.IHasOpenings
  inheritedMembers:
  - Elements.Element.Id
  - Elements.Element.Type
  - Elements.Element.Properties
  - Elements.Element.Transform
  - Elements.Element.Name
  - Elements.Element.AddProperty(System.String,Elements.Interfaces.IProperty)
  - Elements.Element.RemoveProperty(System.String)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Elements.Floor.Elevation
  commentId: P:Elements.Floor.Elevation
  id: Elevation
  parent: Elements.Floor
  langs:
  - csharp
  - vb
  name: Elevation
  nameWithType: Floor.Elevation
  fullName: Elements.Floor.Elevation
  type: Property
  source:
    remote:
      path: src/Elements/Floor.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Elevation
    path: ../src/Elements/Floor.cs
    startLine: 18
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nThe elevation from which the floor is extruded.\n"
  example: []
  syntax:
    content: public double Elevation { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property Elevation As Double
  overload: Elements.Floor.Elevation*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Floor.ElementType
  commentId: P:Elements.Floor.ElementType
  id: ElementType
  parent: Elements.Floor
  langs:
  - csharp
  - vb
  name: ElementType
  nameWithType: Floor.ElementType
  fullName: Elements.Floor.ElementType
  type: Property
  source:
    remote:
      path: src/Elements/Floor.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: ElementType
    path: ../src/Elements/Floor.cs
    startLine: 23
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nThe floor type of the floor.\n"
  example: []
  syntax:
    content: public FloorType ElementType { get; }
    parameters: []
    return:
      type: Elements.FloorType
    content.vb: Public ReadOnly Property ElementType As FloorType
  overload: Elements.Floor.ElementType*
  implements:
  - Elements.Interfaces.IElementType{Elements.FloorType}.ElementType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Floor.Profile
  commentId: P:Elements.Floor.Profile
  id: Profile
  parent: Elements.Floor
  langs:
  - csharp
  - vb
  name: Profile
  nameWithType: Floor.Profile
  fullName: Elements.Floor.Profile
  type: Property
  source:
    remote:
      path: src/Elements/Floor.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Profile
    path: ../src/Elements/Floor.cs
    startLine: 28
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nThe untransformed profile of the floor.\n"
  example: []
  syntax:
    content: public Profile Profile { get; }
    parameters: []
    return:
      type: Elements.Geometry.Profile
    content.vb: Public ReadOnly Property Profile As Profile
  overload: Elements.Floor.Profile*
  implements:
  - Elements.Geometry.Interfaces.IProfile.Profile
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Floor.Geometry
  commentId: P:Elements.Floor.Geometry
  id: Geometry
  parent: Elements.Floor
  langs:
  - csharp
  - vb
  name: Geometry
  nameWithType: Floor.Geometry
  fullName: Elements.Floor.Geometry
  type: Property
  source:
    remote:
      path: src/Elements/Floor.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Geometry
    path: ../src/Elements/Floor.cs
    startLine: 33
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nThe floor&apos;s geometry.\n"
  example: []
  syntax:
    content: public Solid Geometry { get; }
    parameters: []
    return:
      type: Elements.Geometry.Solids.Solid
    content.vb: Public ReadOnly Property Geometry As Solid
  overload: Elements.Floor.Geometry*
  implements:
  - Elements.Geometry.Interfaces.ISolid.Geometry
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Floor.Openings
  commentId: P:Elements.Floor.Openings
  id: Openings
  parent: Elements.Floor
  langs:
  - csharp
  - vb
  name: Openings
  nameWithType: Floor.Openings
  fullName: Elements.Floor.Openings
  type: Property
  source:
    remote:
      path: src/Elements/Floor.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Openings
    path: ../src/Elements/Floor.cs
    startLine: 38
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nThe openings in the floor.\n"
  example: []
  syntax:
    content: public List<Opening> Openings { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Elements.Opening}
    content.vb: Public ReadOnly Property Openings As List(Of Opening)
  overload: Elements.Floor.Openings*
  implements:
  - Hypar.Elements.Interfaces.IHasOpenings.Openings
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Floor.ExtrudeDirection
  commentId: P:Elements.Floor.ExtrudeDirection
  id: ExtrudeDirection
  parent: Elements.Floor
  langs:
  - csharp
  - vb
  name: ExtrudeDirection
  nameWithType: Floor.ExtrudeDirection
  fullName: Elements.Floor.ExtrudeDirection
  type: Property
  source:
    remote:
      path: src/Elements/Floor.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: ExtrudeDirection
    path: ../src/Elements/Floor.cs
    startLine: 43
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nThe extrude direction of the floor.\n"
  example: []
  syntax:
    content: public Vector3 ExtrudeDirection { get; }
    parameters: []
    return:
      type: Elements.Geometry.Vector3
    content.vb: Public ReadOnly Property ExtrudeDirection As Vector3
  overload: Elements.Floor.ExtrudeDirection*
  implements:
  - Elements.Geometry.Interfaces.IExtrude.ExtrudeDirection
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Floor.ExtrudeDepth
  commentId: P:Elements.Floor.ExtrudeDepth
  id: ExtrudeDepth
  parent: Elements.Floor
  langs:
  - csharp
  - vb
  name: ExtrudeDepth
  nameWithType: Floor.ExtrudeDepth
  fullName: Elements.Floor.ExtrudeDepth
  type: Property
  source:
    remote:
      path: src/Elements/Floor.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: ExtrudeDepth
    path: ../src/Elements/Floor.cs
    startLine: 48
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nThe extrude depth of the floor.\n"
  example: []
  syntax:
    content: public double ExtrudeDepth { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property ExtrudeDepth As Double
  overload: Elements.Floor.ExtrudeDepth*
  implements:
  - Elements.Geometry.Interfaces.IExtrude.ExtrudeDepth
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Floor.BothSides
  commentId: P:Elements.Floor.BothSides
  id: BothSides
  parent: Elements.Floor
  langs:
  - csharp
  - vb
  name: BothSides
  nameWithType: Floor.BothSides
  fullName: Elements.Floor.BothSides
  type: Property
  source:
    remote:
      path: src/Elements/Floor.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: BothSides
    path: ../src/Elements/Floor.cs
    startLine: 53
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nExtrude to both sides?\n"
  example: []
  syntax:
    content: public bool BothSides { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property BothSides As Boolean
  overload: Elements.Floor.BothSides*
  implements:
  - Elements.Geometry.Interfaces.IExtrude.BothSides
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Floor.#ctor(Elements.Geometry.Polygon,Elements.FloorType,System.Double,Elements.Geometry.Transform,System.Collections.Generic.List{Elements.Opening})
  commentId: M:Elements.Floor.#ctor(Elements.Geometry.Polygon,Elements.FloorType,System.Double,Elements.Geometry.Transform,System.Collections.Generic.List{Elements.Opening})
  id: '#ctor(Elements.Geometry.Polygon,Elements.FloorType,System.Double,Elements.Geometry.Transform,System.Collections.Generic.List{Elements.Opening})'
  parent: Elements.Floor
  langs:
  - csharp
  - vb
  name: Floor(Polygon, FloorType, Double, Transform, List<Opening>)
  nameWithType: Floor.Floor(Polygon, FloorType, Double, Transform, List<Opening>)
  fullName: Elements.Floor.Floor(Elements.Geometry.Polygon, Elements.FloorType, System.Double, Elements.Geometry.Transform, System.Collections.Generic.List<Elements.Opening>)
  type: Constructor
  source:
    remote:
      path: src/Elements/Floor.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Floor.cs
    startLine: 63
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nCreate a floor.\n"
  example: []
  syntax:
    content: public Floor(Polygon profile, FloorType elementType, double elevation = 0, Transform transform = null, List<Opening> openings = null)
    parameters:
    - id: profile
      type: Elements.Geometry.Polygon
      description: The profile of the floor.
    - id: elementType
      type: Elements.FloorType
      description: The floor type of the floor.
    - id: elevation
      type: System.Double
      description: The elevation of the top of the floor.
    - id: transform
      type: Elements.Geometry.Transform
      description: The floor&apos;s transform. If set, this will override the floor&apos;s elevation.
    - id: openings
      type: System.Collections.Generic.List{Elements.Opening}
      description: An array of openings in the floor.
    content.vb: Public Sub New(profile As Polygon, elementType As FloorType, elevation As Double = 0, transform As Transform = Nothing, openings As List(Of Opening) = Nothing)
  overload: Elements.Floor.#ctor*
  nameWithType.vb: Floor.Floor(Polygon, FloorType, Double, Transform, List(Of Opening))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Elements.Floor.Floor(Elements.Geometry.Polygon, Elements.FloorType, System.Double, Elements.Geometry.Transform, System.Collections.Generic.List(Of Elements.Opening))
  name.vb: Floor(Polygon, FloorType, Double, Transform, List(Of Opening))
- uid: Elements.Floor.#ctor(Elements.Geometry.Profile,Elements.Geometry.Transform,Elements.Geometry.Vector3,Elements.FloorType,System.Double,Elements.Geometry.Transform)
  commentId: M:Elements.Floor.#ctor(Elements.Geometry.Profile,Elements.Geometry.Transform,Elements.Geometry.Vector3,Elements.FloorType,System.Double,Elements.Geometry.Transform)
  id: '#ctor(Elements.Geometry.Profile,Elements.Geometry.Transform,Elements.Geometry.Vector3,Elements.FloorType,System.Double,Elements.Geometry.Transform)'
  parent: Elements.Floor
  langs:
  - csharp
  - vb
  name: Floor(Profile, Transform, Vector3, FloorType, Double, Transform)
  nameWithType: Floor.Floor(Profile, Transform, Vector3, FloorType, Double, Transform)
  fullName: Elements.Floor.Floor(Elements.Geometry.Profile, Elements.Geometry.Transform, Elements.Geometry.Vector3, Elements.FloorType, System.Double, Elements.Geometry.Transform)
  type: Constructor
  source:
    remote:
      path: src/Elements/Floor.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Floor.cs
    startLine: 83
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nCreate a floor.\n"
  example: []
  syntax:
    content: public Floor(Profile profile, Transform start, Vector3 direction, FloorType elementType, double elevation = 0, Transform transform = null)
    parameters:
    - id: profile
      type: Elements.Geometry.Profile
      description: The profile of the floor.
    - id: start
      type: Elements.Geometry.Transform
      description: A tranform used to pre-transform the profile and direction vector before sweeping the geometry.
    - id: direction
      type: Elements.Geometry.Vector3
      description: The direction of the floor&apos;s sweep.
    - id: elementType
      type: Elements.FloorType
      description: The floor type of the floor.
    - id: elevation
      type: System.Double
      description: The elevation of the floor.
    - id: transform
      type: Elements.Geometry.Transform
      description: The floor&apos;s transform. If set, this will override the elevation.
    content.vb: Public Sub New(profile As Profile, start As Transform, direction As Vector3, elementType As FloorType, elevation As Double = 0, transform As Transform = Nothing)
  overload: Elements.Floor.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Floor.Area
  commentId: M:Elements.Floor.Area
  id: Area
  parent: Elements.Floor
  langs:
  - csharp
  - vb
  name: Area()
  nameWithType: Floor.Area()
  fullName: Elements.Floor.Area()
  type: Method
  source:
    remote:
      path: src/Elements/Floor.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Area
    path: ../src/Elements/Floor.cs
    startLine: 109
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nThe area of the floor.\n"
  example: []
  syntax:
    content: public double Area()
    return:
      type: System.Double
      description: The area of the floor, not including the area of openings.
    content.vb: Public Function Area As Double
  overload: Elements.Floor.Area*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Floor.ProfileTransformed
  commentId: M:Elements.Floor.ProfileTransformed
  id: ProfileTransformed
  parent: Elements.Floor
  langs:
  - csharp
  - vb
  name: ProfileTransformed()
  nameWithType: Floor.ProfileTransformed()
  fullName: Elements.Floor.ProfileTransformed()
  type: Method
  source:
    remote:
      path: src/Elements/Floor.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: ProfileTransformed
    path: ../src/Elements/Floor.cs
    startLine: 117
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nGet the profile of the floor transformed by the floor&apos;s transform.\n"
  example: []
  syntax:
    content: public Profile ProfileTransformed()
    return:
      type: Elements.Geometry.Profile
    content.vb: Public Function ProfileTransformed As Profile
  overload: Elements.Floor.ProfileTransformed*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Floor.Thickness
  commentId: M:Elements.Floor.Thickness
  id: Thickness
  parent: Elements.Floor
  langs:
  - csharp
  - vb
  name: Thickness()
  nameWithType: Floor.Thickness()
  fullName: Elements.Floor.Thickness()
  type: Method
  source:
    remote:
      path: src/Elements/Floor.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Thickness
    path: ../src/Elements/Floor.cs
    startLine: 125
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nCalculate thickness of the floor&apos;s extrusion.\n"
  example: []
  syntax:
    content: public double Thickness()
    return:
      type: System.Double
    content.vb: Public Function Thickness As Double
  overload: Elements.Floor.Thickness*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Elements
  commentId: N:Elements
  name: Elements
  nameWithType: Elements
  fullName: Elements
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Elements.Element
  commentId: T:Elements.Element
  parent: Elements
  name: Element
  nameWithType: Element
  fullName: Elements.Element
- uid: Elements.Interfaces.IElement
  commentId: T:Elements.Interfaces.IElement
  parent: Elements.Interfaces
  name: IElement
  nameWithType: IElement
  fullName: Elements.Interfaces.IElement
- uid: Elements.Interfaces.IIdentifiable
  commentId: T:Elements.Interfaces.IIdentifiable
  parent: Elements.Interfaces
  name: IIdentifiable
  nameWithType: IIdentifiable
  fullName: Elements.Interfaces.IIdentifiable
- uid: Elements.Geometry.Interfaces.ITransformable
  commentId: T:Elements.Geometry.Interfaces.ITransformable
  parent: Elements.Geometry.Interfaces
  name: ITransformable
  nameWithType: ITransformable
  fullName: Elements.Geometry.Interfaces.ITransformable
- uid: Elements.Interfaces.IPropertySet
  commentId: T:Elements.Interfaces.IPropertySet
  parent: Elements.Interfaces
  name: IPropertySet
  nameWithType: IPropertySet
  fullName: Elements.Interfaces.IPropertySet
- uid: Elements.Interfaces.IElementType{Elements.FloorType}
  commentId: T:Elements.Interfaces.IElementType{Elements.FloorType}
  parent: Elements.Interfaces
  definition: Elements.Interfaces.IElementType`1
  name: IElementType<FloorType>
  nameWithType: IElementType<FloorType>
  fullName: Elements.Interfaces.IElementType<Elements.FloorType>
  nameWithType.vb: IElementType(Of FloorType)
  fullName.vb: Elements.Interfaces.IElementType(Of Elements.FloorType)
  name.vb: IElementType(Of FloorType)
  spec.csharp:
  - uid: Elements.Interfaces.IElementType`1
    name: IElementType
    nameWithType: IElementType
    fullName: Elements.Interfaces.IElementType
  - name: <
    nameWithType: <
    fullName: <
  - uid: Elements.FloorType
    name: FloorType
    nameWithType: FloorType
    fullName: Elements.FloorType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Elements.Interfaces.IElementType`1
    name: IElementType
    nameWithType: IElementType
    fullName: Elements.Interfaces.IElementType
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Elements.FloorType
    name: FloorType
    nameWithType: FloorType
    fullName: Elements.FloorType
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Interfaces.ISolid
  commentId: T:Elements.Geometry.Interfaces.ISolid
  parent: Elements.Geometry.Interfaces
  name: ISolid
  nameWithType: ISolid
  fullName: Elements.Geometry.Interfaces.ISolid
- uid: Elements.Geometry.Interfaces.IExtrude
  commentId: T:Elements.Geometry.Interfaces.IExtrude
  parent: Elements.Geometry.Interfaces
  name: IExtrude
  nameWithType: IExtrude
  fullName: Elements.Geometry.Interfaces.IExtrude
- uid: Elements.Geometry.Interfaces.IProfile
  commentId: T:Elements.Geometry.Interfaces.IProfile
  parent: Elements.Geometry.Interfaces
  name: IProfile
  nameWithType: IProfile
  fullName: Elements.Geometry.Interfaces.IProfile
- uid: Hypar.Elements.Interfaces.IHasOpenings
  commentId: T:Hypar.Elements.Interfaces.IHasOpenings
  parent: Hypar.Elements.Interfaces
  name: IHasOpenings
  nameWithType: IHasOpenings
  fullName: Hypar.Elements.Interfaces.IHasOpenings
- uid: Elements.Element.Id
  commentId: P:Elements.Element.Id
  parent: Elements.Element
  name: Id
  nameWithType: Element.Id
  fullName: Elements.Element.Id
- uid: Elements.Element.Type
  commentId: P:Elements.Element.Type
  parent: Elements.Element
  name: Type
  nameWithType: Element.Type
  fullName: Elements.Element.Type
- uid: Elements.Element.Properties
  commentId: P:Elements.Element.Properties
  parent: Elements.Element
  name: Properties
  nameWithType: Element.Properties
  fullName: Elements.Element.Properties
- uid: Elements.Element.Transform
  commentId: P:Elements.Element.Transform
  parent: Elements.Element
  name: Transform
  nameWithType: Element.Transform
  fullName: Elements.Element.Transform
- uid: Elements.Element.Name
  commentId: P:Elements.Element.Name
  parent: Elements.Element
  name: Name
  nameWithType: Element.Name
  fullName: Elements.Element.Name
- uid: Elements.Element.AddProperty(System.String,Elements.Interfaces.IProperty)
  commentId: M:Elements.Element.AddProperty(System.String,Elements.Interfaces.IProperty)
  parent: Elements.Element
  isExternal: true
  name: AddProperty(String, IProperty)
  nameWithType: Element.AddProperty(String, IProperty)
  fullName: Elements.Element.AddProperty(System.String, Elements.Interfaces.IProperty)
  spec.csharp:
  - uid: Elements.Element.AddProperty(System.String,Elements.Interfaces.IProperty)
    name: AddProperty
    nameWithType: Element.AddProperty
    fullName: Elements.Element.AddProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Elements.Interfaces.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Elements.Interfaces.IProperty
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Element.AddProperty(System.String,Elements.Interfaces.IProperty)
    name: AddProperty
    nameWithType: Element.AddProperty
    fullName: Elements.Element.AddProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Elements.Interfaces.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Elements.Interfaces.IProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Element.RemoveProperty(System.String)
  commentId: M:Elements.Element.RemoveProperty(System.String)
  parent: Elements.Element
  isExternal: true
  name: RemoveProperty(String)
  nameWithType: Element.RemoveProperty(String)
  fullName: Elements.Element.RemoveProperty(System.String)
  spec.csharp:
  - uid: Elements.Element.RemoveProperty(System.String)
    name: RemoveProperty
    nameWithType: Element.RemoveProperty
    fullName: Elements.Element.RemoveProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Element.RemoveProperty(System.String)
    name: RemoveProperty
    nameWithType: Element.RemoveProperty
    fullName: Elements.Element.RemoveProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Elements.Interfaces
  commentId: N:Elements.Interfaces
  name: Elements.Interfaces
  nameWithType: Elements.Interfaces
  fullName: Elements.Interfaces
- uid: Elements.Geometry.Interfaces
  commentId: N:Elements.Geometry.Interfaces
  name: Elements.Geometry.Interfaces
  nameWithType: Elements.Geometry.Interfaces
  fullName: Elements.Geometry.Interfaces
- uid: Elements.Interfaces.IElementType`1
  commentId: T:Elements.Interfaces.IElementType`1
  name: IElementType<TElementType>
  nameWithType: IElementType<TElementType>
  fullName: Elements.Interfaces.IElementType<TElementType>
  nameWithType.vb: IElementType(Of TElementType)
  fullName.vb: Elements.Interfaces.IElementType(Of TElementType)
  name.vb: IElementType(Of TElementType)
  spec.csharp:
  - uid: Elements.Interfaces.IElementType`1
    name: IElementType
    nameWithType: IElementType
    fullName: Elements.Interfaces.IElementType
  - name: <
    nameWithType: <
    fullName: <
  - name: TElementType
    nameWithType: TElementType
    fullName: TElementType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Elements.Interfaces.IElementType`1
    name: IElementType
    nameWithType: IElementType
    fullName: Elements.Interfaces.IElementType
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElementType
    nameWithType: TElementType
    fullName: TElementType
  - name: )
    nameWithType: )
    fullName: )
- uid: Hypar.Elements.Interfaces
  commentId: N:Hypar.Elements.Interfaces
  name: Hypar.Elements.Interfaces
  nameWithType: Hypar.Elements.Interfaces
  fullName: Hypar.Elements.Interfaces
- uid: Elements.Floor.Elevation*
  commentId: Overload:Elements.Floor.Elevation
  name: Elevation
  nameWithType: Floor.Elevation
  fullName: Elements.Floor.Elevation
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Elements.Floor.ElementType*
  commentId: Overload:Elements.Floor.ElementType
  name: ElementType
  nameWithType: Floor.ElementType
  fullName: Elements.Floor.ElementType
- uid: Elements.Interfaces.IElementType{Elements.FloorType}.ElementType
  commentId: P:Elements.Interfaces.IElementType{Elements.FloorType}.ElementType
  parent: Elements.Interfaces.IElementType{Elements.FloorType}
  definition: Elements.Interfaces.IElementType`1.ElementType
  name: ElementType
  nameWithType: IElementType<FloorType>.ElementType
  fullName: Elements.Interfaces.IElementType<Elements.FloorType>.ElementType
  nameWithType.vb: IElementType(Of FloorType).ElementType
  fullName.vb: Elements.Interfaces.IElementType(Of Elements.FloorType).ElementType
- uid: Elements.FloorType
  commentId: T:Elements.FloorType
  parent: Elements
  name: FloorType
  nameWithType: FloorType
  fullName: Elements.FloorType
- uid: Elements.Interfaces.IElementType`1.ElementType
  commentId: P:Elements.Interfaces.IElementType`1.ElementType
  name: ElementType
  nameWithType: IElementType<TElementType>.ElementType
  fullName: Elements.Interfaces.IElementType<TElementType>.ElementType
  nameWithType.vb: IElementType(Of TElementType).ElementType
  fullName.vb: Elements.Interfaces.IElementType(Of TElementType).ElementType
- uid: Elements.Floor.Profile*
  commentId: Overload:Elements.Floor.Profile
  name: Profile
  nameWithType: Floor.Profile
  fullName: Elements.Floor.Profile
- uid: Elements.Geometry.Interfaces.IProfile.Profile
  commentId: P:Elements.Geometry.Interfaces.IProfile.Profile
  parent: Elements.Geometry.Interfaces.IProfile
  name: Profile
  nameWithType: IProfile.Profile
  fullName: Elements.Geometry.Interfaces.IProfile.Profile
- uid: Elements.Geometry.Profile
  commentId: T:Elements.Geometry.Profile
  parent: Elements.Geometry
  name: Profile
  nameWithType: Profile
  fullName: Elements.Geometry.Profile
- uid: Elements.Geometry
  commentId: N:Elements.Geometry
  name: Elements.Geometry
  nameWithType: Elements.Geometry
  fullName: Elements.Geometry
- uid: Elements.Floor.Geometry*
  commentId: Overload:Elements.Floor.Geometry
  name: Geometry
  nameWithType: Floor.Geometry
  fullName: Elements.Floor.Geometry
- uid: Elements.Geometry.Interfaces.ISolid.Geometry
  commentId: P:Elements.Geometry.Interfaces.ISolid.Geometry
  parent: Elements.Geometry.Interfaces.ISolid
  name: Geometry
  nameWithType: ISolid.Geometry
  fullName: Elements.Geometry.Interfaces.ISolid.Geometry
- uid: Elements.Geometry.Solids.Solid
  commentId: T:Elements.Geometry.Solids.Solid
  parent: Elements.Geometry.Solids
  name: Solid
  nameWithType: Solid
  fullName: Elements.Geometry.Solids.Solid
- uid: Elements.Geometry.Solids
  commentId: N:Elements.Geometry.Solids
  name: Elements.Geometry.Solids
  nameWithType: Elements.Geometry.Solids
  fullName: Elements.Geometry.Solids
- uid: Elements.Floor.Openings*
  commentId: Overload:Elements.Floor.Openings
  name: Openings
  nameWithType: Floor.Openings
  fullName: Elements.Floor.Openings
- uid: Hypar.Elements.Interfaces.IHasOpenings.Openings
  commentId: P:Hypar.Elements.Interfaces.IHasOpenings.Openings
  parent: Hypar.Elements.Interfaces.IHasOpenings
  name: Openings
  nameWithType: IHasOpenings.Openings
  fullName: Hypar.Elements.Interfaces.IHasOpenings.Openings
- uid: System.Collections.Generic.List{Elements.Opening}
  commentId: T:System.Collections.Generic.List{Elements.Opening}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Opening>
  nameWithType: List<Opening>
  fullName: System.Collections.Generic.List<Elements.Opening>
  nameWithType.vb: List(Of Opening)
  fullName.vb: System.Collections.Generic.List(Of Elements.Opening)
  name.vb: List(Of Opening)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Elements.Opening
    name: Opening
    nameWithType: Opening
    fullName: Elements.Opening
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Elements.Opening
    name: Opening
    nameWithType: Opening
    fullName: Elements.Opening
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Elements.Floor.ExtrudeDirection*
  commentId: Overload:Elements.Floor.ExtrudeDirection
  name: ExtrudeDirection
  nameWithType: Floor.ExtrudeDirection
  fullName: Elements.Floor.ExtrudeDirection
- uid: Elements.Geometry.Interfaces.IExtrude.ExtrudeDirection
  commentId: P:Elements.Geometry.Interfaces.IExtrude.ExtrudeDirection
  parent: Elements.Geometry.Interfaces.IExtrude
  name: ExtrudeDirection
  nameWithType: IExtrude.ExtrudeDirection
  fullName: Elements.Geometry.Interfaces.IExtrude.ExtrudeDirection
- uid: Elements.Geometry.Vector3
  commentId: T:Elements.Geometry.Vector3
  parent: Elements.Geometry
  name: Vector3
  nameWithType: Vector3
  fullName: Elements.Geometry.Vector3
- uid: Elements.Floor.ExtrudeDepth*
  commentId: Overload:Elements.Floor.ExtrudeDepth
  name: ExtrudeDepth
  nameWithType: Floor.ExtrudeDepth
  fullName: Elements.Floor.ExtrudeDepth
- uid: Elements.Geometry.Interfaces.IExtrude.ExtrudeDepth
  commentId: P:Elements.Geometry.Interfaces.IExtrude.ExtrudeDepth
  parent: Elements.Geometry.Interfaces.IExtrude
  name: ExtrudeDepth
  nameWithType: IExtrude.ExtrudeDepth
  fullName: Elements.Geometry.Interfaces.IExtrude.ExtrudeDepth
- uid: Elements.Floor.BothSides*
  commentId: Overload:Elements.Floor.BothSides
  name: BothSides
  nameWithType: Floor.BothSides
  fullName: Elements.Floor.BothSides
- uid: Elements.Geometry.Interfaces.IExtrude.BothSides
  commentId: P:Elements.Geometry.Interfaces.IExtrude.BothSides
  parent: Elements.Geometry.Interfaces.IExtrude
  name: BothSides
  nameWithType: IExtrude.BothSides
  fullName: Elements.Geometry.Interfaces.IExtrude.BothSides
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Elements.Floor.#ctor*
  commentId: Overload:Elements.Floor.#ctor
  name: Floor
  nameWithType: Floor.Floor
  fullName: Elements.Floor.Floor
- uid: Elements.Geometry.Polygon
  commentId: T:Elements.Geometry.Polygon
  parent: Elements.Geometry
  name: Polygon
  nameWithType: Polygon
  fullName: Elements.Geometry.Polygon
- uid: Elements.Geometry.Transform
  commentId: T:Elements.Geometry.Transform
  parent: Elements.Geometry
  name: Transform
  nameWithType: Transform
  fullName: Elements.Geometry.Transform
- uid: Elements.Floor.Area*
  commentId: Overload:Elements.Floor.Area
  name: Area
  nameWithType: Floor.Area
  fullName: Elements.Floor.Area
- uid: Elements.Floor.ProfileTransformed*
  commentId: Overload:Elements.Floor.ProfileTransformed
  name: ProfileTransformed
  nameWithType: Floor.ProfileTransformed
  fullName: Elements.Floor.ProfileTransformed
- uid: Elements.Floor.Thickness*
  commentId: Overload:Elements.Floor.Thickness
  name: Thickness
  nameWithType: Floor.Thickness
  fullName: Elements.Floor.Thickness
