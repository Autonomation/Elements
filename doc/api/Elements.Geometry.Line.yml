### YamlMime:ManagedReference
items:
- uid: Elements.Geometry.Line
  commentId: T:Elements.Geometry.Line
  id: Line
  parent: Elements.Geometry
  children:
  - Elements.Geometry.Line.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  - Elements.Geometry.Line.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3,System.Double)
  - Elements.Geometry.Line.Bounds
  - Elements.Geometry.Line.Direction
  - Elements.Geometry.Line.End
  - Elements.Geometry.Line.Equals(System.Object)
  - Elements.Geometry.Line.Frames(System.Double,System.Double)
  - Elements.Geometry.Line.GetHashCode
  - Elements.Geometry.Line.Intersect(Elements.Geometry.Plane)
  - Elements.Geometry.Line.Length
  - Elements.Geometry.Line.PointAt(System.Double)
  - Elements.Geometry.Line.Reversed
  - Elements.Geometry.Line.Start
  - Elements.Geometry.Line.Thicken(System.Double)
  - Elements.Geometry.Line.TransformAt(System.Double)
  - Elements.Geometry.Line.Type
  langs:
  - csharp
  - vb
  name: Line
  nameWithType: Line
  fullName: Elements.Geometry.Line
  type: Class
  source:
    remote:
      path: src/Elements/Geometry/Line.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Line
    path: ../src/Elements/Geometry/Line.cs
    startLine: 9
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nLine represents a linear curve between two points.\n"
  example: []
  syntax:
    content: 'public class Line : ICurve'
    content.vb: >-
      Public Class Line
          Implements ICurve
  inheritance:
  - System.Object
  implements:
  - Elements.Geometry.Interfaces.ICurve
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Elements.Geometry.Line.Type
  commentId: P:Elements.Geometry.Line.Type
  id: Type
  parent: Elements.Geometry.Line
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Line.Type
  fullName: Elements.Geometry.Line.Type
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Line.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Type
    path: ../src/Elements/Geometry/Line.cs
    startLine: 15
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe type of the curve.\nUsed during deserialization to disambiguate derived types.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(Order = -100)]

      public string Type { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty(Order:=-100)>

      Public ReadOnly Property Type As String
  overload: Elements.Geometry.Line.Type*
  implements:
  - Elements.Geometry.Interfaces.ICurve.Type
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Order
      type: System.Int32
      value: -100
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Geometry.Line.Start
  commentId: P:Elements.Geometry.Line.Start
  id: Start
  parent: Elements.Geometry.Line
  langs:
  - csharp
  - vb
  name: Start
  nameWithType: Line.Start
  fullName: Elements.Geometry.Line.Start
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Line.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Start
    path: ../src/Elements/Geometry/Line.cs
    startLine: 24
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe start of the line.\n"
  example: []
  syntax:
    content: public Vector3 Start { get; }
    parameters: []
    return:
      type: Elements.Geometry.Vector3
    content.vb: Public ReadOnly Property Start As Vector3
  overload: Elements.Geometry.Line.Start*
  implements:
  - Elements.Geometry.Interfaces.ICurve.Start
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Geometry.Line.End
  commentId: P:Elements.Geometry.Line.End
  id: End
  parent: Elements.Geometry.Line
  langs:
  - csharp
  - vb
  name: End
  nameWithType: Line.End
  fullName: Elements.Geometry.Line.End
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Line.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: End
    path: ../src/Elements/Geometry/Line.cs
    startLine: 29
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe end of the line.\n"
  example: []
  syntax:
    content: public Vector3 End { get; }
    parameters: []
    return:
      type: Elements.Geometry.Vector3
    content.vb: Public ReadOnly Property End As Vector3
  overload: Elements.Geometry.Line.End*
  implements:
  - Elements.Geometry.Interfaces.ICurve.End
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Geometry.Line.Length
  commentId: M:Elements.Geometry.Line.Length
  id: Length
  parent: Elements.Geometry.Line
  langs:
  - csharp
  - vb
  name: Length()
  nameWithType: Line.Length()
  fullName: Elements.Geometry.Line.Length()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Line.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Length
    path: ../src/Elements/Geometry/Line.cs
    startLine: 34
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCalculate the length of the line.\n"
  example: []
  syntax:
    content: public double Length()
    return:
      type: System.Double
    content.vb: Public Function Length As Double
  overload: Elements.Geometry.Line.Length*
  implements:
  - Elements.Geometry.Interfaces.ICurve.Length
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Line.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Line.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  id: '#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3)'
  parent: Elements.Geometry.Line
  langs:
  - csharp
  - vb
  name: Line(Vector3, Vector3)
  nameWithType: Line.Line(Vector3, Vector3)
  fullName: Elements.Geometry.Line.Line(Elements.Geometry.Vector3, Elements.Geometry.Vector3)
  type: Constructor
  source:
    remote:
      path: src/Elements/Geometry/Line.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Geometry/Line.cs
    startLine: 45
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConstruct a line from start and end points.\n"
  example: []
  syntax:
    content: >-
      [JsonConstructor]

      public Line(Vector3 start, Vector3 end)
    parameters:
    - id: start
      type: Elements.Geometry.Vector3
      description: The start of the line.
    - id: end
      type: Elements.Geometry.Vector3
      description: The end of the line.
    content.vb: >-
      <JsonConstructor>

      Public Sub New(start As Vector3, end As Vector3)
  overload: Elements.Geometry.Line.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when the start and end points are the same.
  attributes:
  - type: Newtonsoft.Json.JsonConstructorAttribute
    ctor: Newtonsoft.Json.JsonConstructorAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Line.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3,System.Double)
  commentId: M:Elements.Geometry.Line.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3,System.Double)
  id: '#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3,System.Double)'
  parent: Elements.Geometry.Line
  langs:
  - csharp
  - vb
  name: Line(Vector3, Vector3, Double)
  nameWithType: Line.Line(Vector3, Vector3, Double)
  fullName: Elements.Geometry.Line.Line(Elements.Geometry.Vector3, Elements.Geometry.Vector3, System.Double)
  type: Constructor
  source:
    remote:
      path: src/Elements/Geometry/Line.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Geometry/Line.cs
    startLine: 62
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConstruct a line of length from a start along direction.\n"
  example: []
  syntax:
    content: public Line(Vector3 start, Vector3 direction, double length)
    parameters:
    - id: start
      type: Elements.Geometry.Vector3
      description: ''
    - id: direction
      type: Elements.Geometry.Vector3
      description: ''
    - id: length
      type: System.Double
      description: ''
    content.vb: Public Sub New(start As Vector3, direction As Vector3, length As Double)
  overload: Elements.Geometry.Line.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Line.TransformAt(System.Double)
  commentId: M:Elements.Geometry.Line.TransformAt(System.Double)
  id: TransformAt(System.Double)
  parent: Elements.Geometry.Line
  langs:
  - csharp
  - vb
  name: TransformAt(Double)
  nameWithType: Line.TransformAt(Double)
  fullName: Elements.Geometry.Line.TransformAt(System.Double)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Line.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: TransformAt
    path: ../src/Elements/Geometry/Line.cs
    startLine: 74
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nGet a transform whose XY plane is perpendicular to the curve, and whose\npositive Z axis points along the curve.\n"
  example: []
  syntax:
    content: public Transform TransformAt(double u)
    parameters:
    - id: u
      type: System.Double
      description: The parameter along the Line, between 0.0 and 1.0, at which to calculate the Transform.
    return:
      type: Elements.Geometry.Transform
      description: A transform.
    content.vb: Public Function TransformAt(u As Double) As Transform
  overload: Elements.Geometry.Line.TransformAt*
  implements:
  - Elements.Geometry.Interfaces.ICurve.TransformAt(System.Double)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Line.PointAt(System.Double)
  commentId: M:Elements.Geometry.Line.PointAt(System.Double)
  id: PointAt(System.Double)
  parent: Elements.Geometry.Line
  langs:
  - csharp
  - vb
  name: PointAt(Double)
  nameWithType: Line.PointAt(Double)
  fullName: Elements.Geometry.Line.PointAt(System.Double)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Line.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: PointAt
    path: ../src/Elements/Geometry/Line.cs
    startLine: 84
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nGet a point along the line at parameter u.\n"
  example: []
  syntax:
    content: public Vector3 PointAt(double u)
    parameters:
    - id: u
      type: System.Double
      description: ''
    return:
      type: Elements.Geometry.Vector3
      description: A point on the curve at parameter u.
    content.vb: Public Function PointAt(u As Double) As Vector3
  overload: Elements.Geometry.Line.PointAt*
  implements:
  - Elements.Geometry.Interfaces.ICurve.PointAt(System.Double)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Line.Reversed
  commentId: M:Elements.Geometry.Line.Reversed
  id: Reversed
  parent: Elements.Geometry.Line
  langs:
  - csharp
  - vb
  name: Reversed()
  nameWithType: Line.Reversed()
  fullName: Elements.Geometry.Line.Reversed()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Line.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Reversed
    path: ../src/Elements/Geometry/Line.cs
    startLine: 108
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nGet a new line that is the reverse of the original line.\n"
  example: []
  syntax:
    content: public ICurve Reversed()
    return:
      type: Elements.Geometry.Interfaces.ICurve
      description: ''
    content.vb: Public Function Reversed As ICurve
  overload: Elements.Geometry.Line.Reversed*
  implements:
  - Elements.Geometry.Interfaces.ICurve.Reversed
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Line.Thicken(System.Double)
  commentId: M:Elements.Geometry.Line.Thicken(System.Double)
  id: Thicken(System.Double)
  parent: Elements.Geometry.Line
  langs:
  - csharp
  - vb
  name: Thicken(Double)
  nameWithType: Line.Thicken(Double)
  fullName: Elements.Geometry.Line.Thicken(System.Double)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Line.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Thicken
    path: ../src/Elements/Geometry/Line.cs
    startLine: 118
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThicken a line by the specified amount.\n"
  example: []
  syntax:
    content: public Polygon Thicken(double amount)
    parameters:
    - id: amount
      type: System.Double
      description: The amount to thicken the line.
    return:
      type: Elements.Geometry.Polygon
      description: ''
    content.vb: Public Function Thicken(amount As Double) As Polygon
  overload: Elements.Geometry.Line.Thicken*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Line.Equals(System.Object)
  commentId: M:Elements.Geometry.Line.Equals(System.Object)
  id: Equals(System.Object)
  parent: Elements.Geometry.Line
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Line.Equals(Object)
  fullName: Elements.Geometry.Line.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Line.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Equals
    path: ../src/Elements/Geometry/Line.cs
    startLine: 138
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nDoes this line equal the provided line?\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The target line.
    return:
      type: System.Boolean
      description: True if the start and end points of the lines are equal, otherwise false.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Elements.Geometry.Line.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Elements.Geometry.Line.GetHashCode
  commentId: M:Elements.Geometry.Line.GetHashCode
  id: GetHashCode
  parent: Elements.Geometry.Line
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Line.GetHashCode()
  fullName: Elements.Geometry.Line.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Line.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: GetHashCode
    path: ../src/Elements/Geometry/Line.cs
    startLine: 152
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nGet the hash code for the line.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: ''
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: Elements.Geometry.Line.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Elements.Geometry.Line.Frames(System.Double,System.Double)
  commentId: M:Elements.Geometry.Line.Frames(System.Double,System.Double)
  id: Frames(System.Double,System.Double)
  parent: Elements.Geometry.Line
  langs:
  - csharp
  - vb
  name: Frames(Double, Double)
  nameWithType: Line.Frames(Double, Double)
  fullName: Elements.Geometry.Line.Frames(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Line.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Frames
    path: ../src/Elements/Geometry/Line.cs
    startLine: 163
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nGet a collection of transforms which represent frames along this line.\n"
  example: []
  syntax:
    content: public Transform[] Frames(double startSetback, double endSetback)
    parameters:
    - id: startSetback
      type: System.Double
      description: The offset from the start of the line.
    - id: endSetback
      type: System.Double
      description: The offset from the end of the line.
    return:
      type: Elements.Geometry.Transform[]
      description: A collection of transforms.
    content.vb: Public Function Frames(startSetback As Double, endSetback As Double) As Transform()
  overload: Elements.Geometry.Line.Frames*
  implements:
  - Elements.Geometry.Interfaces.ICurve.Frames(System.Double,System.Double)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Line.Intersect(Elements.Geometry.Plane)
  commentId: M:Elements.Geometry.Line.Intersect(Elements.Geometry.Plane)
  id: Intersect(Elements.Geometry.Plane)
  parent: Elements.Geometry.Line
  langs:
  - csharp
  - vb
  name: Intersect(Plane)
  nameWithType: Line.Intersect(Plane)
  fullName: Elements.Geometry.Line.Intersect(Elements.Geometry.Plane)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Line.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Intersect
    path: ../src/Elements/Geometry/Line.cs
    startLine: 174
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nIntersect this line with the specified plane \n"
  example: []
  syntax:
    content: public Vector3 Intersect(Plane p)
    parameters:
    - id: p
      type: Elements.Geometry.Plane
      description: The plane.
    return:
      type: Elements.Geometry.Vector3
      description: The point of intersection or null if no intersection occurs.
    content.vb: Public Function Intersect(p As Plane) As Vector3
  overload: Elements.Geometry.Line.Intersect*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Line.Bounds
  commentId: M:Elements.Geometry.Line.Bounds
  id: Bounds
  parent: Elements.Geometry.Line
  langs:
  - csharp
  - vb
  name: Bounds()
  nameWithType: Line.Bounds()
  fullName: Elements.Geometry.Line.Bounds()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Line.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Bounds
    path: ../src/Elements/Geometry/Line.cs
    startLine: 193
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nGet the bounding box for this line.\n"
  example: []
  syntax:
    content: public BBox3 Bounds()
    return:
      type: Elements.Geometry.BBox3
      description: A bounding box for this line.
    content.vb: Public Function Bounds As BBox3
  overload: Elements.Geometry.Line.Bounds*
  implements:
  - Elements.Geometry.Interfaces.ICurve.Bounds
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Line.Direction
  commentId: M:Elements.Geometry.Line.Direction
  id: Direction
  parent: Elements.Geometry.Line
  langs:
  - csharp
  - vb
  name: Direction()
  nameWithType: Line.Direction()
  fullName: Elements.Geometry.Line.Direction()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Line.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Direction
    path: ../src/Elements/Geometry/Line.cs
    startLine: 208
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nA normalized vector representing the direction of the line.\n"
  example: []
  syntax:
    content: public Vector3 Direction()
    return:
      type: Elements.Geometry.Vector3
    content.vb: Public Function Direction As Vector3
  overload: Elements.Geometry.Line.Direction*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Elements.Geometry
  commentId: N:Elements.Geometry
  name: Elements.Geometry
  nameWithType: Elements.Geometry
  fullName: Elements.Geometry
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Elements.Geometry.Interfaces.ICurve
  commentId: T:Elements.Geometry.Interfaces.ICurve
  parent: Elements.Geometry.Interfaces
  name: ICurve
  nameWithType: ICurve
  fullName: Elements.Geometry.Interfaces.ICurve
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Elements.Geometry.Interfaces
  commentId: N:Elements.Geometry.Interfaces
  name: Elements.Geometry.Interfaces
  nameWithType: Elements.Geometry.Interfaces
  fullName: Elements.Geometry.Interfaces
- uid: Elements.Geometry.Line.Type*
  commentId: Overload:Elements.Geometry.Line.Type
  name: Type
  nameWithType: Line.Type
  fullName: Elements.Geometry.Line.Type
- uid: Elements.Geometry.Interfaces.ICurve.Type
  commentId: P:Elements.Geometry.Interfaces.ICurve.Type
  parent: Elements.Geometry.Interfaces.ICurve
  name: Type
  nameWithType: ICurve.Type
  fullName: Elements.Geometry.Interfaces.ICurve.Type
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Elements.Geometry.Line.Start*
  commentId: Overload:Elements.Geometry.Line.Start
  name: Start
  nameWithType: Line.Start
  fullName: Elements.Geometry.Line.Start
- uid: Elements.Geometry.Interfaces.ICurve.Start
  commentId: P:Elements.Geometry.Interfaces.ICurve.Start
  parent: Elements.Geometry.Interfaces.ICurve
  name: Start
  nameWithType: ICurve.Start
  fullName: Elements.Geometry.Interfaces.ICurve.Start
- uid: Elements.Geometry.Vector3
  commentId: T:Elements.Geometry.Vector3
  parent: Elements.Geometry
  name: Vector3
  nameWithType: Vector3
  fullName: Elements.Geometry.Vector3
- uid: Elements.Geometry.Line.End*
  commentId: Overload:Elements.Geometry.Line.End
  name: End
  nameWithType: Line.End
  fullName: Elements.Geometry.Line.End
- uid: Elements.Geometry.Interfaces.ICurve.End
  commentId: P:Elements.Geometry.Interfaces.ICurve.End
  parent: Elements.Geometry.Interfaces.ICurve
  name: End
  nameWithType: ICurve.End
  fullName: Elements.Geometry.Interfaces.ICurve.End
- uid: Elements.Geometry.Line.Length*
  commentId: Overload:Elements.Geometry.Line.Length
  name: Length
  nameWithType: Line.Length
  fullName: Elements.Geometry.Line.Length
- uid: Elements.Geometry.Interfaces.ICurve.Length
  commentId: M:Elements.Geometry.Interfaces.ICurve.Length
  parent: Elements.Geometry.Interfaces.ICurve
  name: Length()
  nameWithType: ICurve.Length()
  fullName: Elements.Geometry.Interfaces.ICurve.Length()
  spec.csharp:
  - uid: Elements.Geometry.Interfaces.ICurve.Length
    name: Length
    nameWithType: ICurve.Length
    fullName: Elements.Geometry.Interfaces.ICurve.Length
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Geometry.Interfaces.ICurve.Length
    name: Length
    nameWithType: ICurve.Length
    fullName: Elements.Geometry.Interfaces.ICurve.Length
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: Elements.Geometry.Line.#ctor*
  commentId: Overload:Elements.Geometry.Line.#ctor
  name: Line
  nameWithType: Line.Line
  fullName: Elements.Geometry.Line.Line
- uid: Elements.Geometry.Line.TransformAt*
  commentId: Overload:Elements.Geometry.Line.TransformAt
  name: TransformAt
  nameWithType: Line.TransformAt
  fullName: Elements.Geometry.Line.TransformAt
- uid: Elements.Geometry.Interfaces.ICurve.TransformAt(System.Double)
  commentId: M:Elements.Geometry.Interfaces.ICurve.TransformAt(System.Double)
  parent: Elements.Geometry.Interfaces.ICurve
  isExternal: true
  name: TransformAt(Double)
  nameWithType: ICurve.TransformAt(Double)
  fullName: Elements.Geometry.Interfaces.ICurve.TransformAt(System.Double)
  spec.csharp:
  - uid: Elements.Geometry.Interfaces.ICurve.TransformAt(System.Double)
    name: TransformAt
    nameWithType: ICurve.TransformAt
    fullName: Elements.Geometry.Interfaces.ICurve.TransformAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Geometry.Interfaces.ICurve.TransformAt(System.Double)
    name: TransformAt
    nameWithType: ICurve.TransformAt
    fullName: Elements.Geometry.Interfaces.ICurve.TransformAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Transform
  commentId: T:Elements.Geometry.Transform
  parent: Elements.Geometry
  name: Transform
  nameWithType: Transform
  fullName: Elements.Geometry.Transform
- uid: Elements.Geometry.Line.PointAt*
  commentId: Overload:Elements.Geometry.Line.PointAt
  name: PointAt
  nameWithType: Line.PointAt
  fullName: Elements.Geometry.Line.PointAt
- uid: Elements.Geometry.Interfaces.ICurve.PointAt(System.Double)
  commentId: M:Elements.Geometry.Interfaces.ICurve.PointAt(System.Double)
  parent: Elements.Geometry.Interfaces.ICurve
  isExternal: true
  name: PointAt(Double)
  nameWithType: ICurve.PointAt(Double)
  fullName: Elements.Geometry.Interfaces.ICurve.PointAt(System.Double)
  spec.csharp:
  - uid: Elements.Geometry.Interfaces.ICurve.PointAt(System.Double)
    name: PointAt
    nameWithType: ICurve.PointAt
    fullName: Elements.Geometry.Interfaces.ICurve.PointAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Geometry.Interfaces.ICurve.PointAt(System.Double)
    name: PointAt
    nameWithType: ICurve.PointAt
    fullName: Elements.Geometry.Interfaces.ICurve.PointAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Line.Reversed*
  commentId: Overload:Elements.Geometry.Line.Reversed
  name: Reversed
  nameWithType: Line.Reversed
  fullName: Elements.Geometry.Line.Reversed
- uid: Elements.Geometry.Interfaces.ICurve.Reversed
  commentId: M:Elements.Geometry.Interfaces.ICurve.Reversed
  parent: Elements.Geometry.Interfaces.ICurve
  name: Reversed()
  nameWithType: ICurve.Reversed()
  fullName: Elements.Geometry.Interfaces.ICurve.Reversed()
  spec.csharp:
  - uid: Elements.Geometry.Interfaces.ICurve.Reversed
    name: Reversed
    nameWithType: ICurve.Reversed
    fullName: Elements.Geometry.Interfaces.ICurve.Reversed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Geometry.Interfaces.ICurve.Reversed
    name: Reversed
    nameWithType: ICurve.Reversed
    fullName: Elements.Geometry.Interfaces.ICurve.Reversed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Line.Thicken*
  commentId: Overload:Elements.Geometry.Line.Thicken
  name: Thicken
  nameWithType: Line.Thicken
  fullName: Elements.Geometry.Line.Thicken
- uid: Elements.Geometry.Polygon
  commentId: T:Elements.Geometry.Polygon
  parent: Elements.Geometry
  name: Polygon
  nameWithType: Polygon
  fullName: Elements.Geometry.Polygon
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Line.Equals*
  commentId: Overload:Elements.Geometry.Line.Equals
  name: Equals
  nameWithType: Line.Equals
  fullName: Elements.Geometry.Line.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Line.GetHashCode*
  commentId: Overload:Elements.Geometry.Line.GetHashCode
  name: GetHashCode
  nameWithType: Line.GetHashCode
  fullName: Elements.Geometry.Line.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Elements.Geometry.Line.Frames*
  commentId: Overload:Elements.Geometry.Line.Frames
  name: Frames
  nameWithType: Line.Frames
  fullName: Elements.Geometry.Line.Frames
- uid: Elements.Geometry.Interfaces.ICurve.Frames(System.Double,System.Double)
  commentId: M:Elements.Geometry.Interfaces.ICurve.Frames(System.Double,System.Double)
  parent: Elements.Geometry.Interfaces.ICurve
  isExternal: true
  name: Frames(Double, Double)
  nameWithType: ICurve.Frames(Double, Double)
  fullName: Elements.Geometry.Interfaces.ICurve.Frames(System.Double, System.Double)
  spec.csharp:
  - uid: Elements.Geometry.Interfaces.ICurve.Frames(System.Double,System.Double)
    name: Frames
    nameWithType: ICurve.Frames
    fullName: Elements.Geometry.Interfaces.ICurve.Frames
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Geometry.Interfaces.ICurve.Frames(System.Double,System.Double)
    name: Frames
    nameWithType: ICurve.Frames
    fullName: Elements.Geometry.Interfaces.ICurve.Frames
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Transform[]
  isExternal: true
  name: Transform[]
  nameWithType: Transform[]
  fullName: Elements.Geometry.Transform[]
  nameWithType.vb: Transform()
  fullName.vb: Elements.Geometry.Transform()
  name.vb: Transform()
  spec.csharp:
  - uid: Elements.Geometry.Transform
    name: Transform
    nameWithType: Transform
    fullName: Elements.Geometry.Transform
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Elements.Geometry.Transform
    name: Transform
    nameWithType: Transform
    fullName: Elements.Geometry.Transform
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Elements.Geometry.Line.Intersect*
  commentId: Overload:Elements.Geometry.Line.Intersect
  name: Intersect
  nameWithType: Line.Intersect
  fullName: Elements.Geometry.Line.Intersect
- uid: Elements.Geometry.Plane
  commentId: T:Elements.Geometry.Plane
  parent: Elements.Geometry
  name: Plane
  nameWithType: Plane
  fullName: Elements.Geometry.Plane
- uid: Elements.Geometry.Line.Bounds*
  commentId: Overload:Elements.Geometry.Line.Bounds
  name: Bounds
  nameWithType: Line.Bounds
  fullName: Elements.Geometry.Line.Bounds
- uid: Elements.Geometry.Interfaces.ICurve.Bounds
  commentId: M:Elements.Geometry.Interfaces.ICurve.Bounds
  parent: Elements.Geometry.Interfaces.ICurve
  name: Bounds()
  nameWithType: ICurve.Bounds()
  fullName: Elements.Geometry.Interfaces.ICurve.Bounds()
  spec.csharp:
  - uid: Elements.Geometry.Interfaces.ICurve.Bounds
    name: Bounds
    nameWithType: ICurve.Bounds
    fullName: Elements.Geometry.Interfaces.ICurve.Bounds
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Geometry.Interfaces.ICurve.Bounds
    name: Bounds
    nameWithType: ICurve.Bounds
    fullName: Elements.Geometry.Interfaces.ICurve.Bounds
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.BBox3
  commentId: T:Elements.Geometry.BBox3
  parent: Elements.Geometry
  name: BBox3
  nameWithType: BBox3
  fullName: Elements.Geometry.BBox3
- uid: Elements.Geometry.Line.Direction*
  commentId: Overload:Elements.Geometry.Line.Direction
  name: Direction
  nameWithType: Line.Direction
  fullName: Elements.Geometry.Line.Direction
