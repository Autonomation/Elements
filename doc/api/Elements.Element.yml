### YamlMime:ManagedReference
items:
- uid: Elements.Element
  commentId: T:Elements.Element
  id: Element
  parent: Elements
  children:
  - Elements.Element.#ctor
  - Elements.Element.AddProperty(System.String,Elements.Interfaces.IProperty)
  - Elements.Element.Id
  - Elements.Element.Name
  - Elements.Element.Properties
  - Elements.Element.RemoveProperty(System.String)
  - Elements.Element.Transform
  - Elements.Element.Type
  langs:
  - csharp
  - vb
  name: Element
  nameWithType: Element
  fullName: Elements.Element
  type: Class
  source:
    remote:
      path: src/Elements/Element.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Element
    path: ../src/Elements/Element.cs
    startLine: 12
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nBase class for all Elements.\n"
  example: []
  syntax:
    content: 'public abstract class Element : IElement, IIdentifiable, ITransformable, IPropertySet'
    content.vb: >-
      Public MustInherit Class Element
          Implements IElement, IIdentifiable, ITransformable, IPropertySet
  inheritance:
  - System.Object
  derivedClasses:
  - Elements.ElementOfType`1
  - Elements.Floor
  - Elements.Frame
  - Elements.Mass
  - Elements.Opening
  - Elements.Panel
  - Elements.Space
  - Elements.StructuralFraming
  - Elements.Topography
  - Elements.Truss
  - Elements.Wall
  implements:
  - Elements.Interfaces.IElement
  - Elements.Interfaces.IIdentifiable
  - Elements.Geometry.Interfaces.ITransformable
  - Elements.Interfaces.IPropertySet
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Elements.Element.Id
  commentId: P:Elements.Element.Id
  id: Id
  parent: Elements.Element
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: Element.Id
  fullName: Elements.Element.Id
  type: Property
  source:
    remote:
      path: src/Elements/Element.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Id
    path: ../src/Elements/Element.cs
    startLine: 19
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nThe unique identifier of the Element.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(Order = -101)]

      public long Id { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: >-
      <JsonProperty(Order:=-101)>

      Public ReadOnly Property Id As Long
  overload: Elements.Element.Id*
  implements:
  - Elements.Interfaces.IIdentifiable.Id
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Order
      type: System.Int32
      value: -101
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Element.Type
  commentId: P:Elements.Element.Type
  id: Type
  parent: Elements.Element
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Element.Type
  fullName: Elements.Element.Type
  type: Property
  source:
    remote:
      path: src/Elements/Element.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Type
    path: ../src/Elements/Element.cs
    startLine: 26
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nThe type of the element.\nUsed during deserialization to disambiguate derived types.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(Order = -100)]

      public string Type { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty(Order:=-100)>

      Public ReadOnly Property Type As String
  overload: Elements.Element.Type*
  implements:
  - Elements.Interfaces.IElement.Type
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Order
      type: System.Int32
      value: -100
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Element.Properties
  commentId: P:Elements.Element.Properties
  id: Properties
  parent: Elements.Element
  langs:
  - csharp
  - vb
  name: Properties
  nameWithType: Element.Properties
  fullName: Elements.Element.Properties
  type: Property
  source:
    remote:
      path: src/Elements/Element.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Properties
    path: ../src/Elements/Element.cs
    startLine: 35
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nA map of Properties for the Element.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(NullValueHandling = NullValueHandling.Ignore)]

      [JsonConverter(typeof(PropertyDictionaryConverter))]

      public Dictionary<string, IProperty> Properties { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Elements.Interfaces.IProperty}
    content.vb: >-
      <JsonProperty(NullValueHandling:=NullValueHandling.Ignore)>

      <JsonConverter(GetType(PropertyDictionaryConverter))>

      Public ReadOnly Property Properties As Dictionary(Of String, IProperty)
  overload: Elements.Element.Properties*
  implements:
  - Elements.Interfaces.IPropertySet.Properties
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  - type: Newtonsoft.Json.JsonConverterAttribute
    ctor: Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: Elements.Serialization.JSON.PropertyDictionaryConverter
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Element.Transform
  commentId: P:Elements.Element.Transform
  id: Transform
  parent: Elements.Element
  langs:
  - csharp
  - vb
  name: Transform
  nameWithType: Element.Transform
  fullName: Elements.Element.Transform
  type: Property
  source:
    remote:
      path: src/Elements/Element.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Transform
    path: ../src/Elements/Element.cs
    startLine: 45
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nThe element&apos;s transform.\n"
  example: []
  syntax:
    content: public Transform Transform { get; protected set; }
    parameters: []
    return:
      type: Elements.Geometry.Transform
    content.vb: Public Property Transform As Transform
  overload: Elements.Element.Transform*
  implements:
  - Elements.Geometry.Interfaces.ITransformable.Transform
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Elements.Element.Name
  commentId: P:Elements.Element.Name
  id: Name
  parent: Elements.Element
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Element.Name
  fullName: Elements.Element.Name
  type: Property
  source:
    remote:
      path: src/Elements/Element.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Name
    path: ../src/Elements/Element.cs
    startLine: 50
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nA human-readable name for the Element.\n"
  example: []
  syntax:
    content: public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Name As String
  overload: Elements.Element.Name*
  implements:
  - Elements.Interfaces.IIdentifiable.Name
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Elements.Element.#ctor
  commentId: M:Elements.Element.#ctor
  id: '#ctor'
  parent: Elements.Element
  langs:
  - csharp
  - vb
  name: Element()
  nameWithType: Element.Element()
  fullName: Elements.Element.Element()
  type: Constructor
  source:
    remote:
      path: src/Elements/Element.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Element.cs
    startLine: 55
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nConstruct a default Element.\n"
  example: []
  syntax:
    content: public Element()
    content.vb: Public Sub New
  overload: Elements.Element.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Element.AddProperty(System.String,Elements.Interfaces.IProperty)
  commentId: M:Elements.Element.AddProperty(System.String,Elements.Interfaces.IProperty)
  id: AddProperty(System.String,Elements.Interfaces.IProperty)
  parent: Elements.Element
  langs:
  - csharp
  - vb
  name: AddProperty(String, IProperty)
  nameWithType: Element.AddProperty(String, IProperty)
  fullName: Elements.Element.AddProperty(System.String, Elements.Interfaces.IProperty)
  type: Method
  source:
    remote:
      path: src/Elements/Element.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: AddProperty
    path: ../src/Elements/Element.cs
    startLine: 67
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nAdd a Property to the Element.\n"
  example: []
  syntax:
    content: public void AddProperty(string name, IProperty property)
    parameters:
    - id: name
      type: System.String
      description: The name of the parameter.
    - id: property
      type: Elements.Interfaces.IProperty
      description: The parameter to add.
    content.vb: Public Sub AddProperty(name As String, property As IProperty)
  overload: Elements.Element.AddProperty*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: Thrown when an parameter with the same name already exists.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Element.RemoveProperty(System.String)
  commentId: M:Elements.Element.RemoveProperty(System.String)
  id: RemoveProperty(System.String)
  parent: Elements.Element
  langs:
  - csharp
  - vb
  name: RemoveProperty(String)
  nameWithType: Element.RemoveProperty(String)
  fullName: Elements.Element.RemoveProperty(System.String)
  type: Method
  source:
    remote:
      path: src/Elements/Element.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: RemoveProperty
    path: ../src/Elements/Element.cs
    startLine: 83
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nRemove a Property from the Properties map.\n"
  example: []
  syntax:
    content: public void RemoveProperty(string name)
    parameters:
    - id: name
      type: System.String
      description: The name of the parameter to remove.
    content.vb: Public Sub RemoveProperty(name As String)
  overload: Elements.Element.RemoveProperty*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: Thrown when the specified parameter cannot be found.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Elements
  commentId: N:Elements
  name: Elements
  nameWithType: Elements
  fullName: Elements
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Elements.Interfaces.IElement
  commentId: T:Elements.Interfaces.IElement
  parent: Elements.Interfaces
  name: IElement
  nameWithType: IElement
  fullName: Elements.Interfaces.IElement
- uid: Elements.Interfaces.IIdentifiable
  commentId: T:Elements.Interfaces.IIdentifiable
  parent: Elements.Interfaces
  name: IIdentifiable
  nameWithType: IIdentifiable
  fullName: Elements.Interfaces.IIdentifiable
- uid: Elements.Geometry.Interfaces.ITransformable
  commentId: T:Elements.Geometry.Interfaces.ITransformable
  parent: Elements.Geometry.Interfaces
  name: ITransformable
  nameWithType: ITransformable
  fullName: Elements.Geometry.Interfaces.ITransformable
- uid: Elements.Interfaces.IPropertySet
  commentId: T:Elements.Interfaces.IPropertySet
  parent: Elements.Interfaces
  name: IPropertySet
  nameWithType: IPropertySet
  fullName: Elements.Interfaces.IPropertySet
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Elements.Interfaces
  commentId: N:Elements.Interfaces
  name: Elements.Interfaces
  nameWithType: Elements.Interfaces
  fullName: Elements.Interfaces
- uid: Elements.Geometry.Interfaces
  commentId: N:Elements.Geometry.Interfaces
  name: Elements.Geometry.Interfaces
  nameWithType: Elements.Geometry.Interfaces
  fullName: Elements.Geometry.Interfaces
- uid: Elements.Element.Id*
  commentId: Overload:Elements.Element.Id
  name: Id
  nameWithType: Element.Id
  fullName: Elements.Element.Id
- uid: Elements.Interfaces.IIdentifiable.Id
  commentId: P:Elements.Interfaces.IIdentifiable.Id
  parent: Elements.Interfaces.IIdentifiable
  name: Id
  nameWithType: IIdentifiable.Id
  fullName: Elements.Interfaces.IIdentifiable.Id
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Elements.Element.Type*
  commentId: Overload:Elements.Element.Type
  name: Type
  nameWithType: Element.Type
  fullName: Elements.Element.Type
- uid: Elements.Interfaces.IElement.Type
  commentId: P:Elements.Interfaces.IElement.Type
  parent: Elements.Interfaces.IElement
  name: Type
  nameWithType: IElement.Type
  fullName: Elements.Interfaces.IElement.Type
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Elements.Element.Properties*
  commentId: Overload:Elements.Element.Properties
  name: Properties
  nameWithType: Element.Properties
  fullName: Elements.Element.Properties
- uid: Elements.Interfaces.IPropertySet.Properties
  commentId: P:Elements.Interfaces.IPropertySet.Properties
  parent: Elements.Interfaces.IPropertySet
  name: Properties
  nameWithType: IPropertySet.Properties
  fullName: Elements.Interfaces.IPropertySet.Properties
- uid: System.Collections.Generic.Dictionary{System.String,Elements.Interfaces.IProperty}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Elements.Interfaces.IProperty}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, IProperty>
  nameWithType: Dictionary<String, IProperty>
  fullName: System.Collections.Generic.Dictionary<System.String, Elements.Interfaces.IProperty>
  nameWithType.vb: Dictionary(Of String, IProperty)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Elements.Interfaces.IProperty)
  name.vb: Dictionary(Of String, IProperty)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Elements.Interfaces.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Elements.Interfaces.IProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Elements.Interfaces.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Elements.Interfaces.IProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Elements.Element.Transform*
  commentId: Overload:Elements.Element.Transform
  name: Transform
  nameWithType: Element.Transform
  fullName: Elements.Element.Transform
- uid: Elements.Geometry.Interfaces.ITransformable.Transform
  commentId: P:Elements.Geometry.Interfaces.ITransformable.Transform
  parent: Elements.Geometry.Interfaces.ITransformable
  name: Transform
  nameWithType: ITransformable.Transform
  fullName: Elements.Geometry.Interfaces.ITransformable.Transform
- uid: Elements.Geometry.Transform
  commentId: T:Elements.Geometry.Transform
  parent: Elements.Geometry
  name: Transform
  nameWithType: Transform
  fullName: Elements.Geometry.Transform
- uid: Elements.Geometry
  commentId: N:Elements.Geometry
  name: Elements.Geometry
  nameWithType: Elements.Geometry
  fullName: Elements.Geometry
- uid: Elements.Element.Name*
  commentId: Overload:Elements.Element.Name
  name: Name
  nameWithType: Element.Name
  fullName: Elements.Element.Name
- uid: Elements.Interfaces.IIdentifiable.Name
  commentId: P:Elements.Interfaces.IIdentifiable.Name
  parent: Elements.Interfaces.IIdentifiable
  name: Name
  nameWithType: IIdentifiable.Name
  fullName: Elements.Interfaces.IIdentifiable.Name
- uid: Elements.Element.#ctor*
  commentId: Overload:Elements.Element.#ctor
  name: Element
  nameWithType: Element.Element
  fullName: Elements.Element.Element
- uid: System.Exception
  commentId: T:System.Exception
  isExternal: true
- uid: Elements.Element.AddProperty*
  commentId: Overload:Elements.Element.AddProperty
  name: AddProperty
  nameWithType: Element.AddProperty
  fullName: Elements.Element.AddProperty
- uid: Elements.Interfaces.IProperty
  commentId: T:Elements.Interfaces.IProperty
  parent: Elements.Interfaces
  name: IProperty
  nameWithType: IProperty
  fullName: Elements.Interfaces.IProperty
- uid: Elements.Element.RemoveProperty*
  commentId: Overload:Elements.Element.RemoveProperty
  name: RemoveProperty
  nameWithType: Element.RemoveProperty
  fullName: Elements.Element.RemoveProperty
