### YamlMime:ManagedReference
items:
- uid: Elements.BeamSystem
  commentId: T:Elements.BeamSystem
  id: BeamSystem
  parent: Elements
  children:
  - Elements.BeamSystem.#ctor(Elements.Floor,System.Int32,Elements.StructuralFramingType)
  - Elements.BeamSystem.#ctor(System.Int32,Elements.StructuralFramingType,Elements.Geometry.Line,Elements.Geometry.Line)
  - Elements.BeamSystem.Elements
  langs:
  - csharp
  - vb
  name: BeamSystem
  nameWithType: BeamSystem
  fullName: Elements.BeamSystem
  type: Class
  source:
    remote:
      path: src/Elements/BeamSystem.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: BeamSystem
    path: ../src/Elements/BeamSystem.cs
    startLine: 10
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nBeamSystem represents a collection of beams within a perimeter.\n"
  example: []
  syntax:
    content: 'public class BeamSystem : IAggregateElements'
    content.vb: >-
      Public Class BeamSystem
          Implements IAggregateElements
  inheritance:
  - System.Object
  implements:
  - Elements.Interfaces.IAggregateElements
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Elements.BeamSystem.Elements
  commentId: P:Elements.BeamSystem.Elements
  id: Elements
  parent: Elements.BeamSystem
  langs:
  - csharp
  - vb
  name: Elements
  nameWithType: BeamSystem.Elements
  fullName: Elements.BeamSystem.Elements
  type: Property
  source:
    remote:
      path: src/Elements/BeamSystem.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Elements
    path: ../src/Elements/BeamSystem.cs
    startLine: 15
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nThe Beams that make up the BeamSystem.\n"
  example: []
  syntax:
    content: public List<Element> Elements { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Elements.Element}
    content.vb: Public ReadOnly Property Elements As List(Of Element)
  overload: Elements.BeamSystem.Elements*
  implements:
  - Elements.Interfaces.IAggregateElements.Elements
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.BeamSystem.#ctor(System.Int32,Elements.StructuralFramingType,Elements.Geometry.Line,Elements.Geometry.Line)
  commentId: M:Elements.BeamSystem.#ctor(System.Int32,Elements.StructuralFramingType,Elements.Geometry.Line,Elements.Geometry.Line)
  id: '#ctor(System.Int32,Elements.StructuralFramingType,Elements.Geometry.Line,Elements.Geometry.Line)'
  parent: Elements.BeamSystem
  langs:
  - csharp
  - vb
  name: BeamSystem(Int32, StructuralFramingType, Line, Line)
  nameWithType: BeamSystem.BeamSystem(Int32, StructuralFramingType, Line, Line)
  fullName: Elements.BeamSystem.BeamSystem(System.Int32, Elements.StructuralFramingType, Elements.Geometry.Line, Elements.Geometry.Line)
  type: Constructor
  source:
    remote:
      path: src/Elements/BeamSystem.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/BeamSystem.cs
    startLine: 24
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nConstruct a BeamSystem between two edges.\n"
  example: []
  syntax:
    content: public BeamSystem(int count, StructuralFramingType framingType, Line edge1, Line edge2)
    parameters:
    - id: count
      type: System.Int32
      description: The number of beams to create.
    - id: framingType
      type: Elements.StructuralFramingType
      description: The structural framing type to be used for all beams.
    - id: edge1
      type: Elements.Geometry.Line
      description: The first edge of the system.
    - id: edge2
      type: Elements.Geometry.Line
      description: The second edge of the system.
    content.vb: Public Sub New(count As Integer, framingType As StructuralFramingType, edge1 As Line, edge2 As Line)
  overload: Elements.BeamSystem.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.BeamSystem.#ctor(Elements.Floor,System.Int32,Elements.StructuralFramingType)
  commentId: M:Elements.BeamSystem.#ctor(Elements.Floor,System.Int32,Elements.StructuralFramingType)
  id: '#ctor(Elements.Floor,System.Int32,Elements.StructuralFramingType)'
  parent: Elements.BeamSystem
  langs:
  - csharp
  - vb
  name: BeamSystem(Floor, Int32, StructuralFramingType)
  nameWithType: BeamSystem.BeamSystem(Floor, Int32, StructuralFramingType)
  fullName: Elements.BeamSystem.BeamSystem(Elements.Floor, System.Int32, Elements.StructuralFramingType)
  type: Constructor
  source:
    remote:
      path: src/Elements/BeamSystem.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/BeamSystem.cs
    startLine: 36
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nConstruct a beam system under a slab.\n"
  example: []
  syntax:
    content: public BeamSystem(Floor floor, int count, StructuralFramingType framingType)
    parameters:
    - id: floor
      type: Elements.Floor
      description: The floor under which to create beams.
    - id: count
      type: System.Int32
      description: The number of beams to create.
    - id: framingType
      type: Elements.StructuralFramingType
      description: The structural framing type to be used for all beams.
    content.vb: Public Sub New(floor As Floor, count As Integer, framingType As StructuralFramingType)
  overload: Elements.BeamSystem.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Elements
  commentId: N:Elements
  name: Elements
  nameWithType: Elements
  fullName: Elements
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Elements.Interfaces.IAggregateElements
  commentId: T:Elements.Interfaces.IAggregateElements
  parent: Elements.Interfaces
  name: IAggregateElements
  nameWithType: IAggregateElements
  fullName: Elements.Interfaces.IAggregateElements
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Elements.Interfaces
  commentId: N:Elements.Interfaces
  name: Elements.Interfaces
  nameWithType: Elements.Interfaces
  fullName: Elements.Interfaces
- uid: Elements.BeamSystem.Elements*
  commentId: Overload:Elements.BeamSystem.Elements
  name: Elements
  nameWithType: BeamSystem.Elements
  fullName: Elements.BeamSystem.Elements
- uid: Elements.Interfaces.IAggregateElements.Elements
  commentId: P:Elements.Interfaces.IAggregateElements.Elements
  parent: Elements.Interfaces.IAggregateElements
  name: Elements
  nameWithType: IAggregateElements.Elements
  fullName: Elements.Interfaces.IAggregateElements.Elements
- uid: System.Collections.Generic.List{Elements.Element}
  commentId: T:System.Collections.Generic.List{Elements.Element}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Element>
  nameWithType: List<Element>
  fullName: System.Collections.Generic.List<Elements.Element>
  nameWithType.vb: List(Of Element)
  fullName.vb: System.Collections.Generic.List(Of Elements.Element)
  name.vb: List(Of Element)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Elements.Element
    name: Element
    nameWithType: Element
    fullName: Elements.Element
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Elements.Element
    name: Element
    nameWithType: Element
    fullName: Elements.Element
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Elements.BeamSystem.#ctor*
  commentId: Overload:Elements.BeamSystem.#ctor
  name: BeamSystem
  nameWithType: BeamSystem.BeamSystem
  fullName: Elements.BeamSystem.BeamSystem
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Elements.StructuralFramingType
  commentId: T:Elements.StructuralFramingType
  parent: Elements
  name: StructuralFramingType
  nameWithType: StructuralFramingType
  fullName: Elements.StructuralFramingType
- uid: Elements.Geometry.Line
  commentId: T:Elements.Geometry.Line
  parent: Elements.Geometry
  name: Line
  nameWithType: Line
  fullName: Elements.Geometry.Line
- uid: Elements.Geometry
  commentId: N:Elements.Geometry
  name: Elements.Geometry
  nameWithType: Elements.Geometry
  fullName: Elements.Geometry
- uid: Elements.Floor
  commentId: T:Elements.Floor
  parent: Elements
  name: Floor
  nameWithType: Floor
  fullName: Elements.Floor
