### YamlMime:ManagedReference
items:
- uid: Elements.Interfaces.IAggregateElements
  commentId: T:Elements.Interfaces.IAggregateElements
  id: IAggregateElements
  parent: Elements.Interfaces
  children:
  - Elements.Interfaces.IAggregateElements.Elements
  langs:
  - csharp
  - vb
  name: IAggregateElements
  nameWithType: IAggregateElements
  fullName: Elements.Interfaces.IAggregateElements
  type: Interface
  source:
    remote:
      path: src/Elements/Interfaces/IAggregateElements.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: IAggregateElements
    path: ../src/Elements/Interfaces/IAggregateElements.cs
    startLine: 6
  assemblies:
  - Hypar.Elements
  namespace: Elements.Interfaces
  syntax:
    content: public interface IAggregateElements
    content.vb: Public Interface IAggregateElements
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Elements.Interfaces.IAggregateElements.Elements
  commentId: P:Elements.Interfaces.IAggregateElements.Elements
  id: Elements
  parent: Elements.Interfaces.IAggregateElements
  langs:
  - csharp
  - vb
  name: Elements
  nameWithType: IAggregateElements.Elements
  fullName: Elements.Interfaces.IAggregateElements.Elements
  type: Property
  source:
    remote:
      path: src/Elements/Interfaces/IAggregateElements.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Elements
    path: ../src/Elements/Interfaces/IAggregateElements.cs
    startLine: 8
  assemblies:
  - Hypar.Elements
  namespace: Elements.Interfaces
  syntax:
    content: List<Element> Elements { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Elements.Element}
    content.vb: ReadOnly Property Elements As List(Of Element)
  overload: Elements.Interfaces.IAggregateElements.Elements*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Elements.Interfaces
  commentId: N:Elements.Interfaces
  name: Elements.Interfaces
  nameWithType: Elements.Interfaces
  fullName: Elements.Interfaces
- uid: Elements.Interfaces.IAggregateElements.Elements*
  commentId: Overload:Elements.Interfaces.IAggregateElements.Elements
  name: Elements
  nameWithType: IAggregateElements.Elements
  fullName: Elements.Interfaces.IAggregateElements.Elements
- uid: System.Collections.Generic.List{Elements.Element}
  commentId: T:System.Collections.Generic.List{Elements.Element}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Element>
  nameWithType: List<Element>
  fullName: System.Collections.Generic.List<Elements.Element>
  nameWithType.vb: List(Of Element)
  fullName.vb: System.Collections.Generic.List(Of Elements.Element)
  name.vb: List(Of Element)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Elements.Element
    name: Element
    nameWithType: Element
    fullName: Elements.Element
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Elements.Element
    name: Element
    nameWithType: Element
    fullName: Elements.Element
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
