### YamlMime:ManagedReference
items:
- uid: Elements.Geometry.Transform
  commentId: T:Elements.Geometry.Transform
  id: Transform
  parent: Elements.Geometry
  children:
  - Elements.Geometry.Transform.#ctor
  - Elements.Geometry.Transform.#ctor(Elements.Geometry.Matrix)
  - Elements.Geometry.Transform.#ctor(Elements.Geometry.Transform)
  - Elements.Geometry.Transform.#ctor(Elements.Geometry.Vector3)
  - Elements.Geometry.Transform.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  - Elements.Geometry.Transform.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  - Elements.Geometry.Transform.#ctor(System.Double,System.Double,System.Double)
  - Elements.Geometry.Transform.Concatenate(Elements.Geometry.Transform)
  - Elements.Geometry.Transform.Invert
  - Elements.Geometry.Transform.Matrix
  - Elements.Geometry.Transform.Move(Elements.Geometry.Vector3)
  - Elements.Geometry.Transform.OfLine(Elements.Geometry.Line)
  - Elements.Geometry.Transform.OfPlane(Elements.Geometry.Plane)
  - Elements.Geometry.Transform.OfPoint(Elements.Geometry.Vector3)
  - Elements.Geometry.Transform.OfPolygon(Elements.Geometry.Polygon)
  - Elements.Geometry.Transform.OfPolygons(Elements.Geometry.Polygon[])
  - Elements.Geometry.Transform.OfProfile(Elements.Geometry.Profile)
  - Elements.Geometry.Transform.OfVector(Elements.Geometry.Vector3)
  - Elements.Geometry.Transform.Origin
  - Elements.Geometry.Transform.Rotate(Elements.Geometry.Vector3,System.Double)
  - Elements.Geometry.Transform.Scale(Elements.Geometry.Vector3)
  - Elements.Geometry.Transform.ToString
  - Elements.Geometry.Transform.XAxis
  - Elements.Geometry.Transform.XY
  - Elements.Geometry.Transform.XZ
  - Elements.Geometry.Transform.YAxis
  - Elements.Geometry.Transform.YZ
  - Elements.Geometry.Transform.ZAxis
  langs:
  - csharp
  - vb
  name: Transform
  nameWithType: Transform
  fullName: Elements.Geometry.Transform
  type: Class
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Transform
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 9
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nA coordinate system defined by an origin, x, y, and z axes.\n"
  example: []
  syntax:
    content: public class Transform
    content.vb: Public Class Transform
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Elements.Geometry.Transform.Matrix
  commentId: P:Elements.Geometry.Transform.Matrix
  id: Matrix
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: Matrix
  nameWithType: Transform.Matrix
  fullName: Elements.Geometry.Transform.Matrix
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Matrix
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 16
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe transform&apos;s matrix.\n"
  example: []
  syntax:
    content: public Matrix Matrix { get; }
    parameters: []
    return:
      type: Elements.Geometry.Matrix
    content.vb: Public ReadOnly Property Matrix As Matrix
  overload: Elements.Geometry.Transform.Matrix*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Geometry.Transform.Origin
  commentId: P:Elements.Geometry.Transform.Origin
  id: Origin
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: Origin
  nameWithType: Transform.Origin
  fullName: Elements.Geometry.Transform.Origin
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Origin
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 24
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe origin.\n"
  example: []
  syntax:
    content: >-
      [JsonIgnore]

      public Vector3 Origin { get; }
    parameters: []
    return:
      type: Elements.Geometry.Vector3
    content.vb: >-
      <JsonIgnore>

      Public ReadOnly Property Origin As Vector3
  overload: Elements.Geometry.Transform.Origin*
  attributes:
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Geometry.Transform.XAxis
  commentId: P:Elements.Geometry.Transform.XAxis
  id: XAxis
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: XAxis
  nameWithType: Transform.XAxis
  fullName: Elements.Geometry.Transform.XAxis
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: XAxis
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 33
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe X axis.\n"
  example: []
  syntax:
    content: >-
      [JsonIgnore]

      public Vector3 XAxis { get; }
    parameters: []
    return:
      type: Elements.Geometry.Vector3
    content.vb: >-
      <JsonIgnore>

      Public ReadOnly Property XAxis As Vector3
  overload: Elements.Geometry.Transform.XAxis*
  attributes:
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Geometry.Transform.YAxis
  commentId: P:Elements.Geometry.Transform.YAxis
  id: YAxis
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: YAxis
  nameWithType: Transform.YAxis
  fullName: Elements.Geometry.Transform.YAxis
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: YAxis
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 42
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe Y axis.\n"
  example: []
  syntax:
    content: >-
      [JsonIgnore]

      public Vector3 YAxis { get; }
    parameters: []
    return:
      type: Elements.Geometry.Vector3
    content.vb: >-
      <JsonIgnore>

      Public ReadOnly Property YAxis As Vector3
  overload: Elements.Geometry.Transform.YAxis*
  attributes:
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Geometry.Transform.ZAxis
  commentId: P:Elements.Geometry.Transform.ZAxis
  id: ZAxis
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: ZAxis
  nameWithType: Transform.ZAxis
  fullName: Elements.Geometry.Transform.ZAxis
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: ZAxis
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 51
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe Z axis.\n"
  example: []
  syntax:
    content: >-
      [JsonIgnore]

      public Vector3 ZAxis { get; }
    parameters: []
    return:
      type: Elements.Geometry.Vector3
    content.vb: >-
      <JsonIgnore>

      Public ReadOnly Property ZAxis As Vector3
  overload: Elements.Geometry.Transform.ZAxis*
  attributes:
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Geometry.Transform.#ctor
  commentId: M:Elements.Geometry.Transform.#ctor
  id: '#ctor'
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: Transform()
  nameWithType: Transform.Transform()
  fullName: Elements.Geometry.Transform.Transform()
  type: Constructor
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 60
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCreate the identity transform.\n"
  example: []
  syntax:
    content: public Transform()
    content.vb: Public Sub New
  overload: Elements.Geometry.Transform.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Transform.#ctor(Elements.Geometry.Transform)
  commentId: M:Elements.Geometry.Transform.#ctor(Elements.Geometry.Transform)
  id: '#ctor(Elements.Geometry.Transform)'
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: Transform(Transform)
  nameWithType: Transform.Transform(Transform)
  fullName: Elements.Geometry.Transform.Transform(Elements.Geometry.Transform)
  type: Constructor
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 69
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCreate a transform by copying another transform.\n"
  example: []
  syntax:
    content: public Transform(Transform t)
    parameters:
    - id: t
      type: Elements.Geometry.Transform
      description: The transform to copy.
    content.vb: Public Sub New(t As Transform)
  overload: Elements.Geometry.Transform.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Transform.#ctor(Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Transform.#ctor(Elements.Geometry.Vector3)
  id: '#ctor(Elements.Geometry.Vector3)'
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: Transform(Vector3)
  nameWithType: Transform.Transform(Vector3)
  fullName: Elements.Geometry.Transform.Transform(Elements.Geometry.Vector3)
  type: Constructor
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 78
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCreate a transform with a translation.\n"
  example: []
  syntax:
    content: public Transform(Vector3 origin)
    parameters:
    - id: origin
      type: Elements.Geometry.Vector3
      description: The origin of the transform.
    content.vb: Public Sub New(origin As Vector3)
  overload: Elements.Geometry.Transform.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Transform.#ctor(System.Double,System.Double,System.Double)
  commentId: M:Elements.Geometry.Transform.#ctor(System.Double,System.Double,System.Double)
  id: '#ctor(System.Double,System.Double,System.Double)'
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: Transform(Double, Double, Double)
  nameWithType: Transform.Transform(Double, Double, Double)
  fullName: Elements.Geometry.Transform.Transform(System.Double, System.Double, System.Double)
  type: Constructor
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 90
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCreate a transform with a translation.\n"
  example: []
  syntax:
    content: public Transform(double x, double y, double z)
    parameters:
    - id: x
      type: System.Double
      description: The X component of translation.
    - id: y
      type: System.Double
      description: The Y component of translation.
    - id: z
      type: System.Double
      description: The Z component of translation.
    content.vb: Public Sub New(x As Double, y As Double, z As Double)
  overload: Elements.Geometry.Transform.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Transform.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Transform.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  id: '#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3)'
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: Transform(Vector3, Vector3)
  nameWithType: Transform.Transform(Vector3, Vector3)
  fullName: Elements.Geometry.Transform.Transform(Elements.Geometry.Vector3, Elements.Geometry.Vector3)
  type: Constructor
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 101
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCreate a transform centered at origin and an up vector.\n"
  example: []
  syntax:
    content: public Transform(Vector3 origin, Vector3 up)
    parameters:
    - id: origin
      type: Elements.Geometry.Vector3
      description: The origin of the transform.
    - id: up
      type: Elements.Geometry.Vector3
      description: The vector which will define the Z axis of the transform.
    content.vb: Public Sub New(origin As Vector3, up As Vector3)
  overload: Elements.Geometry.Transform.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Transform.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Transform.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  id: '#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3,Elements.Geometry.Vector3)'
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: Transform(Vector3, Vector3, Vector3)
  nameWithType: Transform.Transform(Vector3, Vector3, Vector3)
  fullName: Elements.Geometry.Transform.Transform(Elements.Geometry.Vector3, Elements.Geometry.Vector3, Elements.Geometry.Vector3)
  type: Constructor
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 119
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCreate a transform by origin and axes.\n"
  example: []
  syntax:
    content: public Transform(Vector3 origin, Vector3 xAxis, Vector3 zAxis)
    parameters:
    - id: origin
      type: Elements.Geometry.Vector3
      description: The origin of the transform.
    - id: xAxis
      type: Elements.Geometry.Vector3
      description: The X axis of the transform.
    - id: zAxis
      type: Elements.Geometry.Vector3
      description: The Z axis of the transform.
    content.vb: Public Sub New(origin As Vector3, xAxis As Vector3, zAxis As Vector3)
  overload: Elements.Geometry.Transform.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Transform.#ctor(Elements.Geometry.Matrix)
  commentId: M:Elements.Geometry.Transform.#ctor(Elements.Geometry.Matrix)
  id: '#ctor(Elements.Geometry.Matrix)'
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: Transform(Matrix)
  nameWithType: Transform.Transform(Matrix)
  fullName: Elements.Geometry.Transform.Transform(Elements.Geometry.Matrix)
  type: Constructor
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 131
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCreate a transform by a matrix.\n"
  example: []
  syntax:
    content: >-
      [JsonConstructor]

      public Transform(Matrix matrix)
    parameters:
    - id: matrix
      type: Elements.Geometry.Matrix
      description: The transform&apos;s Matrix.
    content.vb: >-
      <JsonConstructor>

      Public Sub New(matrix As Matrix)
  overload: Elements.Geometry.Transform.#ctor*
  attributes:
  - type: Newtonsoft.Json.JsonConstructorAttribute
    ctor: Newtonsoft.Json.JsonConstructorAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Transform.ToString
  commentId: M:Elements.Geometry.Transform.ToString
  id: ToString
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Transform.ToString()
  fullName: Elements.Geometry.Transform.ToString()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: ToString
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 175
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nGet a string representation of the transform.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string representation of the transform.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Elements.Geometry.Transform.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Elements.Geometry.Transform.OfPoint(Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Transform.OfPoint(Elements.Geometry.Vector3)
  id: OfPoint(Elements.Geometry.Vector3)
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: OfPoint(Vector3)
  nameWithType: Transform.OfPoint(Vector3)
  fullName: Elements.Geometry.Transform.OfPoint(Elements.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: OfPoint
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 185
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nTransform a vector into the coordinate space defined by this transform ignoring the translation.\n"
  example: []
  syntax:
    content: public Vector3 OfPoint(Vector3 vector)
    parameters:
    - id: vector
      type: Elements.Geometry.Vector3
      description: The vector to transform.
    return:
      type: Elements.Geometry.Vector3
      description: A new vector transformed by this transform.
    content.vb: Public Function OfPoint(vector As Vector3) As Vector3
  overload: Elements.Geometry.Transform.OfPoint*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Transform.OfVector(Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Transform.OfVector(Elements.Geometry.Vector3)
  id: OfVector(Elements.Geometry.Vector3)
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: OfVector(Vector3)
  nameWithType: Transform.OfVector(Vector3)
  fullName: Elements.Geometry.Transform.OfVector(Elements.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: OfVector
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 195
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nTransform a vector into the coordinate space defined by this transform.\n"
  example: []
  syntax:
    content: public Vector3 OfVector(Vector3 vector)
    parameters:
    - id: vector
      type: Elements.Geometry.Vector3
      description: The vector to transform.
    return:
      type: Elements.Geometry.Vector3
      description: A new vector transformed by this transform.
    content.vb: Public Function OfVector(vector As Vector3) As Vector3
  overload: Elements.Geometry.Transform.OfVector*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Transform.OfPolygon(Elements.Geometry.Polygon)
  commentId: M:Elements.Geometry.Transform.OfPolygon(Elements.Geometry.Polygon)
  id: OfPolygon(Elements.Geometry.Polygon)
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: OfPolygon(Polygon)
  nameWithType: Transform.OfPolygon(Polygon)
  fullName: Elements.Geometry.Transform.OfPolygon(Elements.Geometry.Polygon)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: OfPolygon
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 210
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nTransform the specified polygon.\n"
  example: []
  syntax:
    content: public Polygon OfPolygon(Polygon polygon)
    parameters:
    - id: polygon
      type: Elements.Geometry.Polygon
      description: The polygon to transform.
    return:
      type: Elements.Geometry.Polygon
      description: A new polygon transformed by this transform.
    content.vb: Public Function OfPolygon(polygon As Polygon) As Polygon
  overload: Elements.Geometry.Transform.OfPolygon*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Transform.OfPolygons(Elements.Geometry.Polygon[])
  commentId: M:Elements.Geometry.Transform.OfPolygons(Elements.Geometry.Polygon[])
  id: OfPolygons(Elements.Geometry.Polygon[])
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: OfPolygons(Polygon[])
  nameWithType: Transform.OfPolygons(Polygon[])
  fullName: Elements.Geometry.Transform.OfPolygons(Elements.Geometry.Polygon[])
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: OfPolygons
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 226
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nTransform the specified polygons.\n"
  example: []
  syntax:
    content: public Polygon[] OfPolygons(Polygon[] polygons)
    parameters:
    - id: polygons
      type: Elements.Geometry.Polygon[]
      description: The polygons to transform.
    return:
      type: Elements.Geometry.Polygon[]
      description: An array of polygons transformed by this transform.
    content.vb: Public Function OfPolygons(polygons As Polygon()) As Polygon()
  overload: Elements.Geometry.Transform.OfPolygons*
  nameWithType.vb: Transform.OfPolygons(Polygon())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Elements.Geometry.Transform.OfPolygons(Elements.Geometry.Polygon())
  name.vb: OfPolygons(Polygon())
- uid: Elements.Geometry.Transform.OfLine(Elements.Geometry.Line)
  commentId: M:Elements.Geometry.Transform.OfLine(Elements.Geometry.Line)
  id: OfLine(Elements.Geometry.Line)
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: OfLine(Line)
  nameWithType: Transform.OfLine(Line)
  fullName: Elements.Geometry.Transform.OfLine(Elements.Geometry.Line)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: OfLine
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 241
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nTransform the specified line.\n"
  example: []
  syntax:
    content: public Line OfLine(Line line)
    parameters:
    - id: line
      type: Elements.Geometry.Line
      description: The line to transform.
    return:
      type: Elements.Geometry.Line
      description: A new line transformed by this transform.
    content.vb: Public Function OfLine(line As Line) As Line
  overload: Elements.Geometry.Transform.OfLine*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Transform.OfPlane(Elements.Geometry.Plane)
  commentId: M:Elements.Geometry.Transform.OfPlane(Elements.Geometry.Plane)
  id: OfPlane(Elements.Geometry.Plane)
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: OfPlane(Plane)
  nameWithType: Transform.OfPlane(Plane)
  fullName: Elements.Geometry.Transform.OfPlane(Elements.Geometry.Plane)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: OfPlane
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 251
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nTransform the specified plane.\n"
  example: []
  syntax:
    content: public Plane OfPlane(Plane plane)
    parameters:
    - id: plane
      type: Elements.Geometry.Plane
      description: The plane to transform.
    return:
      type: Elements.Geometry.Plane
      description: A new plane transformed by this transform.
    content.vb: Public Function OfPlane(plane As Plane) As Plane
  overload: Elements.Geometry.Transform.OfPlane*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Transform.OfProfile(Elements.Geometry.Profile)
  commentId: M:Elements.Geometry.Transform.OfProfile(Elements.Geometry.Profile)
  id: OfProfile(Elements.Geometry.Profile)
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: OfProfile(Profile)
  nameWithType: Transform.OfProfile(Profile)
  fullName: Elements.Geometry.Transform.OfProfile(Elements.Geometry.Profile)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: OfProfile
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 261
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nTransform the specified profile.\n"
  example: []
  syntax:
    content: public Profile OfProfile(Profile profile)
    parameters:
    - id: profile
      type: Elements.Geometry.Profile
      description: The profile to transform.
    return:
      type: Elements.Geometry.Profile
      description: A new profile transformed by this transform.
    content.vb: Public Function OfProfile(profile As Profile) As Profile
  overload: Elements.Geometry.Transform.OfProfile*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Transform.Concatenate(Elements.Geometry.Transform)
  commentId: M:Elements.Geometry.Transform.Concatenate(Elements.Geometry.Transform)
  id: Concatenate(Elements.Geometry.Transform)
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: Concatenate(Transform)
  nameWithType: Transform.Concatenate(Transform)
  fullName: Elements.Geometry.Transform.Concatenate(Elements.Geometry.Transform)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Concatenate
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 280
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConcatenate the transform.\n"
  example: []
  syntax:
    content: public void Concatenate(Transform transform)
    parameters:
    - id: transform
      type: Elements.Geometry.Transform
      description: ''
    content.vb: Public Sub Concatenate(transform As Transform)
  overload: Elements.Geometry.Transform.Concatenate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Transform.Invert
  commentId: M:Elements.Geometry.Transform.Invert
  id: Invert
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: Invert()
  nameWithType: Transform.Invert()
  fullName: Elements.Geometry.Transform.Invert()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Invert
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 288
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nInvert this transform.\n"
  example: []
  syntax:
    content: public void Invert()
    content.vb: Public Sub Invert
  overload: Elements.Geometry.Transform.Invert*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Transform.Move(Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Transform.Move(Elements.Geometry.Vector3)
  id: Move(Elements.Geometry.Vector3)
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: Move(Vector3)
  nameWithType: Transform.Move(Vector3)
  fullName: Elements.Geometry.Transform.Move(Elements.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Move
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 297
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nApply a translation to the transform.\n"
  example: []
  syntax:
    content: public void Move(Vector3 translation)
    parameters:
    - id: translation
      type: Elements.Geometry.Vector3
      description: The translation to apply.
    content.vb: Public Sub Move(translation As Vector3)
  overload: Elements.Geometry.Transform.Move*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Transform.Rotate(Elements.Geometry.Vector3,System.Double)
  commentId: M:Elements.Geometry.Transform.Rotate(Elements.Geometry.Vector3,System.Double)
  id: Rotate(Elements.Geometry.Vector3,System.Double)
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: Rotate(Vector3, Double)
  nameWithType: Transform.Rotate(Vector3, Double)
  fullName: Elements.Geometry.Transform.Rotate(Elements.Geometry.Vector3, System.Double)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Rotate
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 309
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nApply a rotation to the transform.\n"
  example: []
  syntax:
    content: public void Rotate(Vector3 axis, double angle)
    parameters:
    - id: axis
      type: Elements.Geometry.Vector3
      description: The axis of rotation.
    - id: angle
      type: System.Double
      description: The angle of rotation in degrees.
    content.vb: Public Sub Rotate(axis As Vector3, angle As Double)
  overload: Elements.Geometry.Transform.Rotate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Transform.Scale(Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Transform.Scale(Elements.Geometry.Vector3)
  id: Scale(Elements.Geometry.Vector3)
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: Scale(Vector3)
  nameWithType: Transform.Scale(Vector3)
  fullName: Elements.Geometry.Transform.Scale(Elements.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Scale
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 320
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nApply a scale to the transform.\n"
  example: []
  syntax:
    content: public void Scale(Vector3 amount)
    parameters:
    - id: amount
      type: Elements.Geometry.Vector3
      description: The amount to scale.
    content.vb: Public Sub Scale(amount As Vector3)
  overload: Elements.Geometry.Transform.Scale*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Transform.XY
  commentId: M:Elements.Geometry.Transform.XY
  id: XY
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: XY()
  nameWithType: Transform.XY()
  fullName: Elements.Geometry.Transform.XY()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: XY
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 330
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCalculate XY plane of the transform.\n"
  example: []
  syntax:
    content: public Plane XY()
    return:
      type: Elements.Geometry.Plane
    content.vb: Public Function XY As Plane
  overload: Elements.Geometry.Transform.XY*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Transform.YZ
  commentId: M:Elements.Geometry.Transform.YZ
  id: YZ
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: YZ()
  nameWithType: Transform.YZ()
  fullName: Elements.Geometry.Transform.YZ()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: YZ
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 338
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCalculate the YZ plane of the transform.\n"
  example: []
  syntax:
    content: public Plane YZ()
    return:
      type: Elements.Geometry.Plane
    content.vb: Public Function YZ As Plane
  overload: Elements.Geometry.Transform.YZ*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Transform.XZ
  commentId: M:Elements.Geometry.Transform.XZ
  id: XZ
  parent: Elements.Geometry.Transform
  langs:
  - csharp
  - vb
  name: XZ()
  nameWithType: Transform.XZ()
  fullName: Elements.Geometry.Transform.XZ()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Transform.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: XZ
    path: ../src/Elements/Geometry/Transform.cs
    startLine: 346
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCalculate the XZ plane of the transform.\n"
  example: []
  syntax:
    content: public Plane XZ()
    return:
      type: Elements.Geometry.Plane
    content.vb: Public Function XZ As Plane
  overload: Elements.Geometry.Transform.XZ*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Elements.Geometry
  commentId: N:Elements.Geometry
  name: Elements.Geometry
  nameWithType: Elements.Geometry
  fullName: Elements.Geometry
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Elements.Geometry.Transform.Matrix*
  commentId: Overload:Elements.Geometry.Transform.Matrix
  name: Matrix
  nameWithType: Transform.Matrix
  fullName: Elements.Geometry.Transform.Matrix
- uid: Elements.Geometry.Matrix
  commentId: T:Elements.Geometry.Matrix
  parent: Elements.Geometry
  name: Matrix
  nameWithType: Matrix
  fullName: Elements.Geometry.Matrix
- uid: Elements.Geometry.Transform.Origin*
  commentId: Overload:Elements.Geometry.Transform.Origin
  name: Origin
  nameWithType: Transform.Origin
  fullName: Elements.Geometry.Transform.Origin
- uid: Elements.Geometry.Vector3
  commentId: T:Elements.Geometry.Vector3
  parent: Elements.Geometry
  name: Vector3
  nameWithType: Vector3
  fullName: Elements.Geometry.Vector3
- uid: Elements.Geometry.Transform.XAxis*
  commentId: Overload:Elements.Geometry.Transform.XAxis
  name: XAxis
  nameWithType: Transform.XAxis
  fullName: Elements.Geometry.Transform.XAxis
- uid: Elements.Geometry.Transform.YAxis*
  commentId: Overload:Elements.Geometry.Transform.YAxis
  name: YAxis
  nameWithType: Transform.YAxis
  fullName: Elements.Geometry.Transform.YAxis
- uid: Elements.Geometry.Transform.ZAxis*
  commentId: Overload:Elements.Geometry.Transform.ZAxis
  name: ZAxis
  nameWithType: Transform.ZAxis
  fullName: Elements.Geometry.Transform.ZAxis
- uid: Elements.Geometry.Transform.#ctor*
  commentId: Overload:Elements.Geometry.Transform.#ctor
  name: Transform
  nameWithType: Transform.Transform
  fullName: Elements.Geometry.Transform.Transform
- uid: Elements.Geometry.Transform
  commentId: T:Elements.Geometry.Transform
  parent: Elements.Geometry
  name: Transform
  nameWithType: Transform
  fullName: Elements.Geometry.Transform
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Transform.ToString*
  commentId: Overload:Elements.Geometry.Transform.ToString
  name: ToString
  nameWithType: Transform.ToString
  fullName: Elements.Geometry.Transform.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Elements.Geometry.Transform.OfPoint*
  commentId: Overload:Elements.Geometry.Transform.OfPoint
  name: OfPoint
  nameWithType: Transform.OfPoint
  fullName: Elements.Geometry.Transform.OfPoint
- uid: Elements.Geometry.Transform.OfVector*
  commentId: Overload:Elements.Geometry.Transform.OfVector
  name: OfVector
  nameWithType: Transform.OfVector
  fullName: Elements.Geometry.Transform.OfVector
- uid: Elements.Geometry.Transform.OfPolygon*
  commentId: Overload:Elements.Geometry.Transform.OfPolygon
  name: OfPolygon
  nameWithType: Transform.OfPolygon
  fullName: Elements.Geometry.Transform.OfPolygon
- uid: Elements.Geometry.Polygon
  commentId: T:Elements.Geometry.Polygon
  parent: Elements.Geometry
  name: Polygon
  nameWithType: Polygon
  fullName: Elements.Geometry.Polygon
- uid: Elements.Geometry.Transform.OfPolygons*
  commentId: Overload:Elements.Geometry.Transform.OfPolygons
  name: OfPolygons
  nameWithType: Transform.OfPolygons
  fullName: Elements.Geometry.Transform.OfPolygons
- uid: Elements.Geometry.Polygon[]
  isExternal: true
  name: Polygon[]
  nameWithType: Polygon[]
  fullName: Elements.Geometry.Polygon[]
  nameWithType.vb: Polygon()
  fullName.vb: Elements.Geometry.Polygon()
  name.vb: Polygon()
  spec.csharp:
  - uid: Elements.Geometry.Polygon
    name: Polygon
    nameWithType: Polygon
    fullName: Elements.Geometry.Polygon
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Elements.Geometry.Polygon
    name: Polygon
    nameWithType: Polygon
    fullName: Elements.Geometry.Polygon
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Elements.Geometry.Transform.OfLine*
  commentId: Overload:Elements.Geometry.Transform.OfLine
  name: OfLine
  nameWithType: Transform.OfLine
  fullName: Elements.Geometry.Transform.OfLine
- uid: Elements.Geometry.Line
  commentId: T:Elements.Geometry.Line
  parent: Elements.Geometry
  name: Line
  nameWithType: Line
  fullName: Elements.Geometry.Line
- uid: Elements.Geometry.Transform.OfPlane*
  commentId: Overload:Elements.Geometry.Transform.OfPlane
  name: OfPlane
  nameWithType: Transform.OfPlane
  fullName: Elements.Geometry.Transform.OfPlane
- uid: Elements.Geometry.Plane
  commentId: T:Elements.Geometry.Plane
  parent: Elements.Geometry
  name: Plane
  nameWithType: Plane
  fullName: Elements.Geometry.Plane
- uid: Elements.Geometry.Transform.OfProfile*
  commentId: Overload:Elements.Geometry.Transform.OfProfile
  name: OfProfile
  nameWithType: Transform.OfProfile
  fullName: Elements.Geometry.Transform.OfProfile
- uid: Elements.Geometry.Profile
  commentId: T:Elements.Geometry.Profile
  parent: Elements.Geometry
  name: Profile
  nameWithType: Profile
  fullName: Elements.Geometry.Profile
- uid: Elements.Geometry.Transform.Concatenate*
  commentId: Overload:Elements.Geometry.Transform.Concatenate
  name: Concatenate
  nameWithType: Transform.Concatenate
  fullName: Elements.Geometry.Transform.Concatenate
- uid: Elements.Geometry.Transform.Invert*
  commentId: Overload:Elements.Geometry.Transform.Invert
  name: Invert
  nameWithType: Transform.Invert
  fullName: Elements.Geometry.Transform.Invert
- uid: Elements.Geometry.Transform.Move*
  commentId: Overload:Elements.Geometry.Transform.Move
  name: Move
  nameWithType: Transform.Move
  fullName: Elements.Geometry.Transform.Move
- uid: Elements.Geometry.Transform.Rotate*
  commentId: Overload:Elements.Geometry.Transform.Rotate
  name: Rotate
  nameWithType: Transform.Rotate
  fullName: Elements.Geometry.Transform.Rotate
- uid: Elements.Geometry.Transform.Scale*
  commentId: Overload:Elements.Geometry.Transform.Scale
  name: Scale
  nameWithType: Transform.Scale
  fullName: Elements.Geometry.Transform.Scale
- uid: Elements.Geometry.Transform.XY*
  commentId: Overload:Elements.Geometry.Transform.XY
  name: XY
  nameWithType: Transform.XY
  fullName: Elements.Geometry.Transform.XY
- uid: Elements.Geometry.Transform.YZ*
  commentId: Overload:Elements.Geometry.Transform.YZ
  name: YZ
  nameWithType: Transform.YZ
  fullName: Elements.Geometry.Transform.YZ
- uid: Elements.Geometry.Transform.XZ*
  commentId: Overload:Elements.Geometry.Transform.XZ
  name: XZ
  nameWithType: Transform.XZ
  fullName: Elements.Geometry.Transform.XZ
