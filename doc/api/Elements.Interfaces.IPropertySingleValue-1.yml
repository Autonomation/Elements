### YamlMime:ManagedReference
items:
- uid: Elements.Interfaces.IPropertySingleValue`1
  commentId: T:Elements.Interfaces.IPropertySingleValue`1
  id: IPropertySingleValue`1
  parent: Elements.Interfaces
  children:
  - Elements.Interfaces.IPropertySingleValue`1.UnitType
  - Elements.Interfaces.IPropertySingleValue`1.Value
  langs:
  - csharp
  - vb
  name: IPropertySingleValue<TValue>
  nameWithType: IPropertySingleValue<TValue>
  fullName: Elements.Interfaces.IPropertySingleValue<TValue>
  type: Interface
  source:
    remote:
      path: src/Elements/Interfaces/IPropertySet.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: IPropertySingleValue
    path: ../src/Elements/Interfaces/IPropertySet.cs
    startLine: 14
  assemblies:
  - Hypar.Elements
  namespace: Elements.Interfaces
  syntax:
    content: 'public interface IPropertySingleValue<TValue> : IProperty'
    typeParameters:
    - id: TValue
    content.vb: >-
      Public Interface IPropertySingleValue(Of TValue)
          Inherits IProperty
  inheritedMembers:
  - Elements.Interfaces.IProperty.Description
  nameWithType.vb: IPropertySingleValue(Of TValue)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Elements.Interfaces.IPropertySingleValue(Of TValue)
  name.vb: IPropertySingleValue(Of TValue)
- uid: Elements.Interfaces.IPropertySingleValue`1.Value
  commentId: P:Elements.Interfaces.IPropertySingleValue`1.Value
  id: Value
  parent: Elements.Interfaces.IPropertySingleValue`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: IPropertySingleValue<TValue>.Value
  fullName: Elements.Interfaces.IPropertySingleValue<TValue>.Value
  type: Property
  source:
    remote:
      path: src/Elements/Interfaces/IPropertySet.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Value
    path: ../src/Elements/Interfaces/IPropertySet.cs
    startLine: 16
  assemblies:
  - Hypar.Elements
  namespace: Elements.Interfaces
  syntax:
    content: TValue Value { get; }
    parameters: []
    return:
      type: '{TValue}'
    content.vb: ReadOnly Property Value As TValue
  overload: Elements.Interfaces.IPropertySingleValue`1.Value*
  nameWithType.vb: IPropertySingleValue(Of TValue).Value
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Elements.Interfaces.IPropertySingleValue(Of TValue).Value
- uid: Elements.Interfaces.IPropertySingleValue`1.UnitType
  commentId: P:Elements.Interfaces.IPropertySingleValue`1.UnitType
  id: UnitType
  parent: Elements.Interfaces.IPropertySingleValue`1
  langs:
  - csharp
  - vb
  name: UnitType
  nameWithType: IPropertySingleValue<TValue>.UnitType
  fullName: Elements.Interfaces.IPropertySingleValue<TValue>.UnitType
  type: Property
  source:
    remote:
      path: src/Elements/Interfaces/IPropertySet.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: UnitType
    path: ../src/Elements/Interfaces/IPropertySet.cs
    startLine: 17
  assemblies:
  - Hypar.Elements
  namespace: Elements.Interfaces
  syntax:
    content: UnitType UnitType { get; }
    parameters: []
    return:
      type: Elements.UnitType
    content.vb: ReadOnly Property UnitType As UnitType
  overload: Elements.Interfaces.IPropertySingleValue`1.UnitType*
  nameWithType.vb: IPropertySingleValue(Of TValue).UnitType
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Elements.Interfaces.IPropertySingleValue(Of TValue).UnitType
references:
- uid: Elements.Interfaces
  commentId: N:Elements.Interfaces
  name: Elements.Interfaces
  nameWithType: Elements.Interfaces
  fullName: Elements.Interfaces
- uid: Elements.Interfaces.IProperty.Description
  commentId: P:Elements.Interfaces.IProperty.Description
  parent: Elements.Interfaces.IProperty
  name: Description
  nameWithType: IProperty.Description
  fullName: Elements.Interfaces.IProperty.Description
- uid: Elements.Interfaces.IProperty
  commentId: T:Elements.Interfaces.IProperty
  parent: Elements.Interfaces
  name: IProperty
  nameWithType: IProperty
  fullName: Elements.Interfaces.IProperty
- uid: Elements.Interfaces.IPropertySingleValue`1.Value*
  commentId: Overload:Elements.Interfaces.IPropertySingleValue`1.Value
  name: Value
  nameWithType: IPropertySingleValue<TValue>.Value
  fullName: Elements.Interfaces.IPropertySingleValue<TValue>.Value
  nameWithType.vb: IPropertySingleValue(Of TValue).Value
  fullName.vb: Elements.Interfaces.IPropertySingleValue(Of TValue).Value
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TValue
  commentId: '!:TValue'
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: Elements.Interfaces.IPropertySingleValue`1.UnitType*
  commentId: Overload:Elements.Interfaces.IPropertySingleValue`1.UnitType
  name: UnitType
  nameWithType: IPropertySingleValue<TValue>.UnitType
  fullName: Elements.Interfaces.IPropertySingleValue<TValue>.UnitType
  nameWithType.vb: IPropertySingleValue(Of TValue).UnitType
  fullName.vb: Elements.Interfaces.IPropertySingleValue(Of TValue).UnitType
- uid: Elements.UnitType
  commentId: T:Elements.UnitType
  parent: Elements
  name: UnitType
  nameWithType: UnitType
  fullName: Elements.UnitType
- uid: Elements
  commentId: N:Elements
  name: Elements
  nameWithType: Elements
  fullName: Elements
