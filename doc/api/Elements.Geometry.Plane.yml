### YamlMime:ManagedReference
items:
- uid: Elements.Geometry.Plane
  commentId: T:Elements.Geometry.Plane
  id: Plane
  parent: Elements.Geometry
  children:
  - Elements.Geometry.Plane.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  - Elements.Geometry.Plane.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  - Elements.Geometry.Plane.#ctor(Elements.Geometry.Vector3,System.Collections.Generic.IList{Elements.Geometry.Vector3})
  - Elements.Geometry.Plane.Normal
  - Elements.Geometry.Plane.Origin
  langs:
  - csharp
  - vb
  name: Plane
  nameWithType: Plane
  fullName: Elements.Geometry.Plane
  type: Class
  source:
    remote:
      path: src/Elements/Geometry/Plane.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Plane
    path: ../src/Elements/Geometry/Plane.cs
    startLine: 9
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nA cartesian plane.\n"
  example: []
  syntax:
    content: public class Plane
    content.vb: Public Class Plane
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Elements.Geometry.Plane.Origin
  commentId: P:Elements.Geometry.Plane.Origin
  id: Origin
  parent: Elements.Geometry.Plane
  langs:
  - csharp
  - vb
  name: Origin
  nameWithType: Plane.Origin
  fullName: Elements.Geometry.Plane.Origin
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Plane.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Origin
    path: ../src/Elements/Geometry/Plane.cs
    startLine: 14
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe origin of the plane.\n"
  example: []
  syntax:
    content: public Vector3 Origin { get; }
    parameters: []
    return:
      type: Elements.Geometry.Vector3
    content.vb: Public ReadOnly Property Origin As Vector3
  overload: Elements.Geometry.Plane.Origin*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Geometry.Plane.Normal
  commentId: P:Elements.Geometry.Plane.Normal
  id: Normal
  parent: Elements.Geometry.Plane
  langs:
  - csharp
  - vb
  name: Normal
  nameWithType: Plane.Normal
  fullName: Elements.Geometry.Plane.Normal
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Plane.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Normal
    path: ../src/Elements/Geometry/Plane.cs
    startLine: 19
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe normal of the plane.\n"
  example: []
  syntax:
    content: public Vector3 Normal { get; }
    parameters: []
    return:
      type: Elements.Geometry.Vector3
    content.vb: Public ReadOnly Property Normal As Vector3
  overload: Elements.Geometry.Plane.Normal*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Geometry.Plane.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Plane.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  id: '#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3)'
  parent: Elements.Geometry.Plane
  langs:
  - csharp
  - vb
  name: Plane(Vector3, Vector3)
  nameWithType: Plane.Plane(Vector3, Vector3)
  fullName: Elements.Geometry.Plane.Plane(Elements.Geometry.Vector3, Elements.Geometry.Vector3)
  type: Constructor
  source:
    remote:
      path: src/Elements/Geometry/Plane.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Geometry/Plane.cs
    startLine: 26
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConstruct a plane.\n"
  example: []
  syntax:
    content: >-
      [JsonConstructor]

      public Plane(Vector3 origin, Vector3 normal)
    parameters:
    - id: origin
      type: Elements.Geometry.Vector3
      description: The origin of the plane.
    - id: normal
      type: Elements.Geometry.Vector3
      description: The normal of the plane.
    content.vb: >-
      <JsonConstructor>

      Public Sub New(origin As Vector3, normal As Vector3)
  overload: Elements.Geometry.Plane.#ctor*
  attributes:
  - type: Newtonsoft.Json.JsonConstructorAttribute
    ctor: Newtonsoft.Json.JsonConstructorAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Plane.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Plane.#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  id: '#ctor(Elements.Geometry.Vector3,Elements.Geometry.Vector3,Elements.Geometry.Vector3)'
  parent: Elements.Geometry.Plane
  langs:
  - csharp
  - vb
  name: Plane(Vector3, Vector3, Vector3)
  nameWithType: Plane.Plane(Vector3, Vector3, Vector3)
  fullName: Elements.Geometry.Plane.Plane(Elements.Geometry.Vector3, Elements.Geometry.Vector3, Elements.Geometry.Vector3)
  type: Constructor
  source:
    remote:
      path: src/Elements/Geometry/Plane.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Geometry/Plane.cs
    startLine: 41
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConstruct a plane by three points.\nThe plane is constructed as a->b * b->c.\n"
  example: []
  syntax:
    content: public Plane(Vector3 a, Vector3 b, Vector3 c)
    parameters:
    - id: a
      type: Elements.Geometry.Vector3
      description: ''
    - id: b
      type: Elements.Geometry.Vector3
      description: ''
    - id: c
      type: Elements.Geometry.Vector3
      description: ''
    content.vb: Public Sub New(a As Vector3, b As Vector3, c As Vector3)
  overload: Elements.Geometry.Plane.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Thrown when any of a, b, or c are null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Plane.#ctor(Elements.Geometry.Vector3,System.Collections.Generic.IList{Elements.Geometry.Vector3})
  commentId: M:Elements.Geometry.Plane.#ctor(Elements.Geometry.Vector3,System.Collections.Generic.IList{Elements.Geometry.Vector3})
  id: '#ctor(Elements.Geometry.Vector3,System.Collections.Generic.IList{Elements.Geometry.Vector3})'
  parent: Elements.Geometry.Plane
  langs:
  - csharp
  - vb
  name: Plane(Vector3, IList<Vector3>)
  nameWithType: Plane.Plane(Vector3, IList<Vector3>)
  fullName: Elements.Geometry.Plane.Plane(Elements.Geometry.Vector3, System.Collections.Generic.IList<Elements.Geometry.Vector3>)
  type: Constructor
  source:
    remote:
      path: src/Elements/Geometry/Plane.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Geometry/Plane.cs
    startLine: 62
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConstruct a plane.\nOnly the first three points of the points array will be used.\n"
  example: []
  syntax:
    content: public Plane(Vector3 origin, IList<Vector3> points)
    parameters:
    - id: origin
      type: Elements.Geometry.Vector3
      description: The origin of the plane.
    - id: points
      type: System.Collections.Generic.IList{Elements.Geometry.Vector3}
      description: An array of vectors to be used to determine the normal of the plane.
    content.vb: Public Sub New(origin As Vector3, points As IList(Of Vector3))
  overload: Elements.Geometry.Plane.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when less than three points are provided.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when coincident points are provided.
  nameWithType.vb: Plane.Plane(Vector3, IList(Of Vector3))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Elements.Geometry.Plane.Plane(Elements.Geometry.Vector3, System.Collections.Generic.IList(Of Elements.Geometry.Vector3))
  name.vb: Plane(Vector3, IList(Of Vector3))
references:
- uid: Elements.Geometry
  commentId: N:Elements.Geometry
  name: Elements.Geometry
  nameWithType: Elements.Geometry
  fullName: Elements.Geometry
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Elements.Geometry.Plane.Origin*
  commentId: Overload:Elements.Geometry.Plane.Origin
  name: Origin
  nameWithType: Plane.Origin
  fullName: Elements.Geometry.Plane.Origin
- uid: Elements.Geometry.Vector3
  commentId: T:Elements.Geometry.Vector3
  parent: Elements.Geometry
  name: Vector3
  nameWithType: Vector3
  fullName: Elements.Geometry.Vector3
- uid: Elements.Geometry.Plane.Normal*
  commentId: Overload:Elements.Geometry.Plane.Normal
  name: Normal
  nameWithType: Plane.Normal
  fullName: Elements.Geometry.Plane.Normal
- uid: Elements.Geometry.Plane.#ctor*
  commentId: Overload:Elements.Geometry.Plane.#ctor
  name: Plane
  nameWithType: Plane.Plane
  fullName: Elements.Geometry.Plane.Plane
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: System.Collections.Generic.IList{Elements.Geometry.Vector3}
  commentId: T:System.Collections.Generic.IList{Elements.Geometry.Vector3}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Vector3>
  nameWithType: IList<Vector3>
  fullName: System.Collections.Generic.IList<Elements.Geometry.Vector3>
  nameWithType.vb: IList(Of Vector3)
  fullName.vb: System.Collections.Generic.IList(Of Elements.Geometry.Vector3)
  name.vb: IList(Of Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Elements.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Elements.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Elements.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Elements.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
