### YamlMime:ManagedReference
items:
- uid: Elements.Geometry.Polyline
  commentId: T:Elements.Geometry.Polyline
  id: Polyline
  parent: Elements.Geometry
  children:
  - Elements.Geometry.Polyline.#ctor(Elements.Geometry.Vector3[])
  - Elements.Geometry.Polyline._vertices
  - Elements.Geometry.Polyline.Bounds
  - Elements.Geometry.Polyline.End
  - Elements.Geometry.Polyline.Frames(System.Double,System.Double)
  - Elements.Geometry.Polyline.Length
  - Elements.Geometry.Polyline.PointAt(System.Double)
  - Elements.Geometry.Polyline.Reversed
  - Elements.Geometry.Polyline.Segments
  - Elements.Geometry.Polyline.Start
  - Elements.Geometry.Polyline.ToString
  - Elements.Geometry.Polyline.TransformAt(System.Double)
  - Elements.Geometry.Polyline.Type
  - Elements.Geometry.Polyline.Vertices
  langs:
  - csharp
  - vb
  name: Polyline
  nameWithType: Polyline
  fullName: Elements.Geometry.Polyline
  type: Class
  source:
    remote:
      path: src/Elements/Geometry/Polyline.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Polyline
    path: ../src/Elements/Geometry/Polyline.cs
    startLine: 11
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nA coplanar continuous set of lines.\n"
  example: []
  syntax:
    content: 'public class Polyline : ICurve'
    content.vb: >-
      Public Class Polyline
          Implements ICurve
  inheritance:
  - System.Object
  derivedClasses:
  - Elements.Geometry.Polygon
  implements:
  - Elements.Geometry.Interfaces.ICurve
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Elements.Geometry.Polyline.Type
  commentId: P:Elements.Geometry.Polyline.Type
  id: Type
  parent: Elements.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: Polyline.Type
  fullName: Elements.Geometry.Polyline.Type
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Polyline.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Type
    path: ../src/Elements/Geometry/Polyline.cs
    startLine: 17
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe type of the curve.\nUsed during deserialization to disambiguate derived types.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(Order = -100)]

      public string Type { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <JsonProperty(Order:=-100)>

      Public ReadOnly Property Type As String
  overload: Elements.Geometry.Polyline.Type*
  implements:
  - Elements.Geometry.Interfaces.ICurve.Type
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Order
      type: System.Int32
      value: -100
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Geometry.Polyline._vertices
  commentId: F:Elements.Geometry.Polyline._vertices
  id: _vertices
  parent: Elements.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: _vertices
  nameWithType: Polyline._vertices
  fullName: Elements.Geometry.Polyline._vertices
  type: Field
  source:
    remote:
      path: src/Elements/Geometry/Polyline.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: _vertices
    path: ../src/Elements/Geometry/Polyline.cs
    startLine: 26
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe internal collection of vertices.\n"
  example: []
  syntax:
    content: protected Vector3[] _vertices
    return:
      type: Elements.Geometry.Vector3[]
    content.vb: Protected _vertices As Vector3()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Elements.Geometry.Polyline.Vertices
  commentId: P:Elements.Geometry.Polyline.Vertices
  id: Vertices
  parent: Elements.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: Vertices
  nameWithType: Polyline.Vertices
  fullName: Elements.Geometry.Polyline.Vertices
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Polyline.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Vertices
    path: ../src/Elements/Geometry/Polyline.cs
    startLine: 31
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe vertices of the polygon.\n"
  example: []
  syntax:
    content: public Vector3[] Vertices { get; }
    parameters: []
    return:
      type: Elements.Geometry.Vector3[]
    content.vb: Public ReadOnly Property Vertices As Vector3()
  overload: Elements.Geometry.Polyline.Vertices*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Geometry.Polyline.Length
  commentId: M:Elements.Geometry.Polyline.Length
  id: Length
  parent: Elements.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: Length()
  nameWithType: Polyline.Length()
  fullName: Elements.Geometry.Polyline.Length()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polyline.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Length
    path: ../src/Elements/Geometry/Polyline.cs
    startLine: 39
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCalculate the length of the polygon.\n"
  example: []
  syntax:
    content: public virtual double Length()
    return:
      type: System.Double
    content.vb: Public Overridable Function Length As Double
  overload: Elements.Geometry.Polyline.Length*
  implements:
  - Elements.Geometry.Interfaces.ICurve.Length
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Elements.Geometry.Polyline.Start
  commentId: P:Elements.Geometry.Polyline.Start
  id: Start
  parent: Elements.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: Start
  nameWithType: Polyline.Start
  fullName: Elements.Geometry.Polyline.Start
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Polyline.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Start
    path: ../src/Elements/Geometry/Polyline.cs
    startLine: 52
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe start of the polyline.\n"
  example: []
  syntax:
    content: >-
      [JsonIgnore]

      public Vector3 Start { get; }
    parameters: []
    return:
      type: Elements.Geometry.Vector3
    content.vb: >-
      <JsonIgnore>

      Public ReadOnly Property Start As Vector3
  overload: Elements.Geometry.Polyline.Start*
  implements:
  - Elements.Geometry.Interfaces.ICurve.Start
  attributes:
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Geometry.Polyline.End
  commentId: P:Elements.Geometry.Polyline.End
  id: End
  parent: Elements.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: End
  nameWithType: Polyline.End
  fullName: Elements.Geometry.Polyline.End
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Polyline.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: End
    path: ../src/Elements/Geometry/Polyline.cs
    startLine: 61
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe end of the polyline.\n"
  example: []
  syntax:
    content: >-
      [JsonIgnore]

      public Vector3 End { get; }
    parameters: []
    return:
      type: Elements.Geometry.Vector3
    content.vb: >-
      <JsonIgnore>

      Public ReadOnly Property End As Vector3
  overload: Elements.Geometry.Polyline.End*
  implements:
  - Elements.Geometry.Interfaces.ICurve.End
  attributes:
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Geometry.Polyline.#ctor(Elements.Geometry.Vector3[])
  commentId: M:Elements.Geometry.Polyline.#ctor(Elements.Geometry.Vector3[])
  id: '#ctor(Elements.Geometry.Vector3[])'
  parent: Elements.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: Polyline(Vector3[])
  nameWithType: Polyline.Polyline(Vector3[])
  fullName: Elements.Geometry.Polyline.Polyline(Elements.Geometry.Vector3[])
  type: Constructor
  source:
    remote:
      path: src/Elements/Geometry/Polyline.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Geometry/Polyline.cs
    startLine: 71
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConstruct a polyline from a collection of vertices.\n"
  example: []
  syntax:
    content: public Polyline(Vector3[] vertices)
    parameters:
    - id: vertices
      type: Elements.Geometry.Vector3[]
      description: A CCW wound set of vertices.
    content.vb: Public Sub New(vertices As Vector3())
  overload: Elements.Geometry.Polyline.#ctor*
  nameWithType.vb: Polyline.Polyline(Vector3())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Elements.Geometry.Polyline.Polyline(Elements.Geometry.Vector3())
  name.vb: Polyline(Vector3())
- uid: Elements.Geometry.Polyline.Reversed
  commentId: M:Elements.Geometry.Polyline.Reversed
  id: Reversed
  parent: Elements.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: Reversed()
  nameWithType: Polyline.Reversed()
  fullName: Elements.Geometry.Polyline.Reversed()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polyline.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Reversed
    path: ../src/Elements/Geometry/Polyline.cs
    startLine: 94
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nReverse the direction of a polyline.\n"
  example: []
  syntax:
    content: public ICurve Reversed()
    return:
      type: Elements.Geometry.Interfaces.ICurve
      description: Returns a new polyline with opposite winding.
    content.vb: Public Function Reversed As ICurve
  overload: Elements.Geometry.Polyline.Reversed*
  implements:
  - Elements.Geometry.Interfaces.ICurve.Reversed
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Polyline.ToString
  commentId: M:Elements.Geometry.Polyline.ToString
  id: ToString
  parent: Elements.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Polyline.ToString()
  fullName: Elements.Geometry.Polyline.ToString()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polyline.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: ToString
    path: ../src/Elements/Geometry/Polyline.cs
    startLine: 106
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nGet a string representation of this polyline.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: ''
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Elements.Geometry.Polyline.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Elements.Geometry.Polyline.Segments
  commentId: M:Elements.Geometry.Polyline.Segments
  id: Segments
  parent: Elements.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: Segments()
  nameWithType: Polyline.Segments()
  fullName: Elements.Geometry.Polyline.Segments()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polyline.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Segments
    path: ../src/Elements/Geometry/Polyline.cs
    startLine: 115
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nGet a collection a lines representing each segment of this polyline.\n"
  example: []
  syntax:
    content: public virtual Line[] Segments()
    return:
      type: Elements.Geometry.Line[]
      description: A collection of Lines.
    content.vb: Public Overridable Function Segments As Line()
  overload: Elements.Geometry.Polyline.Segments*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Elements.Geometry.Polyline.PointAt(System.Double)
  commentId: M:Elements.Geometry.Polyline.PointAt(System.Double)
  id: PointAt(System.Double)
  parent: Elements.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: PointAt(Double)
  nameWithType: Polyline.PointAt(Double)
  fullName: Elements.Geometry.Polyline.PointAt(System.Double)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polyline.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: PointAt
    path: ../src/Elements/Geometry/Polyline.cs
    startLine: 133
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nGet a point on the polygon at parameter u.\n"
  example: []
  syntax:
    content: public Vector3 PointAt(double u)
    parameters:
    - id: u
      type: System.Double
      description: A value between 0.0 and 1.0.
    return:
      type: Elements.Geometry.Vector3
      description: Returns a Vector3 indicating a point along the Polygon length from its start vertex.
    content.vb: Public Function PointAt(u As Double) As Vector3
  overload: Elements.Geometry.Polyline.PointAt*
  implements:
  - Elements.Geometry.Interfaces.ICurve.PointAt(System.Double)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Polyline.TransformAt(System.Double)
  commentId: M:Elements.Geometry.Polyline.TransformAt(System.Double)
  id: TransformAt(System.Double)
  parent: Elements.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: TransformAt(Double)
  nameWithType: Polyline.TransformAt(Double)
  fullName: Elements.Geometry.Polyline.TransformAt(System.Double)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polyline.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: TransformAt
    path: ../src/Elements/Geometry/Polyline.cs
    startLine: 177
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nGet the Transform at the specified parameter along the Polygon.\n"
  example: []
  syntax:
    content: public Transform TransformAt(double u)
    parameters:
    - id: u
      type: System.Double
      description: The parameter on the Polygon between 0.0 and 1.0.
    return:
      type: Elements.Geometry.Transform
      description: A Transform with its Z axis aligned trangent to the Polygon.
    content.vb: Public Function TransformAt(u As Double) As Transform
  overload: Elements.Geometry.Polyline.TransformAt*
  implements:
  - Elements.Geometry.Interfaces.ICurve.TransformAt(System.Double)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Polyline.Frames(System.Double,System.Double)
  commentId: M:Elements.Geometry.Polyline.Frames(System.Double,System.Double)
  id: Frames(System.Double,System.Double)
  parent: Elements.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: Frames(Double, Double)
  nameWithType: Polyline.Frames(Double, Double)
  fullName: Elements.Geometry.Polyline.Frames(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polyline.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Frames
    path: ../src/Elements/Geometry/Polyline.cs
    startLine: 240
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nGet the transforms used to transform a Profile extruded along this Polyline.\n"
  example: []
  syntax:
    content: public virtual Transform[] Frames(double startSetback, double endSetback)
    parameters:
    - id: startSetback
      type: System.Double
      description: ''
    - id: endSetback
      type: System.Double
      description: ''
    return:
      type: Elements.Geometry.Transform[]
      description: ''
    content.vb: Public Overridable Function Frames(startSetback As Double, endSetback As Double) As Transform()
  overload: Elements.Geometry.Polyline.Frames*
  implements:
  - Elements.Geometry.Interfaces.ICurve.Frames(System.Double,System.Double)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Elements.Geometry.Polyline.Bounds
  commentId: M:Elements.Geometry.Polyline.Bounds
  id: Bounds
  parent: Elements.Geometry.Polyline
  langs:
  - csharp
  - vb
  name: Bounds()
  nameWithType: Polyline.Bounds()
  fullName: Elements.Geometry.Polyline.Bounds()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polyline.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Bounds
    path: ../src/Elements/Geometry/Polyline.cs
    startLine: 248
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nGet the bounding box for this curve.\n"
  example: []
  syntax:
    content: public BBox3 Bounds()
    return:
      type: Elements.Geometry.BBox3
    content.vb: Public Function Bounds As BBox3
  overload: Elements.Geometry.Polyline.Bounds*
  implements:
  - Elements.Geometry.Interfaces.ICurve.Bounds
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Elements.Geometry
  commentId: N:Elements.Geometry
  name: Elements.Geometry
  nameWithType: Elements.Geometry
  fullName: Elements.Geometry
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Elements.Geometry.Interfaces.ICurve
  commentId: T:Elements.Geometry.Interfaces.ICurve
  parent: Elements.Geometry.Interfaces
  name: ICurve
  nameWithType: ICurve
  fullName: Elements.Geometry.Interfaces.ICurve
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Elements.Geometry.Interfaces
  commentId: N:Elements.Geometry.Interfaces
  name: Elements.Geometry.Interfaces
  nameWithType: Elements.Geometry.Interfaces
  fullName: Elements.Geometry.Interfaces
- uid: Elements.Geometry.Polyline.Type*
  commentId: Overload:Elements.Geometry.Polyline.Type
  name: Type
  nameWithType: Polyline.Type
  fullName: Elements.Geometry.Polyline.Type
- uid: Elements.Geometry.Interfaces.ICurve.Type
  commentId: P:Elements.Geometry.Interfaces.ICurve.Type
  parent: Elements.Geometry.Interfaces.ICurve
  name: Type
  nameWithType: ICurve.Type
  fullName: Elements.Geometry.Interfaces.ICurve.Type
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Elements.Geometry.Vector3[]
  isExternal: true
  name: Vector3[]
  nameWithType: Vector3[]
  fullName: Elements.Geometry.Vector3[]
  nameWithType.vb: Vector3()
  fullName.vb: Elements.Geometry.Vector3()
  name.vb: Vector3()
  spec.csharp:
  - uid: Elements.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Elements.Geometry.Vector3
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Elements.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Elements.Geometry.Vector3
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Elements.Geometry.Polyline.Vertices*
  commentId: Overload:Elements.Geometry.Polyline.Vertices
  name: Vertices
  nameWithType: Polyline.Vertices
  fullName: Elements.Geometry.Polyline.Vertices
- uid: Elements.Geometry.Polyline.Length*
  commentId: Overload:Elements.Geometry.Polyline.Length
  name: Length
  nameWithType: Polyline.Length
  fullName: Elements.Geometry.Polyline.Length
- uid: Elements.Geometry.Interfaces.ICurve.Length
  commentId: M:Elements.Geometry.Interfaces.ICurve.Length
  parent: Elements.Geometry.Interfaces.ICurve
  name: Length()
  nameWithType: ICurve.Length()
  fullName: Elements.Geometry.Interfaces.ICurve.Length()
  spec.csharp:
  - uid: Elements.Geometry.Interfaces.ICurve.Length
    name: Length
    nameWithType: ICurve.Length
    fullName: Elements.Geometry.Interfaces.ICurve.Length
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Geometry.Interfaces.ICurve.Length
    name: Length
    nameWithType: ICurve.Length
    fullName: Elements.Geometry.Interfaces.ICurve.Length
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Elements.Geometry.Polyline.Start*
  commentId: Overload:Elements.Geometry.Polyline.Start
  name: Start
  nameWithType: Polyline.Start
  fullName: Elements.Geometry.Polyline.Start
- uid: Elements.Geometry.Interfaces.ICurve.Start
  commentId: P:Elements.Geometry.Interfaces.ICurve.Start
  parent: Elements.Geometry.Interfaces.ICurve
  name: Start
  nameWithType: ICurve.Start
  fullName: Elements.Geometry.Interfaces.ICurve.Start
- uid: Elements.Geometry.Vector3
  commentId: T:Elements.Geometry.Vector3
  parent: Elements.Geometry
  name: Vector3
  nameWithType: Vector3
  fullName: Elements.Geometry.Vector3
- uid: Elements.Geometry.Polyline.End*
  commentId: Overload:Elements.Geometry.Polyline.End
  name: End
  nameWithType: Polyline.End
  fullName: Elements.Geometry.Polyline.End
- uid: Elements.Geometry.Interfaces.ICurve.End
  commentId: P:Elements.Geometry.Interfaces.ICurve.End
  parent: Elements.Geometry.Interfaces.ICurve
  name: End
  nameWithType: ICurve.End
  fullName: Elements.Geometry.Interfaces.ICurve.End
- uid: Elements.Geometry.Polyline.#ctor*
  commentId: Overload:Elements.Geometry.Polyline.#ctor
  name: Polyline
  nameWithType: Polyline.Polyline
  fullName: Elements.Geometry.Polyline.Polyline
- uid: Elements.Geometry.Polyline.Reversed*
  commentId: Overload:Elements.Geometry.Polyline.Reversed
  name: Reversed
  nameWithType: Polyline.Reversed
  fullName: Elements.Geometry.Polyline.Reversed
- uid: Elements.Geometry.Interfaces.ICurve.Reversed
  commentId: M:Elements.Geometry.Interfaces.ICurve.Reversed
  parent: Elements.Geometry.Interfaces.ICurve
  name: Reversed()
  nameWithType: ICurve.Reversed()
  fullName: Elements.Geometry.Interfaces.ICurve.Reversed()
  spec.csharp:
  - uid: Elements.Geometry.Interfaces.ICurve.Reversed
    name: Reversed
    nameWithType: ICurve.Reversed
    fullName: Elements.Geometry.Interfaces.ICurve.Reversed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Geometry.Interfaces.ICurve.Reversed
    name: Reversed
    nameWithType: ICurve.Reversed
    fullName: Elements.Geometry.Interfaces.ICurve.Reversed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Polyline.ToString*
  commentId: Overload:Elements.Geometry.Polyline.ToString
  name: ToString
  nameWithType: Polyline.ToString
  fullName: Elements.Geometry.Polyline.ToString
- uid: Elements.Geometry.Polyline.Segments*
  commentId: Overload:Elements.Geometry.Polyline.Segments
  name: Segments
  nameWithType: Polyline.Segments
  fullName: Elements.Geometry.Polyline.Segments
- uid: Elements.Geometry.Line[]
  isExternal: true
  name: Line[]
  nameWithType: Line[]
  fullName: Elements.Geometry.Line[]
  nameWithType.vb: Line()
  fullName.vb: Elements.Geometry.Line()
  name.vb: Line()
  spec.csharp:
  - uid: Elements.Geometry.Line
    name: Line
    nameWithType: Line
    fullName: Elements.Geometry.Line
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Elements.Geometry.Line
    name: Line
    nameWithType: Line
    fullName: Elements.Geometry.Line
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Elements.Geometry.Polyline.PointAt*
  commentId: Overload:Elements.Geometry.Polyline.PointAt
  name: PointAt
  nameWithType: Polyline.PointAt
  fullName: Elements.Geometry.Polyline.PointAt
- uid: Elements.Geometry.Interfaces.ICurve.PointAt(System.Double)
  commentId: M:Elements.Geometry.Interfaces.ICurve.PointAt(System.Double)
  parent: Elements.Geometry.Interfaces.ICurve
  isExternal: true
  name: PointAt(Double)
  nameWithType: ICurve.PointAt(Double)
  fullName: Elements.Geometry.Interfaces.ICurve.PointAt(System.Double)
  spec.csharp:
  - uid: Elements.Geometry.Interfaces.ICurve.PointAt(System.Double)
    name: PointAt
    nameWithType: ICurve.PointAt
    fullName: Elements.Geometry.Interfaces.ICurve.PointAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Geometry.Interfaces.ICurve.PointAt(System.Double)
    name: PointAt
    nameWithType: ICurve.PointAt
    fullName: Elements.Geometry.Interfaces.ICurve.PointAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Polyline.TransformAt*
  commentId: Overload:Elements.Geometry.Polyline.TransformAt
  name: TransformAt
  nameWithType: Polyline.TransformAt
  fullName: Elements.Geometry.Polyline.TransformAt
- uid: Elements.Geometry.Interfaces.ICurve.TransformAt(System.Double)
  commentId: M:Elements.Geometry.Interfaces.ICurve.TransformAt(System.Double)
  parent: Elements.Geometry.Interfaces.ICurve
  isExternal: true
  name: TransformAt(Double)
  nameWithType: ICurve.TransformAt(Double)
  fullName: Elements.Geometry.Interfaces.ICurve.TransformAt(System.Double)
  spec.csharp:
  - uid: Elements.Geometry.Interfaces.ICurve.TransformAt(System.Double)
    name: TransformAt
    nameWithType: ICurve.TransformAt
    fullName: Elements.Geometry.Interfaces.ICurve.TransformAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Geometry.Interfaces.ICurve.TransformAt(System.Double)
    name: TransformAt
    nameWithType: ICurve.TransformAt
    fullName: Elements.Geometry.Interfaces.ICurve.TransformAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Transform
  commentId: T:Elements.Geometry.Transform
  parent: Elements.Geometry
  name: Transform
  nameWithType: Transform
  fullName: Elements.Geometry.Transform
- uid: Elements.Geometry.Polyline.Frames*
  commentId: Overload:Elements.Geometry.Polyline.Frames
  name: Frames
  nameWithType: Polyline.Frames
  fullName: Elements.Geometry.Polyline.Frames
- uid: Elements.Geometry.Interfaces.ICurve.Frames(System.Double,System.Double)
  commentId: M:Elements.Geometry.Interfaces.ICurve.Frames(System.Double,System.Double)
  parent: Elements.Geometry.Interfaces.ICurve
  isExternal: true
  name: Frames(Double, Double)
  nameWithType: ICurve.Frames(Double, Double)
  fullName: Elements.Geometry.Interfaces.ICurve.Frames(System.Double, System.Double)
  spec.csharp:
  - uid: Elements.Geometry.Interfaces.ICurve.Frames(System.Double,System.Double)
    name: Frames
    nameWithType: ICurve.Frames
    fullName: Elements.Geometry.Interfaces.ICurve.Frames
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Geometry.Interfaces.ICurve.Frames(System.Double,System.Double)
    name: Frames
    nameWithType: ICurve.Frames
    fullName: Elements.Geometry.Interfaces.ICurve.Frames
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Transform[]
  isExternal: true
  name: Transform[]
  nameWithType: Transform[]
  fullName: Elements.Geometry.Transform[]
  nameWithType.vb: Transform()
  fullName.vb: Elements.Geometry.Transform()
  name.vb: Transform()
  spec.csharp:
  - uid: Elements.Geometry.Transform
    name: Transform
    nameWithType: Transform
    fullName: Elements.Geometry.Transform
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Elements.Geometry.Transform
    name: Transform
    nameWithType: Transform
    fullName: Elements.Geometry.Transform
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Elements.Geometry.Polyline.Bounds*
  commentId: Overload:Elements.Geometry.Polyline.Bounds
  name: Bounds
  nameWithType: Polyline.Bounds
  fullName: Elements.Geometry.Polyline.Bounds
- uid: Elements.Geometry.Interfaces.ICurve.Bounds
  commentId: M:Elements.Geometry.Interfaces.ICurve.Bounds
  parent: Elements.Geometry.Interfaces.ICurve
  name: Bounds()
  nameWithType: ICurve.Bounds()
  fullName: Elements.Geometry.Interfaces.ICurve.Bounds()
  spec.csharp:
  - uid: Elements.Geometry.Interfaces.ICurve.Bounds
    name: Bounds
    nameWithType: ICurve.Bounds
    fullName: Elements.Geometry.Interfaces.ICurve.Bounds
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Geometry.Interfaces.ICurve.Bounds
    name: Bounds
    nameWithType: ICurve.Bounds
    fullName: Elements.Geometry.Interfaces.ICurve.Bounds
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.BBox3
  commentId: T:Elements.Geometry.BBox3
  parent: Elements.Geometry
  name: BBox3
  nameWithType: BBox3
  fullName: Elements.Geometry.BBox3
