### YamlMime:ManagedReference
items:
- uid: Elements.StringProperty
  commentId: T:Elements.StringProperty
  id: StringProperty
  parent: Elements
  children:
  - Elements.StringProperty.#ctor(System.String,Elements.UnitType,System.String)
  - Elements.StringProperty.Description
  - Elements.StringProperty.UnitType
  - Elements.StringProperty.Value
  langs:
  - csharp
  - vb
  name: StringProperty
  nameWithType: StringProperty
  fullName: Elements.StringProperty
  type: Class
  source:
    remote:
      path: src/Elements/Property.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: StringProperty
    path: ../src/Elements/Property.cs
    startLine: 12
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nA property with a string value.\n"
  example: []
  syntax:
    content: 'public class StringProperty : IPropertySingleValue<string>, IProperty'
    content.vb: >-
      Public Class StringProperty
          Implements IPropertySingleValue(Of String), IProperty
  inheritance:
  - System.Object
  implements:
  - Elements.Interfaces.IPropertySingleValue{System.String}
  - Elements.Interfaces.IProperty
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Elements.StringProperty.Value
  commentId: P:Elements.StringProperty.Value
  id: Value
  parent: Elements.StringProperty
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: StringProperty.Value
  fullName: Elements.StringProperty.Value
  type: Property
  source:
    remote:
      path: src/Elements/Property.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Value
    path: ../src/Elements/Property.cs
    startLine: 17
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nThe value of the Property.\n"
  example: []
  syntax:
    content: public string Value { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Value As String
  overload: Elements.StringProperty.Value*
  implements:
  - Elements.Interfaces.IPropertySingleValue{System.String}.Value
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.StringProperty.UnitType
  commentId: P:Elements.StringProperty.UnitType
  id: UnitType
  parent: Elements.StringProperty
  langs:
  - csharp
  - vb
  name: UnitType
  nameWithType: StringProperty.UnitType
  fullName: Elements.StringProperty.UnitType
  type: Property
  source:
    remote:
      path: src/Elements/Property.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: UnitType
    path: ../src/Elements/Property.cs
    startLine: 22
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nThe UnitType of the Property.\n"
  example: []
  syntax:
    content: >-
      [JsonConverter(typeof(StringEnumConverter))]

      public UnitType UnitType { get; }
    parameters: []
    return:
      type: Elements.UnitType
    content.vb: >-
      <JsonConverter(GetType(StringEnumConverter))>

      Public ReadOnly Property UnitType As UnitType
  overload: Elements.StringProperty.UnitType*
  implements:
  - Elements.Interfaces.IPropertySingleValue{System.String}.UnitType
  attributes:
  - type: Newtonsoft.Json.JsonConverterAttribute
    ctor: Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: Newtonsoft.Json.Converters.StringEnumConverter
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.StringProperty.Description
  commentId: P:Elements.StringProperty.Description
  id: Description
  parent: Elements.StringProperty
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: StringProperty.Description
  fullName: Elements.StringProperty.Description
  type: Property
  source:
    remote:
      path: src/Elements/Property.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Description
    path: ../src/Elements/Property.cs
    startLine: 28
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nThe description of the Property.\n"
  example: []
  syntax:
    content: public string Description { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Description As String
  overload: Elements.StringProperty.Description*
  implements:
  - Elements.Interfaces.IProperty.Description
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.StringProperty.#ctor(System.String,Elements.UnitType,System.String)
  commentId: M:Elements.StringProperty.#ctor(System.String,Elements.UnitType,System.String)
  id: '#ctor(System.String,Elements.UnitType,System.String)'
  parent: Elements.StringProperty
  langs:
  - csharp
  - vb
  name: StringProperty(String, UnitType, String)
  nameWithType: StringProperty.StringProperty(String, UnitType, String)
  fullName: Elements.StringProperty.StringProperty(System.String, Elements.UnitType, System.String)
  type: Constructor
  source:
    remote:
      path: src/Elements/Property.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Property.cs
    startLine: 36
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nConstruct a Property.\n"
  example: []
  syntax:
    content: >-
      [JsonConstructor]

      public StringProperty(string value, UnitType unitType, string description = null)
    parameters:
    - id: value
      type: System.String
      description: The value of the Property.
    - id: unitType
      type: Elements.UnitType
      description: The unit type of the Property.
    - id: description
      type: System.String
      description: The description of the Property.
    content.vb: >-
      <JsonConstructor>

      Public Sub New(value As String, unitType As UnitType, description As String = Nothing)
  overload: Elements.StringProperty.#ctor*
  attributes:
  - type: Newtonsoft.Json.JsonConstructorAttribute
    ctor: Newtonsoft.Json.JsonConstructorAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Elements
  commentId: N:Elements
  name: Elements
  nameWithType: Elements
  fullName: Elements
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Elements.Interfaces.IPropertySingleValue{System.String}
  commentId: T:Elements.Interfaces.IPropertySingleValue{System.String}
  parent: Elements.Interfaces
  definition: Elements.Interfaces.IPropertySingleValue`1
  name: IPropertySingleValue<String>
  nameWithType: IPropertySingleValue<String>
  fullName: Elements.Interfaces.IPropertySingleValue<System.String>
  nameWithType.vb: IPropertySingleValue(Of String)
  fullName.vb: Elements.Interfaces.IPropertySingleValue(Of System.String)
  name.vb: IPropertySingleValue(Of String)
  spec.csharp:
  - uid: Elements.Interfaces.IPropertySingleValue`1
    name: IPropertySingleValue
    nameWithType: IPropertySingleValue
    fullName: Elements.Interfaces.IPropertySingleValue
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Elements.Interfaces.IPropertySingleValue`1
    name: IPropertySingleValue
    nameWithType: IPropertySingleValue
    fullName: Elements.Interfaces.IPropertySingleValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Interfaces.IProperty
  commentId: T:Elements.Interfaces.IProperty
  parent: Elements.Interfaces
  name: IProperty
  nameWithType: IProperty
  fullName: Elements.Interfaces.IProperty
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Elements.Interfaces.IPropertySingleValue`1
  commentId: T:Elements.Interfaces.IPropertySingleValue`1
  name: IPropertySingleValue<TValue>
  nameWithType: IPropertySingleValue<TValue>
  fullName: Elements.Interfaces.IPropertySingleValue<TValue>
  nameWithType.vb: IPropertySingleValue(Of TValue)
  fullName.vb: Elements.Interfaces.IPropertySingleValue(Of TValue)
  name.vb: IPropertySingleValue(Of TValue)
  spec.csharp:
  - uid: Elements.Interfaces.IPropertySingleValue`1
    name: IPropertySingleValue
    nameWithType: IPropertySingleValue
    fullName: Elements.Interfaces.IPropertySingleValue
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Elements.Interfaces.IPropertySingleValue`1
    name: IPropertySingleValue
    nameWithType: IPropertySingleValue
    fullName: Elements.Interfaces.IPropertySingleValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Interfaces
  commentId: N:Elements.Interfaces
  name: Elements.Interfaces
  nameWithType: Elements.Interfaces
  fullName: Elements.Interfaces
- uid: Elements.StringProperty.Value*
  commentId: Overload:Elements.StringProperty.Value
  name: Value
  nameWithType: StringProperty.Value
  fullName: Elements.StringProperty.Value
- uid: Elements.Interfaces.IPropertySingleValue{System.String}.Value
  commentId: P:Elements.Interfaces.IPropertySingleValue{System.String}.Value
  parent: Elements.Interfaces.IPropertySingleValue{System.String}
  definition: Elements.Interfaces.IPropertySingleValue`1.Value
  name: Value
  nameWithType: IPropertySingleValue<String>.Value
  fullName: Elements.Interfaces.IPropertySingleValue<System.String>.Value
  nameWithType.vb: IPropertySingleValue(Of String).Value
  fullName.vb: Elements.Interfaces.IPropertySingleValue(Of System.String).Value
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Elements.Interfaces.IPropertySingleValue`1.Value
  commentId: P:Elements.Interfaces.IPropertySingleValue`1.Value
  name: Value
  nameWithType: IPropertySingleValue<TValue>.Value
  fullName: Elements.Interfaces.IPropertySingleValue<TValue>.Value
  nameWithType.vb: IPropertySingleValue(Of TValue).Value
  fullName.vb: Elements.Interfaces.IPropertySingleValue(Of TValue).Value
- uid: Elements.StringProperty.UnitType*
  commentId: Overload:Elements.StringProperty.UnitType
  name: UnitType
  nameWithType: StringProperty.UnitType
  fullName: Elements.StringProperty.UnitType
- uid: Elements.Interfaces.IPropertySingleValue{System.String}.UnitType
  commentId: P:Elements.Interfaces.IPropertySingleValue{System.String}.UnitType
  parent: Elements.Interfaces.IPropertySingleValue{System.String}
  definition: Elements.Interfaces.IPropertySingleValue`1.UnitType
  name: UnitType
  nameWithType: IPropertySingleValue<String>.UnitType
  fullName: Elements.Interfaces.IPropertySingleValue<System.String>.UnitType
  nameWithType.vb: IPropertySingleValue(Of String).UnitType
  fullName.vb: Elements.Interfaces.IPropertySingleValue(Of System.String).UnitType
- uid: Elements.UnitType
  commentId: T:Elements.UnitType
  parent: Elements
  name: UnitType
  nameWithType: UnitType
  fullName: Elements.UnitType
- uid: Elements.Interfaces.IPropertySingleValue`1.UnitType
  commentId: P:Elements.Interfaces.IPropertySingleValue`1.UnitType
  name: UnitType
  nameWithType: IPropertySingleValue<TValue>.UnitType
  fullName: Elements.Interfaces.IPropertySingleValue<TValue>.UnitType
  nameWithType.vb: IPropertySingleValue(Of TValue).UnitType
  fullName.vb: Elements.Interfaces.IPropertySingleValue(Of TValue).UnitType
- uid: Elements.StringProperty.Description*
  commentId: Overload:Elements.StringProperty.Description
  name: Description
  nameWithType: StringProperty.Description
  fullName: Elements.StringProperty.Description
- uid: Elements.Interfaces.IProperty.Description
  commentId: P:Elements.Interfaces.IProperty.Description
  parent: Elements.Interfaces.IProperty
  name: Description
  nameWithType: IProperty.Description
  fullName: Elements.Interfaces.IProperty.Description
- uid: Elements.StringProperty.#ctor*
  commentId: Overload:Elements.StringProperty.#ctor
  name: StringProperty
  nameWithType: StringProperty.StringProperty
  fullName: Elements.StringProperty.StringProperty
