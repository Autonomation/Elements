### YamlMime:ManagedReference
items:
- uid: Elements.Wall
  commentId: T:Elements.Wall
  id: Wall
  parent: Elements
  children:
  - Elements.Wall.#ctor(Elements.Geometry.Polygon,Elements.WallType,System.Double,Elements.Geometry.Transform)
  - Elements.Wall.BothSides
  - Elements.Wall.ElementType
  - Elements.Wall.ExtrudeDepth
  - Elements.Wall.ExtrudeDirection
  - Elements.Wall.Geometry
  - Elements.Wall.Height
  - Elements.Wall.Profile
  - Elements.Wall.Thickness
  langs:
  - csharp
  - vb
  name: Wall
  nameWithType: Wall
  fullName: Elements.Wall
  type: Class
  source:
    remote:
      path: src/Elements/Wall.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Wall
    path: ../src/Elements/Wall.cs
    startLine: 12
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nA wall defined by a planar profile extruded to a height.\n"
  example: []
  syntax:
    content: 'public class Wall : Element, IElement, IIdentifiable, ITransformable, IPropertySet, IElementType<WallType>, ISolid, IExtrude, IProfile'
    content.vb: >-
      Public Class Wall
          Inherits Element
          Implements IElement, IIdentifiable, ITransformable, IPropertySet, IElementType(Of WallType), ISolid, IExtrude, IProfile
  inheritance:
  - System.Object
  - Elements.Element
  derivedClasses:
  - Elements.StandardWall
  implements:
  - Elements.Interfaces.IElement
  - Elements.Interfaces.IIdentifiable
  - Elements.Geometry.Interfaces.ITransformable
  - Elements.Interfaces.IPropertySet
  - Elements.Interfaces.IElementType{Elements.WallType}
  - Elements.Geometry.Interfaces.ISolid
  - Elements.Geometry.Interfaces.IExtrude
  - Elements.Geometry.Interfaces.IProfile
  inheritedMembers:
  - Elements.Element.Id
  - Elements.Element.Type
  - Elements.Element.Properties
  - Elements.Element.Transform
  - Elements.Element.Name
  - Elements.Element.AddProperty(System.String,Elements.Interfaces.IProperty)
  - Elements.Element.RemoveProperty(System.String)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Elements.Wall.Height
  commentId: P:Elements.Wall.Height
  id: Height
  parent: Elements.Wall
  langs:
  - csharp
  - vb
  name: Height
  nameWithType: Wall.Height
  fullName: Elements.Wall.Height
  type: Property
  source:
    remote:
      path: src/Elements/Wall.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Height
    path: ../src/Elements/Wall.cs
    startLine: 17
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nThe height of the wall.\n"
  example: []
  syntax:
    content: public double Height { get; protected set; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public Property Height As Double
  overload: Elements.Wall.Height*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Elements.Wall.ElementType
  commentId: P:Elements.Wall.ElementType
  id: ElementType
  parent: Elements.Wall
  langs:
  - csharp
  - vb
  name: ElementType
  nameWithType: Wall.ElementType
  fullName: Elements.Wall.ElementType
  type: Property
  source:
    remote:
      path: src/Elements/Wall.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: ElementType
    path: ../src/Elements/Wall.cs
    startLine: 22
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nThe WallType of the Wall.\n"
  example: []
  syntax:
    content: public WallType ElementType { get; protected set; }
    parameters: []
    return:
      type: Elements.WallType
    content.vb: Public Property ElementType As WallType
  overload: Elements.Wall.ElementType*
  implements:
  - Elements.Interfaces.IElementType{Elements.WallType}.ElementType
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Elements.Wall.Geometry
  commentId: P:Elements.Wall.Geometry
  id: Geometry
  parent: Elements.Wall
  langs:
  - csharp
  - vb
  name: Geometry
  nameWithType: Wall.Geometry
  fullName: Elements.Wall.Geometry
  type: Property
  source:
    remote:
      path: src/Elements/Wall.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Geometry
    path: ../src/Elements/Wall.cs
    startLine: 27
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nThe wall&apos;s geometry.\n"
  example: []
  syntax:
    content: >-
      [JsonIgnore]

      public Solid Geometry { get; protected set; }
    parameters: []
    return:
      type: Elements.Geometry.Solids.Solid
    content.vb: >-
      <JsonIgnore>

      Public Property Geometry As Solid
  overload: Elements.Wall.Geometry*
  implements:
  - Elements.Geometry.Interfaces.ISolid.Geometry
  attributes:
  - type: Newtonsoft.Json.JsonIgnoreAttribute
    ctor: Newtonsoft.Json.JsonIgnoreAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Elements.Wall.ExtrudeDirection
  commentId: P:Elements.Wall.ExtrudeDirection
  id: ExtrudeDirection
  parent: Elements.Wall
  langs:
  - csharp
  - vb
  name: ExtrudeDirection
  nameWithType: Wall.ExtrudeDirection
  fullName: Elements.Wall.ExtrudeDirection
  type: Property
  source:
    remote:
      path: src/Elements/Wall.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: ExtrudeDirection
    path: ../src/Elements/Wall.cs
    startLine: 33
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nThe extruded direction of the wall.\n"
  example: []
  syntax:
    content: public Vector3 ExtrudeDirection { get; protected set; }
    parameters: []
    return:
      type: Elements.Geometry.Vector3
    content.vb: Public Property ExtrudeDirection As Vector3
  overload: Elements.Wall.ExtrudeDirection*
  implements:
  - Elements.Geometry.Interfaces.IExtrude.ExtrudeDirection
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Elements.Wall.ExtrudeDepth
  commentId: P:Elements.Wall.ExtrudeDepth
  id: ExtrudeDepth
  parent: Elements.Wall
  langs:
  - csharp
  - vb
  name: ExtrudeDepth
  nameWithType: Wall.ExtrudeDepth
  fullName: Elements.Wall.ExtrudeDepth
  type: Property
  source:
    remote:
      path: src/Elements/Wall.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: ExtrudeDepth
    path: ../src/Elements/Wall.cs
    startLine: 38
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nThe extruded depth of the wall.\n"
  example: []
  syntax:
    content: public double ExtrudeDepth { get; protected set; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public Property ExtrudeDepth As Double
  overload: Elements.Wall.ExtrudeDepth*
  implements:
  - Elements.Geometry.Interfaces.IExtrude.ExtrudeDepth
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Elements.Wall.Profile
  commentId: P:Elements.Wall.Profile
  id: Profile
  parent: Elements.Wall
  langs:
  - csharp
  - vb
  name: Profile
  nameWithType: Wall.Profile
  fullName: Elements.Wall.Profile
  type: Property
  source:
    remote:
      path: src/Elements/Wall.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Profile
    path: ../src/Elements/Wall.cs
    startLine: 43
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nThe extruded area of the wall.\n"
  example: []
  syntax:
    content: public Profile Profile { get; protected set; }
    parameters: []
    return:
      type: Elements.Geometry.Profile
    content.vb: Public Property Profile As Profile
  overload: Elements.Wall.Profile*
  implements:
  - Elements.Geometry.Interfaces.IProfile.Profile
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Elements.Wall.BothSides
  commentId: P:Elements.Wall.BothSides
  id: BothSides
  parent: Elements.Wall
  langs:
  - csharp
  - vb
  name: BothSides
  nameWithType: Wall.BothSides
  fullName: Elements.Wall.BothSides
  type: Property
  source:
    remote:
      path: src/Elements/Wall.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: BothSides
    path: ../src/Elements/Wall.cs
    startLine: 48
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nExtrude to both sides?\n"
  example: []
  syntax:
    content: public virtual bool BothSides { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property BothSides As Boolean
  overload: Elements.Wall.BothSides*
  implements:
  - Elements.Geometry.Interfaces.IExtrude.BothSides
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: Elements.Wall.#ctor(Elements.Geometry.Polygon,Elements.WallType,System.Double,Elements.Geometry.Transform)
  commentId: M:Elements.Wall.#ctor(Elements.Geometry.Polygon,Elements.WallType,System.Double,Elements.Geometry.Transform)
  id: '#ctor(Elements.Geometry.Polygon,Elements.WallType,System.Double,Elements.Geometry.Transform)'
  parent: Elements.Wall
  langs:
  - csharp
  - vb
  name: Wall(Polygon, WallType, Double, Transform)
  nameWithType: Wall.Wall(Polygon, WallType, Double, Transform)
  fullName: Elements.Wall.Wall(Elements.Geometry.Polygon, Elements.WallType, System.Double, Elements.Geometry.Transform)
  type: Constructor
  source:
    remote:
      path: src/Elements/Wall.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Wall.cs
    startLine: 82
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nConstruct a wall by extruding a profile.\n"
  example: []
  syntax:
    content: public Wall(Polygon profile, WallType elementType, double height, Transform transform = null)
    parameters:
    - id: profile
      type: Elements.Geometry.Polygon
      description: The plan profile of the wall.
    - id: elementType
      type: Elements.WallType
      description: The wall type of the wall.
    - id: height
      type: System.Double
      description: The height of the wall.
    - id: transform
      type: Elements.Geometry.Transform
      description: An option transform for the wall.
    content.vb: Public Sub New(profile As Polygon, elementType As WallType, height As Double, transform As Transform = Nothing)
  overload: Elements.Wall.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Wall.Thickness
  commentId: M:Elements.Wall.Thickness
  id: Thickness
  parent: Elements.Wall
  langs:
  - csharp
  - vb
  name: Thickness()
  nameWithType: Wall.Thickness()
  fullName: Elements.Wall.Thickness()
  type: Method
  source:
    remote:
      path: src/Elements/Wall.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Thickness
    path: ../src/Elements/Wall.cs
    startLine: 118
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nCalculate the thickness of the wall&apos;s extrusion from its wall type.\n"
  example: []
  syntax:
    content: public double Thickness()
    return:
      type: System.Double
    content.vb: Public Function Thickness As Double
  overload: Elements.Wall.Thickness*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Elements
  commentId: N:Elements
  name: Elements
  nameWithType: Elements
  fullName: Elements
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Elements.Element
  commentId: T:Elements.Element
  parent: Elements
  name: Element
  nameWithType: Element
  fullName: Elements.Element
- uid: Elements.Interfaces.IElement
  commentId: T:Elements.Interfaces.IElement
  parent: Elements.Interfaces
  name: IElement
  nameWithType: IElement
  fullName: Elements.Interfaces.IElement
- uid: Elements.Interfaces.IIdentifiable
  commentId: T:Elements.Interfaces.IIdentifiable
  parent: Elements.Interfaces
  name: IIdentifiable
  nameWithType: IIdentifiable
  fullName: Elements.Interfaces.IIdentifiable
- uid: Elements.Geometry.Interfaces.ITransformable
  commentId: T:Elements.Geometry.Interfaces.ITransformable
  parent: Elements.Geometry.Interfaces
  name: ITransformable
  nameWithType: ITransformable
  fullName: Elements.Geometry.Interfaces.ITransformable
- uid: Elements.Interfaces.IPropertySet
  commentId: T:Elements.Interfaces.IPropertySet
  parent: Elements.Interfaces
  name: IPropertySet
  nameWithType: IPropertySet
  fullName: Elements.Interfaces.IPropertySet
- uid: Elements.Interfaces.IElementType{Elements.WallType}
  commentId: T:Elements.Interfaces.IElementType{Elements.WallType}
  parent: Elements.Interfaces
  definition: Elements.Interfaces.IElementType`1
  name: IElementType<WallType>
  nameWithType: IElementType<WallType>
  fullName: Elements.Interfaces.IElementType<Elements.WallType>
  nameWithType.vb: IElementType(Of WallType)
  fullName.vb: Elements.Interfaces.IElementType(Of Elements.WallType)
  name.vb: IElementType(Of WallType)
  spec.csharp:
  - uid: Elements.Interfaces.IElementType`1
    name: IElementType
    nameWithType: IElementType
    fullName: Elements.Interfaces.IElementType
  - name: <
    nameWithType: <
    fullName: <
  - uid: Elements.WallType
    name: WallType
    nameWithType: WallType
    fullName: Elements.WallType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Elements.Interfaces.IElementType`1
    name: IElementType
    nameWithType: IElementType
    fullName: Elements.Interfaces.IElementType
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Elements.WallType
    name: WallType
    nameWithType: WallType
    fullName: Elements.WallType
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Interfaces.ISolid
  commentId: T:Elements.Geometry.Interfaces.ISolid
  parent: Elements.Geometry.Interfaces
  name: ISolid
  nameWithType: ISolid
  fullName: Elements.Geometry.Interfaces.ISolid
- uid: Elements.Geometry.Interfaces.IExtrude
  commentId: T:Elements.Geometry.Interfaces.IExtrude
  parent: Elements.Geometry.Interfaces
  name: IExtrude
  nameWithType: IExtrude
  fullName: Elements.Geometry.Interfaces.IExtrude
- uid: Elements.Geometry.Interfaces.IProfile
  commentId: T:Elements.Geometry.Interfaces.IProfile
  parent: Elements.Geometry.Interfaces
  name: IProfile
  nameWithType: IProfile
  fullName: Elements.Geometry.Interfaces.IProfile
- uid: Elements.Element.Id
  commentId: P:Elements.Element.Id
  parent: Elements.Element
  name: Id
  nameWithType: Element.Id
  fullName: Elements.Element.Id
- uid: Elements.Element.Type
  commentId: P:Elements.Element.Type
  parent: Elements.Element
  name: Type
  nameWithType: Element.Type
  fullName: Elements.Element.Type
- uid: Elements.Element.Properties
  commentId: P:Elements.Element.Properties
  parent: Elements.Element
  name: Properties
  nameWithType: Element.Properties
  fullName: Elements.Element.Properties
- uid: Elements.Element.Transform
  commentId: P:Elements.Element.Transform
  parent: Elements.Element
  name: Transform
  nameWithType: Element.Transform
  fullName: Elements.Element.Transform
- uid: Elements.Element.Name
  commentId: P:Elements.Element.Name
  parent: Elements.Element
  name: Name
  nameWithType: Element.Name
  fullName: Elements.Element.Name
- uid: Elements.Element.AddProperty(System.String,Elements.Interfaces.IProperty)
  commentId: M:Elements.Element.AddProperty(System.String,Elements.Interfaces.IProperty)
  parent: Elements.Element
  isExternal: true
  name: AddProperty(String, IProperty)
  nameWithType: Element.AddProperty(String, IProperty)
  fullName: Elements.Element.AddProperty(System.String, Elements.Interfaces.IProperty)
  spec.csharp:
  - uid: Elements.Element.AddProperty(System.String,Elements.Interfaces.IProperty)
    name: AddProperty
    nameWithType: Element.AddProperty
    fullName: Elements.Element.AddProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Elements.Interfaces.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Elements.Interfaces.IProperty
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Element.AddProperty(System.String,Elements.Interfaces.IProperty)
    name: AddProperty
    nameWithType: Element.AddProperty
    fullName: Elements.Element.AddProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Elements.Interfaces.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Elements.Interfaces.IProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Element.RemoveProperty(System.String)
  commentId: M:Elements.Element.RemoveProperty(System.String)
  parent: Elements.Element
  isExternal: true
  name: RemoveProperty(String)
  nameWithType: Element.RemoveProperty(String)
  fullName: Elements.Element.RemoveProperty(System.String)
  spec.csharp:
  - uid: Elements.Element.RemoveProperty(System.String)
    name: RemoveProperty
    nameWithType: Element.RemoveProperty
    fullName: Elements.Element.RemoveProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Element.RemoveProperty(System.String)
    name: RemoveProperty
    nameWithType: Element.RemoveProperty
    fullName: Elements.Element.RemoveProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Elements.Interfaces
  commentId: N:Elements.Interfaces
  name: Elements.Interfaces
  nameWithType: Elements.Interfaces
  fullName: Elements.Interfaces
- uid: Elements.Geometry.Interfaces
  commentId: N:Elements.Geometry.Interfaces
  name: Elements.Geometry.Interfaces
  nameWithType: Elements.Geometry.Interfaces
  fullName: Elements.Geometry.Interfaces
- uid: Elements.Interfaces.IElementType`1
  commentId: T:Elements.Interfaces.IElementType`1
  name: IElementType<TElementType>
  nameWithType: IElementType<TElementType>
  fullName: Elements.Interfaces.IElementType<TElementType>
  nameWithType.vb: IElementType(Of TElementType)
  fullName.vb: Elements.Interfaces.IElementType(Of TElementType)
  name.vb: IElementType(Of TElementType)
  spec.csharp:
  - uid: Elements.Interfaces.IElementType`1
    name: IElementType
    nameWithType: IElementType
    fullName: Elements.Interfaces.IElementType
  - name: <
    nameWithType: <
    fullName: <
  - name: TElementType
    nameWithType: TElementType
    fullName: TElementType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Elements.Interfaces.IElementType`1
    name: IElementType
    nameWithType: IElementType
    fullName: Elements.Interfaces.IElementType
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElementType
    nameWithType: TElementType
    fullName: TElementType
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Wall.Height*
  commentId: Overload:Elements.Wall.Height
  name: Height
  nameWithType: Wall.Height
  fullName: Elements.Wall.Height
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Elements.Wall.ElementType*
  commentId: Overload:Elements.Wall.ElementType
  name: ElementType
  nameWithType: Wall.ElementType
  fullName: Elements.Wall.ElementType
- uid: Elements.Interfaces.IElementType{Elements.WallType}.ElementType
  commentId: P:Elements.Interfaces.IElementType{Elements.WallType}.ElementType
  parent: Elements.Interfaces.IElementType{Elements.WallType}
  definition: Elements.Interfaces.IElementType`1.ElementType
  name: ElementType
  nameWithType: IElementType<WallType>.ElementType
  fullName: Elements.Interfaces.IElementType<Elements.WallType>.ElementType
  nameWithType.vb: IElementType(Of WallType).ElementType
  fullName.vb: Elements.Interfaces.IElementType(Of Elements.WallType).ElementType
- uid: Elements.WallType
  commentId: T:Elements.WallType
  parent: Elements
  name: WallType
  nameWithType: WallType
  fullName: Elements.WallType
- uid: Elements.Interfaces.IElementType`1.ElementType
  commentId: P:Elements.Interfaces.IElementType`1.ElementType
  name: ElementType
  nameWithType: IElementType<TElementType>.ElementType
  fullName: Elements.Interfaces.IElementType<TElementType>.ElementType
  nameWithType.vb: IElementType(Of TElementType).ElementType
  fullName.vb: Elements.Interfaces.IElementType(Of TElementType).ElementType
- uid: Elements.Wall.Geometry*
  commentId: Overload:Elements.Wall.Geometry
  name: Geometry
  nameWithType: Wall.Geometry
  fullName: Elements.Wall.Geometry
- uid: Elements.Geometry.Interfaces.ISolid.Geometry
  commentId: P:Elements.Geometry.Interfaces.ISolid.Geometry
  parent: Elements.Geometry.Interfaces.ISolid
  name: Geometry
  nameWithType: ISolid.Geometry
  fullName: Elements.Geometry.Interfaces.ISolid.Geometry
- uid: Elements.Geometry.Solids.Solid
  commentId: T:Elements.Geometry.Solids.Solid
  parent: Elements.Geometry.Solids
  name: Solid
  nameWithType: Solid
  fullName: Elements.Geometry.Solids.Solid
- uid: Elements.Geometry.Solids
  commentId: N:Elements.Geometry.Solids
  name: Elements.Geometry.Solids
  nameWithType: Elements.Geometry.Solids
  fullName: Elements.Geometry.Solids
- uid: Elements.Wall.ExtrudeDirection*
  commentId: Overload:Elements.Wall.ExtrudeDirection
  name: ExtrudeDirection
  nameWithType: Wall.ExtrudeDirection
  fullName: Elements.Wall.ExtrudeDirection
- uid: Elements.Geometry.Interfaces.IExtrude.ExtrudeDirection
  commentId: P:Elements.Geometry.Interfaces.IExtrude.ExtrudeDirection
  parent: Elements.Geometry.Interfaces.IExtrude
  name: ExtrudeDirection
  nameWithType: IExtrude.ExtrudeDirection
  fullName: Elements.Geometry.Interfaces.IExtrude.ExtrudeDirection
- uid: Elements.Geometry.Vector3
  commentId: T:Elements.Geometry.Vector3
  parent: Elements.Geometry
  name: Vector3
  nameWithType: Vector3
  fullName: Elements.Geometry.Vector3
- uid: Elements.Geometry
  commentId: N:Elements.Geometry
  name: Elements.Geometry
  nameWithType: Elements.Geometry
  fullName: Elements.Geometry
- uid: Elements.Wall.ExtrudeDepth*
  commentId: Overload:Elements.Wall.ExtrudeDepth
  name: ExtrudeDepth
  nameWithType: Wall.ExtrudeDepth
  fullName: Elements.Wall.ExtrudeDepth
- uid: Elements.Geometry.Interfaces.IExtrude.ExtrudeDepth
  commentId: P:Elements.Geometry.Interfaces.IExtrude.ExtrudeDepth
  parent: Elements.Geometry.Interfaces.IExtrude
  name: ExtrudeDepth
  nameWithType: IExtrude.ExtrudeDepth
  fullName: Elements.Geometry.Interfaces.IExtrude.ExtrudeDepth
- uid: Elements.Wall.Profile*
  commentId: Overload:Elements.Wall.Profile
  name: Profile
  nameWithType: Wall.Profile
  fullName: Elements.Wall.Profile
- uid: Elements.Geometry.Interfaces.IProfile.Profile
  commentId: P:Elements.Geometry.Interfaces.IProfile.Profile
  parent: Elements.Geometry.Interfaces.IProfile
  name: Profile
  nameWithType: IProfile.Profile
  fullName: Elements.Geometry.Interfaces.IProfile.Profile
- uid: Elements.Geometry.Profile
  commentId: T:Elements.Geometry.Profile
  parent: Elements.Geometry
  name: Profile
  nameWithType: Profile
  fullName: Elements.Geometry.Profile
- uid: Elements.Wall.BothSides*
  commentId: Overload:Elements.Wall.BothSides
  name: BothSides
  nameWithType: Wall.BothSides
  fullName: Elements.Wall.BothSides
- uid: Elements.Geometry.Interfaces.IExtrude.BothSides
  commentId: P:Elements.Geometry.Interfaces.IExtrude.BothSides
  parent: Elements.Geometry.Interfaces.IExtrude
  name: BothSides
  nameWithType: IExtrude.BothSides
  fullName: Elements.Geometry.Interfaces.IExtrude.BothSides
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Elements.Wall.#ctor*
  commentId: Overload:Elements.Wall.#ctor
  name: Wall
  nameWithType: Wall.Wall
  fullName: Elements.Wall.Wall
- uid: Elements.Geometry.Polygon
  commentId: T:Elements.Geometry.Polygon
  parent: Elements.Geometry
  name: Polygon
  nameWithType: Polygon
  fullName: Elements.Geometry.Polygon
- uid: Elements.Geometry.Transform
  commentId: T:Elements.Geometry.Transform
  parent: Elements.Geometry
  name: Transform
  nameWithType: Transform
  fullName: Elements.Geometry.Transform
- uid: Elements.Wall.Thickness*
  commentId: Overload:Elements.Wall.Thickness
  name: Thickness
  nameWithType: Wall.Thickness
  fullName: Elements.Wall.Thickness
