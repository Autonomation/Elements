### YamlMime:ManagedReference
items:
- uid: Elements.Geometry.Interfaces.ICurve
  commentId: T:Elements.Geometry.Interfaces.ICurve
  id: ICurve
  parent: Elements.Geometry.Interfaces
  children:
  - Elements.Geometry.Interfaces.ICurve.Bounds
  - Elements.Geometry.Interfaces.ICurve.End
  - Elements.Geometry.Interfaces.ICurve.Frames(System.Double,System.Double)
  - Elements.Geometry.Interfaces.ICurve.Length
  - Elements.Geometry.Interfaces.ICurve.PointAt(System.Double)
  - Elements.Geometry.Interfaces.ICurve.Reversed
  - Elements.Geometry.Interfaces.ICurve.Start
  - Elements.Geometry.Interfaces.ICurve.TransformAt(System.Double)
  - Elements.Geometry.Interfaces.ICurve.Type
  langs:
  - csharp
  - vb
  name: ICurve
  nameWithType: ICurve
  fullName: Elements.Geometry.Interfaces.ICurve
  type: Interface
  source:
    remote:
      path: src/Elements/Geometry/Interfaces/ICurve.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: ICurve
    path: ../src/Elements/Geometry/Interfaces/ICurve.cs
    startLine: 7
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Interfaces
  summary: "\nICurve is implemented by all curve types.\n"
  example: []
  syntax:
    content: public interface ICurve
    content.vb: Public Interface ICurve
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Elements.Geometry.Interfaces.ICurve.Type
  commentId: P:Elements.Geometry.Interfaces.ICurve.Type
  id: Type
  parent: Elements.Geometry.Interfaces.ICurve
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: ICurve.Type
  fullName: Elements.Geometry.Interfaces.ICurve.Type
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Interfaces/ICurve.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Type
    path: ../src/Elements/Geometry/Interfaces/ICurve.cs
    startLine: 12
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Interfaces
  summary: "\nA type descriptor for use in deserialization.\n"
  example: []
  syntax:
    content: string Type { get; }
    parameters: []
    return:
      type: System.String
    content.vb: ReadOnly Property Type As String
  overload: Elements.Geometry.Interfaces.ICurve.Type*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Elements.Geometry.Interfaces.ICurve.Length
  commentId: M:Elements.Geometry.Interfaces.ICurve.Length
  id: Length
  parent: Elements.Geometry.Interfaces.ICurve
  langs:
  - csharp
  - vb
  name: Length()
  nameWithType: ICurve.Length()
  fullName: Elements.Geometry.Interfaces.ICurve.Length()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Interfaces/ICurve.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Length
    path: ../src/Elements/Geometry/Interfaces/ICurve.cs
    startLine: 17
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Interfaces
  summary: "\nCalculate the length of the curve.\n"
  example: []
  syntax:
    content: double Length()
    return:
      type: System.Double
    content.vb: Function Length As Double
  overload: Elements.Geometry.Interfaces.ICurve.Length*
- uid: Elements.Geometry.Interfaces.ICurve.Start
  commentId: P:Elements.Geometry.Interfaces.ICurve.Start
  id: Start
  parent: Elements.Geometry.Interfaces.ICurve
  langs:
  - csharp
  - vb
  name: Start
  nameWithType: ICurve.Start
  fullName: Elements.Geometry.Interfaces.ICurve.Start
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Interfaces/ICurve.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Start
    path: ../src/Elements/Geometry/Interfaces/ICurve.cs
    startLine: 22
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Interfaces
  summary: "\nThe start of the curve.\n"
  example: []
  syntax:
    content: Vector3 Start { get; }
    parameters: []
    return:
      type: Elements.Geometry.Vector3
    content.vb: ReadOnly Property Start As Vector3
  overload: Elements.Geometry.Interfaces.ICurve.Start*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Elements.Geometry.Interfaces.ICurve.End
  commentId: P:Elements.Geometry.Interfaces.ICurve.End
  id: End
  parent: Elements.Geometry.Interfaces.ICurve
  langs:
  - csharp
  - vb
  name: End
  nameWithType: ICurve.End
  fullName: Elements.Geometry.Interfaces.ICurve.End
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Interfaces/ICurve.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: End
    path: ../src/Elements/Geometry/Interfaces/ICurve.cs
    startLine: 27
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Interfaces
  summary: "\nThe end of the curve.\n"
  example: []
  syntax:
    content: Vector3 End { get; }
    parameters: []
    return:
      type: Elements.Geometry.Vector3
    content.vb: ReadOnly Property End As Vector3
  overload: Elements.Geometry.Interfaces.ICurve.End*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Elements.Geometry.Interfaces.ICurve.PointAt(System.Double)
  commentId: M:Elements.Geometry.Interfaces.ICurve.PointAt(System.Double)
  id: PointAt(System.Double)
  parent: Elements.Geometry.Interfaces.ICurve
  langs:
  - csharp
  - vb
  name: PointAt(Double)
  nameWithType: ICurve.PointAt(Double)
  fullName: Elements.Geometry.Interfaces.ICurve.PointAt(System.Double)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Interfaces/ICurve.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: PointAt
    path: ../src/Elements/Geometry/Interfaces/ICurve.cs
    startLine: 34
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Interfaces
  summary: "\nGet a point along the curve at parameter u.\n"
  example: []
  syntax:
    content: Vector3 PointAt(double u)
    parameters:
    - id: u
      type: System.Double
      description: A parameter on the curve between 0.0 and 1.0.
    return:
      type: Elements.Geometry.Vector3
      description: The point on the curve.
    content.vb: Function PointAt(u As Double) As Vector3
  overload: Elements.Geometry.Interfaces.ICurve.PointAt*
- uid: Elements.Geometry.Interfaces.ICurve.TransformAt(System.Double)
  commentId: M:Elements.Geometry.Interfaces.ICurve.TransformAt(System.Double)
  id: TransformAt(System.Double)
  parent: Elements.Geometry.Interfaces.ICurve
  langs:
  - csharp
  - vb
  name: TransformAt(Double)
  nameWithType: ICurve.TransformAt(Double)
  fullName: Elements.Geometry.Interfaces.ICurve.TransformAt(System.Double)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Interfaces/ICurve.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: TransformAt
    path: ../src/Elements/Geometry/Interfaces/ICurve.cs
    startLine: 41
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Interfaces
  summary: "\nGet the frame from the curve at parameter u.\n"
  example: []
  syntax:
    content: Transform TransformAt(double u)
    parameters:
    - id: u
      type: System.Double
      description: A parameter on the curve between 0.0 and 1.0.
    return:
      type: Elements.Geometry.Transform
      description: The transform of the curve at parameter u, with the transform&apos;s Z axis tangent to the curve.
    content.vb: Function TransformAt(u As Double) As Transform
  overload: Elements.Geometry.Interfaces.ICurve.TransformAt*
- uid: Elements.Geometry.Interfaces.ICurve.Frames(System.Double,System.Double)
  commentId: M:Elements.Geometry.Interfaces.ICurve.Frames(System.Double,System.Double)
  id: Frames(System.Double,System.Double)
  parent: Elements.Geometry.Interfaces.ICurve
  langs:
  - csharp
  - vb
  name: Frames(Double, Double)
  nameWithType: ICurve.Frames(Double, Double)
  fullName: Elements.Geometry.Interfaces.ICurve.Frames(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Interfaces/ICurve.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Frames
    path: ../src/Elements/Geometry/Interfaces/ICurve.cs
    startLine: 49
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Interfaces
  summary: "\nGet a collection of Transforms which represent frames along this ICurve.\n"
  example: []
  syntax:
    content: Transform[] Frames(double startSetback = 0, double endSetback = 0)
    parameters:
    - id: startSetback
      type: System.Double
      description: The offset from the start of the ICurve.
    - id: endSetback
      type: System.Double
      description: The offset from the end of the ICurve.
    return:
      type: Elements.Geometry.Transform[]
      description: A collection of Transforms.
    content.vb: Function Frames(startSetback As Double = 0, endSetback As Double = 0) As Transform()
  overload: Elements.Geometry.Interfaces.ICurve.Frames*
- uid: Elements.Geometry.Interfaces.ICurve.Reversed
  commentId: M:Elements.Geometry.Interfaces.ICurve.Reversed
  id: Reversed
  parent: Elements.Geometry.Interfaces.ICurve
  langs:
  - csharp
  - vb
  name: Reversed()
  nameWithType: ICurve.Reversed()
  fullName: Elements.Geometry.Interfaces.ICurve.Reversed()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Interfaces/ICurve.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Reversed
    path: ../src/Elements/Geometry/Interfaces/ICurve.cs
    startLine: 54
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Interfaces
  summary: "\nGet an ICurve which is the reverse of this curve.\n"
  example: []
  syntax:
    content: ICurve Reversed()
    return:
      type: Elements.Geometry.Interfaces.ICurve
    content.vb: Function Reversed As ICurve
  overload: Elements.Geometry.Interfaces.ICurve.Reversed*
- uid: Elements.Geometry.Interfaces.ICurve.Bounds
  commentId: M:Elements.Geometry.Interfaces.ICurve.Bounds
  id: Bounds
  parent: Elements.Geometry.Interfaces.ICurve
  langs:
  - csharp
  - vb
  name: Bounds()
  nameWithType: ICurve.Bounds()
  fullName: Elements.Geometry.Interfaces.ICurve.Bounds()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Interfaces/ICurve.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Bounds
    path: ../src/Elements/Geometry/Interfaces/ICurve.cs
    startLine: 59
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Interfaces
  summary: "\nGet the bounding box of this curve.\n"
  example: []
  syntax:
    content: BBox3 Bounds()
    return:
      type: Elements.Geometry.BBox3
    content.vb: Function Bounds As BBox3
  overload: Elements.Geometry.Interfaces.ICurve.Bounds*
references:
- uid: Elements.Geometry.Interfaces
  commentId: N:Elements.Geometry.Interfaces
  name: Elements.Geometry.Interfaces
  nameWithType: Elements.Geometry.Interfaces
  fullName: Elements.Geometry.Interfaces
- uid: Elements.Geometry.Interfaces.ICurve.Type*
  commentId: Overload:Elements.Geometry.Interfaces.ICurve.Type
  name: Type
  nameWithType: ICurve.Type
  fullName: Elements.Geometry.Interfaces.ICurve.Type
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Elements.Geometry.Interfaces.ICurve.Length*
  commentId: Overload:Elements.Geometry.Interfaces.ICurve.Length
  name: Length
  nameWithType: ICurve.Length
  fullName: Elements.Geometry.Interfaces.ICurve.Length
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Elements.Geometry.Interfaces.ICurve.Start*
  commentId: Overload:Elements.Geometry.Interfaces.ICurve.Start
  name: Start
  nameWithType: ICurve.Start
  fullName: Elements.Geometry.Interfaces.ICurve.Start
- uid: Elements.Geometry.Vector3
  commentId: T:Elements.Geometry.Vector3
  parent: Elements.Geometry
  name: Vector3
  nameWithType: Vector3
  fullName: Elements.Geometry.Vector3
- uid: Elements.Geometry
  commentId: N:Elements.Geometry
  name: Elements.Geometry
  nameWithType: Elements.Geometry
  fullName: Elements.Geometry
- uid: Elements.Geometry.Interfaces.ICurve.End*
  commentId: Overload:Elements.Geometry.Interfaces.ICurve.End
  name: End
  nameWithType: ICurve.End
  fullName: Elements.Geometry.Interfaces.ICurve.End
- uid: Elements.Geometry.Interfaces.ICurve.PointAt*
  commentId: Overload:Elements.Geometry.Interfaces.ICurve.PointAt
  name: PointAt
  nameWithType: ICurve.PointAt
  fullName: Elements.Geometry.Interfaces.ICurve.PointAt
- uid: Elements.Geometry.Interfaces.ICurve.TransformAt*
  commentId: Overload:Elements.Geometry.Interfaces.ICurve.TransformAt
  name: TransformAt
  nameWithType: ICurve.TransformAt
  fullName: Elements.Geometry.Interfaces.ICurve.TransformAt
- uid: Elements.Geometry.Transform
  commentId: T:Elements.Geometry.Transform
  parent: Elements.Geometry
  name: Transform
  nameWithType: Transform
  fullName: Elements.Geometry.Transform
- uid: Elements.Geometry.Interfaces.ICurve.Frames*
  commentId: Overload:Elements.Geometry.Interfaces.ICurve.Frames
  name: Frames
  nameWithType: ICurve.Frames
  fullName: Elements.Geometry.Interfaces.ICurve.Frames
- uid: Elements.Geometry.Transform[]
  isExternal: true
  name: Transform[]
  nameWithType: Transform[]
  fullName: Elements.Geometry.Transform[]
  nameWithType.vb: Transform()
  fullName.vb: Elements.Geometry.Transform()
  name.vb: Transform()
  spec.csharp:
  - uid: Elements.Geometry.Transform
    name: Transform
    nameWithType: Transform
    fullName: Elements.Geometry.Transform
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Elements.Geometry.Transform
    name: Transform
    nameWithType: Transform
    fullName: Elements.Geometry.Transform
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Elements.Geometry.Interfaces.ICurve.Reversed*
  commentId: Overload:Elements.Geometry.Interfaces.ICurve.Reversed
  name: Reversed
  nameWithType: ICurve.Reversed
  fullName: Elements.Geometry.Interfaces.ICurve.Reversed
- uid: Elements.Geometry.Interfaces.ICurve
  commentId: T:Elements.Geometry.Interfaces.ICurve
  parent: Elements.Geometry.Interfaces
  name: ICurve
  nameWithType: ICurve
  fullName: Elements.Geometry.Interfaces.ICurve
- uid: Elements.Geometry.Interfaces.ICurve.Bounds*
  commentId: Overload:Elements.Geometry.Interfaces.ICurve.Bounds
  name: Bounds
  nameWithType: ICurve.Bounds
  fullName: Elements.Geometry.Interfaces.ICurve.Bounds
- uid: Elements.Geometry.BBox3
  commentId: T:Elements.Geometry.BBox3
  parent: Elements.Geometry
  name: BBox3
  nameWithType: BBox3
  fullName: Elements.Geometry.BBox3
