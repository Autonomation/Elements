### YamlMime:ManagedReference
items:
- uid: Elements.Grid
  commentId: T:Elements.Grid
  id: Grid
  parent: Elements
  children:
  - Elements.Grid.#ctor(Elements.Geometry.Line,Elements.Geometry.Line,System.Double,System.Double)
  - Elements.Grid.#ctor(Elements.Geometry.Line,Elements.Geometry.Line,System.Int32,System.Int32)
  - Elements.Grid.Cells
  langs:
  - csharp
  - vb
  name: Grid
  nameWithType: Grid
  fullName: Elements.Grid
  type: Class
  source:
    remote:
      path: src/Elements/Grid.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Grid
    path: ../src/Elements/Grid.cs
    startLine: 9
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nA grid comprised of rows and columns with each cell represented by a polyline.\n"
  example: []
  syntax:
    content: public class Grid
    content.vb: Public Class Grid
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Elements.Grid.Cells
  commentId: M:Elements.Grid.Cells
  id: Cells
  parent: Elements.Grid
  langs:
  - csharp
  - vb
  name: Cells()
  nameWithType: Grid.Cells()
  fullName: Elements.Grid.Cells()
  type: Method
  source:
    remote:
      path: src/Elements/Grid.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Cells
    path: ../src/Elements/Grid.cs
    startLine: 58
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nGet all cells.\n"
  example: []
  syntax:
    content: public Vector3[][, ] Cells()
    return:
      type: Elements.Geometry.Vector3[][,]
      description: ''
    content.vb: Public Function Cells As Vector3()(,)
  overload: Elements.Grid.Cells*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Grid.#ctor(Elements.Geometry.Line,Elements.Geometry.Line,System.Int32,System.Int32)
  commentId: M:Elements.Grid.#ctor(Elements.Geometry.Line,Elements.Geometry.Line,System.Int32,System.Int32)
  id: '#ctor(Elements.Geometry.Line,Elements.Geometry.Line,System.Int32,System.Int32)'
  parent: Elements.Grid
  langs:
  - csharp
  - vb
  name: Grid(Line, Line, Int32, Int32)
  nameWithType: Grid.Grid(Line, Line, Int32, Int32)
  fullName: Elements.Grid.Grid(Elements.Geometry.Line, Elements.Geometry.Line, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/Elements/Grid.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Grid.cs
    startLine: 87
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nConstruct a grid.\n"
  example: []
  syntax:
    content: public Grid(Line bottom, Line top, int uDivisions = 1, int vDivisions = 1)
    parameters:
    - id: bottom
      type: Elements.Geometry.Line
      description: ''
    - id: top
      type: Elements.Geometry.Line
      description: ''
    - id: uDivisions
      type: System.Int32
      description: The number of grid divisions in the u direction.
    - id: vDivisions
      type: System.Int32
      description: The number of grid divisions in the v direction.
    content.vb: Public Sub New(bottom As Line, top As Line, uDivisions As Integer = 1, vDivisions As Integer = 1)
  overload: Elements.Grid.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Grid.#ctor(Elements.Geometry.Line,Elements.Geometry.Line,System.Double,System.Double)
  commentId: M:Elements.Grid.#ctor(Elements.Geometry.Line,Elements.Geometry.Line,System.Double,System.Double)
  id: '#ctor(Elements.Geometry.Line,Elements.Geometry.Line,System.Double,System.Double)'
  parent: Elements.Grid
  langs:
  - csharp
  - vb
  name: Grid(Line, Line, Double, Double)
  nameWithType: Grid.Grid(Line, Line, Double, Double)
  fullName: Elements.Grid.Grid(Elements.Geometry.Line, Elements.Geometry.Line, System.Double, System.Double)
  type: Constructor
  source:
    remote:
      path: src/Elements/Grid.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Grid.cs
    startLine: 103
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nConstruct a grid.\n"
  example: []
  syntax:
    content: public Grid(Line bottom, Line top, double uDistance, double vDistance)
    parameters:
    - id: bottom
      type: Elements.Geometry.Line
      description: The bottom edge of the Grid.
    - id: top
      type: Elements.Geometry.Line
      description: The top edge of the Grid.
    - id: uDistance
      type: System.Double
      description: The distance along the u parameter at which points will be created.
    - id: vDistance
      type: System.Double
      description: The distance along the v parameter at which points will be created.
    content.vb: Public Sub New(bottom As Line, top As Line, uDistance As Double, vDistance As Double)
  overload: Elements.Grid.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Elements
  commentId: N:Elements
  name: Elements
  nameWithType: Elements
  fullName: Elements
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Elements.Grid.Cells*
  commentId: Overload:Elements.Grid.Cells
  name: Cells
  nameWithType: Grid.Cells
  fullName: Elements.Grid.Cells
- uid: Elements.Geometry.Vector3[][,]
  isExternal: true
  name: Vector3[][,]
  nameWithType: Vector3[][,]
  fullName: Elements.Geometry.Vector3[][,]
  nameWithType.vb: Vector3()(,)
  fullName.vb: Elements.Geometry.Vector3()(,)
  name.vb: Vector3()(,)
  spec.csharp:
  - uid: Elements.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Elements.Geometry.Vector3
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[,]'
    nameWithType: '[,]'
    fullName: '[,]'
  spec.vb:
  - uid: Elements.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Elements.Geometry.Vector3
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: (,)
    nameWithType: (,)
    fullName: (,)
- uid: Elements.Grid.#ctor*
  commentId: Overload:Elements.Grid.#ctor
  name: Grid
  nameWithType: Grid.Grid
  fullName: Elements.Grid.Grid
- uid: Elements.Geometry.Line
  commentId: T:Elements.Geometry.Line
  parent: Elements.Geometry
  name: Line
  nameWithType: Line
  fullName: Elements.Geometry.Line
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Elements.Geometry
  commentId: N:Elements.Geometry
  name: Elements.Geometry
  nameWithType: Elements.Geometry
  fullName: Elements.Geometry
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
