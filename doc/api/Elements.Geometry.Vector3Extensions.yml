### YamlMime:ManagedReference
items:
- uid: Elements.Geometry.Vector3Extensions
  commentId: T:Elements.Geometry.Vector3Extensions
  id: Vector3Extensions
  parent: Elements.Geometry
  children:
  - Elements.Geometry.Vector3Extensions.AreCoplanar(System.Collections.Generic.IList{Elements.Geometry.Vector3})
  - Elements.Geometry.Vector3Extensions.Average(System.Collections.Generic.IList{Elements.Geometry.Vector3})
  - Elements.Geometry.Vector3Extensions.Shrink(Elements.Geometry.Vector3[],System.Double)
  - Elements.Geometry.Vector3Extensions.ToArray(System.Collections.Generic.IList{Elements.Geometry.Vector3})
  langs:
  - csharp
  - vb
  name: Vector3Extensions
  nameWithType: Vector3Extensions
  fullName: Elements.Geometry.Vector3Extensions
  type: Class
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Vector3Extensions
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 487
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nExtension methods for Vector3.\n"
  example: []
  syntax:
    content: public static class Vector3Extensions
    content.vb: Public Module Vector3Extensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Elements.Geometry.Vector3Extensions.AreCoplanar(System.Collections.Generic.IList{Elements.Geometry.Vector3})
  commentId: M:Elements.Geometry.Vector3Extensions.AreCoplanar(System.Collections.Generic.IList{Elements.Geometry.Vector3})
  id: AreCoplanar(System.Collections.Generic.IList{Elements.Geometry.Vector3})
  isExtensionMethod: true
  parent: Elements.Geometry.Vector3Extensions
  langs:
  - csharp
  - vb
  name: AreCoplanar(IList<Vector3>)
  nameWithType: Vector3Extensions.AreCoplanar(IList<Vector3>)
  fullName: Elements.Geometry.Vector3Extensions.AreCoplanar(System.Collections.Generic.IList<Elements.Geometry.Vector3>)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: AreCoplanar
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 493
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nAre the provided points on the same plane?\n"
  example: []
  syntax:
    content: public static bool AreCoplanar(this IList<Vector3> points)
    parameters:
    - id: points
      type: System.Collections.Generic.IList{Elements.Geometry.Vector3}
      description: ''
    return:
      type: System.Boolean
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AreCoplanar(points As IList(Of Vector3)) As Boolean
  overload: Elements.Geometry.Vector3Extensions.AreCoplanar*
  nameWithType.vb: Vector3Extensions.AreCoplanar(IList(Of Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Elements.Geometry.Vector3Extensions.AreCoplanar(System.Collections.Generic.IList(Of Elements.Geometry.Vector3))
  name.vb: AreCoplanar(IList(Of Vector3))
- uid: Elements.Geometry.Vector3Extensions.Average(System.Collections.Generic.IList{Elements.Geometry.Vector3})
  commentId: M:Elements.Geometry.Vector3Extensions.Average(System.Collections.Generic.IList{Elements.Geometry.Vector3})
  id: Average(System.Collections.Generic.IList{Elements.Geometry.Vector3})
  isExtensionMethod: true
  parent: Elements.Geometry.Vector3Extensions
  langs:
  - csharp
  - vb
  name: Average(IList<Vector3>)
  nameWithType: Vector3Extensions.Average(IList<Vector3>)
  fullName: Elements.Geometry.Vector3Extensions.Average(System.Collections.Generic.IList<Elements.Geometry.Vector3>)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Average
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 521
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nFind the average of a collection of Vector3.\n"
  example: []
  syntax:
    content: public static Vector3 Average(this IList<Vector3> points)
    parameters:
    - id: points
      type: System.Collections.Generic.IList{Elements.Geometry.Vector3}
      description: The Vector3 collection to average.
    return:
      type: Elements.Geometry.Vector3
      description: A Vector3 representing the average.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(points As IList(Of Vector3)) As Vector3
  overload: Elements.Geometry.Vector3Extensions.Average*
  nameWithType.vb: Vector3Extensions.Average(IList(Of Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Elements.Geometry.Vector3Extensions.Average(System.Collections.Generic.IList(Of Elements.Geometry.Vector3))
  name.vb: Average(IList(Of Vector3))
- uid: Elements.Geometry.Vector3Extensions.Shrink(Elements.Geometry.Vector3[],System.Double)
  commentId: M:Elements.Geometry.Vector3Extensions.Shrink(Elements.Geometry.Vector3[],System.Double)
  id: Shrink(Elements.Geometry.Vector3[],System.Double)
  isExtensionMethod: true
  parent: Elements.Geometry.Vector3Extensions
  langs:
  - csharp
  - vb
  name: Shrink(Vector3[], Double)
  nameWithType: Vector3Extensions.Shrink(Vector3[], Double)
  fullName: Elements.Geometry.Vector3Extensions.Shrink(Elements.Geometry.Vector3[], System.Double)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Shrink
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 539
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nShrink a collection of Vector3 towards their average.\n"
  example: []
  syntax:
    content: public static Vector3[] Shrink(this Vector3[] points, double distance)
    parameters:
    - id: points
      type: Elements.Geometry.Vector3[]
      description: The collection of Vector3 to shrink.
    - id: distance
      type: System.Double
      description: The distance to shrink along the vector to average.
    return:
      type: Elements.Geometry.Vector3[]
      description: ''
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Shrink(points As Vector3(), distance As Double) As Vector3()
  overload: Elements.Geometry.Vector3Extensions.Shrink*
  nameWithType.vb: Vector3Extensions.Shrink(Vector3(), Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Elements.Geometry.Vector3Extensions.Shrink(Elements.Geometry.Vector3(), System.Double)
  name.vb: Shrink(Vector3(), Double)
- uid: Elements.Geometry.Vector3Extensions.ToArray(System.Collections.Generic.IList{Elements.Geometry.Vector3})
  commentId: M:Elements.Geometry.Vector3Extensions.ToArray(System.Collections.Generic.IList{Elements.Geometry.Vector3})
  id: ToArray(System.Collections.Generic.IList{Elements.Geometry.Vector3})
  isExtensionMethod: true
  parent: Elements.Geometry.Vector3Extensions
  langs:
  - csharp
  - vb
  name: ToArray(IList<Vector3>)
  nameWithType: Vector3Extensions.ToArray(IList<Vector3>)
  fullName: Elements.Geometry.Vector3Extensions.ToArray(System.Collections.Generic.IList<Elements.Geometry.Vector3>)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: ToArray
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 556
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConvert a collection of Vector3 to a flat array of double.\n"
  example: []
  syntax:
    content: public static double[] ToArray(this IList<Vector3> points)
    parameters:
    - id: points
      type: System.Collections.Generic.IList{Elements.Geometry.Vector3}
      description: The collection of Vector3 to convert.
    return:
      type: System.Double[]
      description: An array containing x,y,z,x1,y1,z1,x2,y2,z2,...
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToArray(points As IList(Of Vector3)) As Double()
  overload: Elements.Geometry.Vector3Extensions.ToArray*
  nameWithType.vb: Vector3Extensions.ToArray(IList(Of Vector3))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Elements.Geometry.Vector3Extensions.ToArray(System.Collections.Generic.IList(Of Elements.Geometry.Vector3))
  name.vb: ToArray(IList(Of Vector3))
references:
- uid: Elements.Geometry
  commentId: N:Elements.Geometry
  name: Elements.Geometry
  nameWithType: Elements.Geometry
  fullName: Elements.Geometry
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Elements.Geometry.Vector3Extensions.AreCoplanar*
  commentId: Overload:Elements.Geometry.Vector3Extensions.AreCoplanar
  name: AreCoplanar
  nameWithType: Vector3Extensions.AreCoplanar
  fullName: Elements.Geometry.Vector3Extensions.AreCoplanar
- uid: System.Collections.Generic.IList{Elements.Geometry.Vector3}
  commentId: T:System.Collections.Generic.IList{Elements.Geometry.Vector3}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Vector3>
  nameWithType: IList<Vector3>
  fullName: System.Collections.Generic.IList<Elements.Geometry.Vector3>
  nameWithType.vb: IList(Of Vector3)
  fullName.vb: System.Collections.Generic.IList(Of Elements.Geometry.Vector3)
  name.vb: IList(Of Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Elements.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Elements.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Elements.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Elements.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Elements.Geometry.Vector3Extensions.Average*
  commentId: Overload:Elements.Geometry.Vector3Extensions.Average
  name: Average
  nameWithType: Vector3Extensions.Average
  fullName: Elements.Geometry.Vector3Extensions.Average
- uid: Elements.Geometry.Vector3
  commentId: T:Elements.Geometry.Vector3
  parent: Elements.Geometry
  name: Vector3
  nameWithType: Vector3
  fullName: Elements.Geometry.Vector3
- uid: Elements.Geometry.Vector3Extensions.Shrink*
  commentId: Overload:Elements.Geometry.Vector3Extensions.Shrink
  name: Shrink
  nameWithType: Vector3Extensions.Shrink
  fullName: Elements.Geometry.Vector3Extensions.Shrink
- uid: Elements.Geometry.Vector3[]
  isExternal: true
  name: Vector3[]
  nameWithType: Vector3[]
  fullName: Elements.Geometry.Vector3[]
  nameWithType.vb: Vector3()
  fullName.vb: Elements.Geometry.Vector3()
  name.vb: Vector3()
  spec.csharp:
  - uid: Elements.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Elements.Geometry.Vector3
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Elements.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Elements.Geometry.Vector3
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Elements.Geometry.Vector3Extensions.ToArray*
  commentId: Overload:Elements.Geometry.Vector3Extensions.ToArray
  name: ToArray
  nameWithType: Vector3Extensions.ToArray
  fullName: Elements.Geometry.Vector3Extensions.ToArray
- uid: System.Double[]
  isExternal: true
  name: Double[]
  nameWithType: Double[]
  fullName: System.Double[]
  nameWithType.vb: Double()
  fullName.vb: System.Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
