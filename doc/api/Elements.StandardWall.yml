### YamlMime:ManagedReference
items:
- uid: Elements.StandardWall
  commentId: T:Elements.StandardWall
  id: StandardWall
  parent: Elements
  children:
  - Elements.StandardWall.#ctor(Elements.Geometry.Line,Elements.WallType,System.Double,System.Collections.Generic.List{Elements.Opening},Elements.Geometry.Transform)
  - Elements.StandardWall.BothSides
  - Elements.StandardWall.CenterLine
  - Elements.StandardWall.Openings
  langs:
  - csharp
  - vb
  name: StandardWall
  nameWithType: StandardWall
  fullName: Elements.StandardWall
  type: Class
  source:
    remote:
      path: src/Elements/StandardWall.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: StandardWall
    path: ../src/Elements/StandardWall.cs
    startLine: 11
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nA wall defined by a planar curve, a height, and a thickness.\n"
  example: []
  syntax:
    content: 'public class StandardWall : Wall, IElement, IIdentifiable, ITransformable, IPropertySet, IElementType<WallType>, ISolid, IExtrude, IProfile, IHasOpenings'
    content.vb: >-
      Public Class StandardWall
          Inherits Wall
          Implements IElement, IIdentifiable, ITransformable, IPropertySet, IElementType(Of WallType), ISolid, IExtrude, IProfile, IHasOpenings
  inheritance:
  - System.Object
  - Elements.Element
  - Elements.Wall
  implements:
  - Elements.Interfaces.IElement
  - Elements.Interfaces.IIdentifiable
  - Elements.Geometry.Interfaces.ITransformable
  - Elements.Interfaces.IPropertySet
  - Elements.Interfaces.IElementType{Elements.WallType}
  - Elements.Geometry.Interfaces.ISolid
  - Elements.Geometry.Interfaces.IExtrude
  - Elements.Geometry.Interfaces.IProfile
  - Hypar.Elements.Interfaces.IHasOpenings
  inheritedMembers:
  - Elements.Wall.Height
  - Elements.Wall.ElementType
  - Elements.Wall.Geometry
  - Elements.Wall.ExtrudeDirection
  - Elements.Wall.ExtrudeDepth
  - Elements.Wall.Profile
  - Elements.Wall.Thickness
  - Elements.Element.Id
  - Elements.Element.Type
  - Elements.Element.Properties
  - Elements.Element.Transform
  - Elements.Element.Name
  - Elements.Element.AddProperty(System.String,Elements.Interfaces.IProperty)
  - Elements.Element.RemoveProperty(System.String)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Elements.StandardWall.CenterLine
  commentId: P:Elements.StandardWall.CenterLine
  id: CenterLine
  parent: Elements.StandardWall
  langs:
  - csharp
  - vb
  name: CenterLine
  nameWithType: StandardWall.CenterLine
  fullName: Elements.StandardWall.CenterLine
  type: Property
  source:
    remote:
      path: src/Elements/StandardWall.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: CenterLine
    path: ../src/Elements/StandardWall.cs
    startLine: 16
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nThe center line of the wall.\n"
  example: []
  syntax:
    content: public Line CenterLine { get; }
    parameters: []
    return:
      type: Elements.Geometry.Line
    content.vb: Public ReadOnly Property CenterLine As Line
  overload: Elements.StandardWall.CenterLine*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.StandardWall.Openings
  commentId: P:Elements.StandardWall.Openings
  id: Openings
  parent: Elements.StandardWall
  langs:
  - csharp
  - vb
  name: Openings
  nameWithType: StandardWall.Openings
  fullName: Elements.StandardWall.Openings
  type: Property
  source:
    remote:
      path: src/Elements/StandardWall.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Openings
    path: ../src/Elements/StandardWall.cs
    startLine: 21
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nAn array of openings in the wall.\n"
  example: []
  syntax:
    content: public List<Opening> Openings { get; protected set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Elements.Opening}
    content.vb: Public Property Openings As List(Of Opening)
  overload: Elements.StandardWall.Openings*
  implements:
  - Hypar.Elements.Interfaces.IHasOpenings.Openings
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Elements.StandardWall.BothSides
  commentId: P:Elements.StandardWall.BothSides
  id: BothSides
  parent: Elements.StandardWall
  langs:
  - csharp
  - vb
  name: BothSides
  nameWithType: StandardWall.BothSides
  fullName: Elements.StandardWall.BothSides
  type: Property
  source:
    remote:
      path: src/Elements/StandardWall.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: BothSides
    path: ../src/Elements/StandardWall.cs
    startLine: 26
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nExtrude to both sides?\n"
  example: []
  syntax:
    content: public override bool BothSides { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overrides ReadOnly Property BothSides As Boolean
  overridden: Elements.Wall.BothSides
  overload: Elements.StandardWall.BothSides*
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: Elements.StandardWall.#ctor(Elements.Geometry.Line,Elements.WallType,System.Double,System.Collections.Generic.List{Elements.Opening},Elements.Geometry.Transform)
  commentId: M:Elements.StandardWall.#ctor(Elements.Geometry.Line,Elements.WallType,System.Double,System.Collections.Generic.List{Elements.Opening},Elements.Geometry.Transform)
  id: '#ctor(Elements.Geometry.Line,Elements.WallType,System.Double,System.Collections.Generic.List{Elements.Opening},Elements.Geometry.Transform)'
  parent: Elements.StandardWall
  langs:
  - csharp
  - vb
  name: StandardWall(Line, WallType, Double, List<Opening>, Transform)
  nameWithType: StandardWall.StandardWall(Line, WallType, Double, List<Opening>, Transform)
  fullName: Elements.StandardWall.StandardWall(Elements.Geometry.Line, Elements.WallType, System.Double, System.Collections.Generic.List<Elements.Opening>, Elements.Geometry.Transform)
  type: Constructor
  source:
    remote:
      path: src/Elements/StandardWall.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/StandardWall.cs
    startLine: 39
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nConstruct a wall along a line.\n"
  example: []
  syntax:
    content: public StandardWall(Line centerLine, WallType elementType, double height, List<Opening> openings = null, Transform transform = null)
    parameters:
    - id: centerLine
      type: Elements.Geometry.Line
      description: The center line of the wall.
    - id: elementType
      type: Elements.WallType
      description: The wall type of the wall.
    - id: height
      type: System.Double
      description: The height of the wall.
    - id: openings
      type: System.Collections.Generic.List{Elements.Opening}
      description: A collection of Openings in the wall.
    - id: transform
      type: Elements.Geometry.Transform
      description: >-
        The transform of the wall.

        This transform will be concatenated to the transform created to describe the wall in 2D.
    content.vb: Public Sub New(centerLine As Line, elementType As WallType, height As Double, openings As List(Of Opening) = Nothing, transform As Transform = Nothing)
  overload: Elements.StandardWall.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when the height of the wall is less than or equal to zero.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when the Z components of wall&apos;s start and end points are not the same.
  nameWithType.vb: StandardWall.StandardWall(Line, WallType, Double, List(Of Opening), Transform)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Elements.StandardWall.StandardWall(Elements.Geometry.Line, Elements.WallType, System.Double, System.Collections.Generic.List(Of Elements.Opening), Elements.Geometry.Transform)
  name.vb: StandardWall(Line, WallType, Double, List(Of Opening), Transform)
references:
- uid: Elements
  commentId: N:Elements
  name: Elements
  nameWithType: Elements
  fullName: Elements
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Elements.Element
  commentId: T:Elements.Element
  parent: Elements
  name: Element
  nameWithType: Element
  fullName: Elements.Element
- uid: Elements.Wall
  commentId: T:Elements.Wall
  parent: Elements
  name: Wall
  nameWithType: Wall
  fullName: Elements.Wall
- uid: Elements.Interfaces.IElement
  commentId: T:Elements.Interfaces.IElement
  parent: Elements.Interfaces
  name: IElement
  nameWithType: IElement
  fullName: Elements.Interfaces.IElement
- uid: Elements.Interfaces.IIdentifiable
  commentId: T:Elements.Interfaces.IIdentifiable
  parent: Elements.Interfaces
  name: IIdentifiable
  nameWithType: IIdentifiable
  fullName: Elements.Interfaces.IIdentifiable
- uid: Elements.Geometry.Interfaces.ITransformable
  commentId: T:Elements.Geometry.Interfaces.ITransformable
  parent: Elements.Geometry.Interfaces
  name: ITransformable
  nameWithType: ITransformable
  fullName: Elements.Geometry.Interfaces.ITransformable
- uid: Elements.Interfaces.IPropertySet
  commentId: T:Elements.Interfaces.IPropertySet
  parent: Elements.Interfaces
  name: IPropertySet
  nameWithType: IPropertySet
  fullName: Elements.Interfaces.IPropertySet
- uid: Elements.Interfaces.IElementType{Elements.WallType}
  commentId: T:Elements.Interfaces.IElementType{Elements.WallType}
  parent: Elements.Interfaces
  definition: Elements.Interfaces.IElementType`1
  name: IElementType<WallType>
  nameWithType: IElementType<WallType>
  fullName: Elements.Interfaces.IElementType<Elements.WallType>
  nameWithType.vb: IElementType(Of WallType)
  fullName.vb: Elements.Interfaces.IElementType(Of Elements.WallType)
  name.vb: IElementType(Of WallType)
  spec.csharp:
  - uid: Elements.Interfaces.IElementType`1
    name: IElementType
    nameWithType: IElementType
    fullName: Elements.Interfaces.IElementType
  - name: <
    nameWithType: <
    fullName: <
  - uid: Elements.WallType
    name: WallType
    nameWithType: WallType
    fullName: Elements.WallType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Elements.Interfaces.IElementType`1
    name: IElementType
    nameWithType: IElementType
    fullName: Elements.Interfaces.IElementType
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Elements.WallType
    name: WallType
    nameWithType: WallType
    fullName: Elements.WallType
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Interfaces.ISolid
  commentId: T:Elements.Geometry.Interfaces.ISolid
  parent: Elements.Geometry.Interfaces
  name: ISolid
  nameWithType: ISolid
  fullName: Elements.Geometry.Interfaces.ISolid
- uid: Elements.Geometry.Interfaces.IExtrude
  commentId: T:Elements.Geometry.Interfaces.IExtrude
  parent: Elements.Geometry.Interfaces
  name: IExtrude
  nameWithType: IExtrude
  fullName: Elements.Geometry.Interfaces.IExtrude
- uid: Elements.Geometry.Interfaces.IProfile
  commentId: T:Elements.Geometry.Interfaces.IProfile
  parent: Elements.Geometry.Interfaces
  name: IProfile
  nameWithType: IProfile
  fullName: Elements.Geometry.Interfaces.IProfile
- uid: Hypar.Elements.Interfaces.IHasOpenings
  commentId: T:Hypar.Elements.Interfaces.IHasOpenings
  parent: Hypar.Elements.Interfaces
  name: IHasOpenings
  nameWithType: IHasOpenings
  fullName: Hypar.Elements.Interfaces.IHasOpenings
- uid: Elements.Wall.Height
  commentId: P:Elements.Wall.Height
  parent: Elements.Wall
  name: Height
  nameWithType: Wall.Height
  fullName: Elements.Wall.Height
- uid: Elements.Wall.ElementType
  commentId: P:Elements.Wall.ElementType
  parent: Elements.Wall
  name: ElementType
  nameWithType: Wall.ElementType
  fullName: Elements.Wall.ElementType
- uid: Elements.Wall.Geometry
  commentId: P:Elements.Wall.Geometry
  parent: Elements.Wall
  name: Geometry
  nameWithType: Wall.Geometry
  fullName: Elements.Wall.Geometry
- uid: Elements.Wall.ExtrudeDirection
  commentId: P:Elements.Wall.ExtrudeDirection
  parent: Elements.Wall
  name: ExtrudeDirection
  nameWithType: Wall.ExtrudeDirection
  fullName: Elements.Wall.ExtrudeDirection
- uid: Elements.Wall.ExtrudeDepth
  commentId: P:Elements.Wall.ExtrudeDepth
  parent: Elements.Wall
  name: ExtrudeDepth
  nameWithType: Wall.ExtrudeDepth
  fullName: Elements.Wall.ExtrudeDepth
- uid: Elements.Wall.Profile
  commentId: P:Elements.Wall.Profile
  parent: Elements.Wall
  name: Profile
  nameWithType: Wall.Profile
  fullName: Elements.Wall.Profile
- uid: Elements.Wall.Thickness
  commentId: M:Elements.Wall.Thickness
  parent: Elements.Wall
  name: Thickness()
  nameWithType: Wall.Thickness()
  fullName: Elements.Wall.Thickness()
  spec.csharp:
  - uid: Elements.Wall.Thickness
    name: Thickness
    nameWithType: Wall.Thickness
    fullName: Elements.Wall.Thickness
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Wall.Thickness
    name: Thickness
    nameWithType: Wall.Thickness
    fullName: Elements.Wall.Thickness
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Element.Id
  commentId: P:Elements.Element.Id
  parent: Elements.Element
  name: Id
  nameWithType: Element.Id
  fullName: Elements.Element.Id
- uid: Elements.Element.Type
  commentId: P:Elements.Element.Type
  parent: Elements.Element
  name: Type
  nameWithType: Element.Type
  fullName: Elements.Element.Type
- uid: Elements.Element.Properties
  commentId: P:Elements.Element.Properties
  parent: Elements.Element
  name: Properties
  nameWithType: Element.Properties
  fullName: Elements.Element.Properties
- uid: Elements.Element.Transform
  commentId: P:Elements.Element.Transform
  parent: Elements.Element
  name: Transform
  nameWithType: Element.Transform
  fullName: Elements.Element.Transform
- uid: Elements.Element.Name
  commentId: P:Elements.Element.Name
  parent: Elements.Element
  name: Name
  nameWithType: Element.Name
  fullName: Elements.Element.Name
- uid: Elements.Element.AddProperty(System.String,Elements.Interfaces.IProperty)
  commentId: M:Elements.Element.AddProperty(System.String,Elements.Interfaces.IProperty)
  parent: Elements.Element
  isExternal: true
  name: AddProperty(String, IProperty)
  nameWithType: Element.AddProperty(String, IProperty)
  fullName: Elements.Element.AddProperty(System.String, Elements.Interfaces.IProperty)
  spec.csharp:
  - uid: Elements.Element.AddProperty(System.String,Elements.Interfaces.IProperty)
    name: AddProperty
    nameWithType: Element.AddProperty
    fullName: Elements.Element.AddProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Elements.Interfaces.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Elements.Interfaces.IProperty
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Element.AddProperty(System.String,Elements.Interfaces.IProperty)
    name: AddProperty
    nameWithType: Element.AddProperty
    fullName: Elements.Element.AddProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Elements.Interfaces.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Elements.Interfaces.IProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Element.RemoveProperty(System.String)
  commentId: M:Elements.Element.RemoveProperty(System.String)
  parent: Elements.Element
  isExternal: true
  name: RemoveProperty(String)
  nameWithType: Element.RemoveProperty(String)
  fullName: Elements.Element.RemoveProperty(System.String)
  spec.csharp:
  - uid: Elements.Element.RemoveProperty(System.String)
    name: RemoveProperty
    nameWithType: Element.RemoveProperty
    fullName: Elements.Element.RemoveProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Element.RemoveProperty(System.String)
    name: RemoveProperty
    nameWithType: Element.RemoveProperty
    fullName: Elements.Element.RemoveProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Elements.Interfaces
  commentId: N:Elements.Interfaces
  name: Elements.Interfaces
  nameWithType: Elements.Interfaces
  fullName: Elements.Interfaces
- uid: Elements.Geometry.Interfaces
  commentId: N:Elements.Geometry.Interfaces
  name: Elements.Geometry.Interfaces
  nameWithType: Elements.Geometry.Interfaces
  fullName: Elements.Geometry.Interfaces
- uid: Elements.Interfaces.IElementType`1
  commentId: T:Elements.Interfaces.IElementType`1
  name: IElementType<TElementType>
  nameWithType: IElementType<TElementType>
  fullName: Elements.Interfaces.IElementType<TElementType>
  nameWithType.vb: IElementType(Of TElementType)
  fullName.vb: Elements.Interfaces.IElementType(Of TElementType)
  name.vb: IElementType(Of TElementType)
  spec.csharp:
  - uid: Elements.Interfaces.IElementType`1
    name: IElementType
    nameWithType: IElementType
    fullName: Elements.Interfaces.IElementType
  - name: <
    nameWithType: <
    fullName: <
  - name: TElementType
    nameWithType: TElementType
    fullName: TElementType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Elements.Interfaces.IElementType`1
    name: IElementType
    nameWithType: IElementType
    fullName: Elements.Interfaces.IElementType
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TElementType
    nameWithType: TElementType
    fullName: TElementType
  - name: )
    nameWithType: )
    fullName: )
- uid: Hypar.Elements.Interfaces
  commentId: N:Hypar.Elements.Interfaces
  name: Hypar.Elements.Interfaces
  nameWithType: Hypar.Elements.Interfaces
  fullName: Hypar.Elements.Interfaces
- uid: Elements.StandardWall.CenterLine*
  commentId: Overload:Elements.StandardWall.CenterLine
  name: CenterLine
  nameWithType: StandardWall.CenterLine
  fullName: Elements.StandardWall.CenterLine
- uid: Elements.Geometry.Line
  commentId: T:Elements.Geometry.Line
  parent: Elements.Geometry
  name: Line
  nameWithType: Line
  fullName: Elements.Geometry.Line
- uid: Elements.Geometry
  commentId: N:Elements.Geometry
  name: Elements.Geometry
  nameWithType: Elements.Geometry
  fullName: Elements.Geometry
- uid: Elements.StandardWall.Openings*
  commentId: Overload:Elements.StandardWall.Openings
  name: Openings
  nameWithType: StandardWall.Openings
  fullName: Elements.StandardWall.Openings
- uid: Hypar.Elements.Interfaces.IHasOpenings.Openings
  commentId: P:Hypar.Elements.Interfaces.IHasOpenings.Openings
  parent: Hypar.Elements.Interfaces.IHasOpenings
  name: Openings
  nameWithType: IHasOpenings.Openings
  fullName: Hypar.Elements.Interfaces.IHasOpenings.Openings
- uid: System.Collections.Generic.List{Elements.Opening}
  commentId: T:System.Collections.Generic.List{Elements.Opening}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Opening>
  nameWithType: List<Opening>
  fullName: System.Collections.Generic.List<Elements.Opening>
  nameWithType.vb: List(Of Opening)
  fullName.vb: System.Collections.Generic.List(Of Elements.Opening)
  name.vb: List(Of Opening)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Elements.Opening
    name: Opening
    nameWithType: Opening
    fullName: Elements.Opening
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Elements.Opening
    name: Opening
    nameWithType: Opening
    fullName: Elements.Opening
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Elements.Wall.BothSides
  commentId: P:Elements.Wall.BothSides
  parent: Elements.Wall
  name: BothSides
  nameWithType: Wall.BothSides
  fullName: Elements.Wall.BothSides
- uid: Elements.StandardWall.BothSides*
  commentId: Overload:Elements.StandardWall.BothSides
  name: BothSides
  nameWithType: StandardWall.BothSides
  fullName: Elements.StandardWall.BothSides
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: Elements.StandardWall.#ctor*
  commentId: Overload:Elements.StandardWall.#ctor
  name: StandardWall
  nameWithType: StandardWall.StandardWall
  fullName: Elements.StandardWall.StandardWall
- uid: Elements.WallType
  commentId: T:Elements.WallType
  parent: Elements
  name: WallType
  nameWithType: WallType
  fullName: Elements.WallType
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Elements.Geometry.Transform
  commentId: T:Elements.Geometry.Transform
  parent: Elements.Geometry
  name: Transform
  nameWithType: Transform
  fullName: Elements.Geometry.Transform
