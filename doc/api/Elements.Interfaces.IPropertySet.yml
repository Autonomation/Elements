### YamlMime:ManagedReference
items:
- uid: Elements.Interfaces.IPropertySet
  commentId: T:Elements.Interfaces.IPropertySet
  id: IPropertySet
  parent: Elements.Interfaces
  children:
  - Elements.Interfaces.IPropertySet.Properties
  langs:
  - csharp
  - vb
  name: IPropertySet
  nameWithType: IPropertySet
  fullName: Elements.Interfaces.IPropertySet
  type: Interface
  source:
    remote:
      path: src/Elements/Interfaces/IPropertySet.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: IPropertySet
    path: ../src/Elements/Interfaces/IPropertySet.cs
    startLine: 20
  assemblies:
  - Hypar.Elements
  namespace: Elements.Interfaces
  syntax:
    content: public interface IPropertySet
    content.vb: Public Interface IPropertySet
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Elements.Interfaces.IPropertySet.Properties
  commentId: P:Elements.Interfaces.IPropertySet.Properties
  id: Properties
  parent: Elements.Interfaces.IPropertySet
  langs:
  - csharp
  - vb
  name: Properties
  nameWithType: IPropertySet.Properties
  fullName: Elements.Interfaces.IPropertySet.Properties
  type: Property
  source:
    remote:
      path: src/Elements/Interfaces/IPropertySet.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Properties
    path: ../src/Elements/Interfaces/IPropertySet.cs
    startLine: 22
  assemblies:
  - Hypar.Elements
  namespace: Elements.Interfaces
  syntax:
    content: Dictionary<string, IProperty> Properties { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.String,Elements.Interfaces.IProperty}
    content.vb: ReadOnly Property Properties As Dictionary(Of String, IProperty)
  overload: Elements.Interfaces.IPropertySet.Properties*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Elements.Interfaces
  commentId: N:Elements.Interfaces
  name: Elements.Interfaces
  nameWithType: Elements.Interfaces
  fullName: Elements.Interfaces
- uid: Elements.Interfaces.IPropertySet.Properties*
  commentId: Overload:Elements.Interfaces.IPropertySet.Properties
  name: Properties
  nameWithType: IPropertySet.Properties
  fullName: Elements.Interfaces.IPropertySet.Properties
- uid: System.Collections.Generic.Dictionary{System.String,Elements.Interfaces.IProperty}
  commentId: T:System.Collections.Generic.Dictionary{System.String,Elements.Interfaces.IProperty}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, IProperty>
  nameWithType: Dictionary<String, IProperty>
  fullName: System.Collections.Generic.Dictionary<System.String, Elements.Interfaces.IProperty>
  nameWithType.vb: Dictionary(Of String, IProperty)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, Elements.Interfaces.IProperty)
  name.vb: Dictionary(Of String, IProperty)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Elements.Interfaces.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Elements.Interfaces.IProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Elements.Interfaces.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Elements.Interfaces.IProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
