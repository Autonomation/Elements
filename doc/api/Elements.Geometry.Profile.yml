### YamlMime:ManagedReference
items:
- uid: Elements.Geometry.Profile
  commentId: T:Elements.Geometry.Profile
  id: Profile
  parent: Elements.Geometry
  children:
  - Elements.Geometry.Profile.#ctor(Elements.Geometry.Polygon,Elements.Geometry.Polygon,System.String)
  - Elements.Geometry.Profile.#ctor(Elements.Geometry.Polygon,Elements.Geometry.Polygon[],System.String)
  - Elements.Geometry.Profile.#ctor(Elements.Geometry.Polygon,System.String)
  - Elements.Geometry.Profile.#ctor(System.String)
  - Elements.Geometry.Profile.Area
  - Elements.Geometry.Profile.Id
  - Elements.Geometry.Profile.Name
  - Elements.Geometry.Profile.Perimeter
  - Elements.Geometry.Profile.Reversed
  - Elements.Geometry.Profile.Voids
  langs:
  - csharp
  - vb
  name: Profile
  nameWithType: Profile
  fullName: Elements.Geometry.Profile
  type: Class
  source:
    remote:
      path: src/Elements/Geometry/Profile.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Profile
    path: ../src/Elements/Geometry/Profile.cs
    startLine: 51
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nA Profile describes a polygonal perimeter\nwith zero or more polygonal voids.\n"
  example: []
  syntax:
    content: 'public class Profile : IIdentifiable'
    content.vb: >-
      Public Class Profile
          Implements IIdentifiable
  inheritance:
  - System.Object
  derivedClasses:
  - Elements.Geometry.Profiles.HSSPipeProfile
  - Elements.Geometry.Profiles.WideFlangeProfile
  implements:
  - Elements.Interfaces.IIdentifiable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Elements.Geometry.Profile.Id
  commentId: P:Elements.Geometry.Profile.Id
  id: Id
  parent: Elements.Geometry.Profile
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: Profile.Id
  fullName: Elements.Geometry.Profile.Id
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Profile.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Id
    path: ../src/Elements/Geometry/Profile.cs
    startLine: 59
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe identifier of the Profile.\n"
  example: []
  syntax:
    content: public long Id { get; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public ReadOnly Property Id As Long
  overload: Elements.Geometry.Profile.Id*
  implements:
  - Elements.Interfaces.IIdentifiable.Id
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Geometry.Profile.Name
  commentId: P:Elements.Geometry.Profile.Name
  id: Name
  parent: Elements.Geometry.Profile
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Profile.Name
  fullName: Elements.Geometry.Profile.Name
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Profile.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Name
    path: ../src/Elements/Geometry/Profile.cs
    startLine: 64
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe name of the Profile.\n"
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Elements.Geometry.Profile.Name*
  implements:
  - Elements.Interfaces.IIdentifiable.Name
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Geometry.Profile.Perimeter
  commentId: P:Elements.Geometry.Profile.Perimeter
  id: Perimeter
  parent: Elements.Geometry.Profile
  langs:
  - csharp
  - vb
  name: Perimeter
  nameWithType: Profile.Perimeter
  fullName: Elements.Geometry.Profile.Perimeter
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Profile.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Perimeter
    path: ../src/Elements/Geometry/Profile.cs
    startLine: 69
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe perimeter of the Profile.\n"
  example: []
  syntax:
    content: public Polygon Perimeter { get; protected set; }
    parameters: []
    return:
      type: Elements.Geometry.Polygon
    content.vb: Public Property Perimeter As Polygon
  overload: Elements.Geometry.Profile.Perimeter*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Elements.Geometry.Profile.Voids
  commentId: P:Elements.Geometry.Profile.Voids
  id: Voids
  parent: Elements.Geometry.Profile
  langs:
  - csharp
  - vb
  name: Voids
  nameWithType: Profile.Voids
  fullName: Elements.Geometry.Profile.Voids
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Profile.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Voids
    path: ../src/Elements/Geometry/Profile.cs
    startLine: 74
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nA collection of Polygons representing voids in the Profile.\n"
  example: []
  syntax:
    content: public Polygon[] Voids { get; protected set; }
    parameters: []
    return:
      type: Elements.Geometry.Polygon[]
    content.vb: Public Property Voids As Polygon()
  overload: Elements.Geometry.Profile.Voids*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Elements.Geometry.Profile.#ctor(Elements.Geometry.Polygon,Elements.Geometry.Polygon[],System.String)
  commentId: M:Elements.Geometry.Profile.#ctor(Elements.Geometry.Polygon,Elements.Geometry.Polygon[],System.String)
  id: '#ctor(Elements.Geometry.Polygon,Elements.Geometry.Polygon[],System.String)'
  parent: Elements.Geometry.Profile
  langs:
  - csharp
  - vb
  name: Profile(Polygon, Polygon[], String)
  nameWithType: Profile.Profile(Polygon, Polygon[], String)
  fullName: Elements.Geometry.Profile.Profile(Elements.Geometry.Polygon, Elements.Geometry.Polygon[], System.String)
  type: Constructor
  source:
    remote:
      path: src/Elements/Geometry/Profile.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Geometry/Profile.cs
    startLine: 82
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConstruct a Profile.\n"
  example: []
  syntax:
    content: >-
      [JsonConstructor]

      public Profile(Polygon perimeter, Polygon[] voids, string name = null)
    parameters:
    - id: perimeter
      type: Elements.Geometry.Polygon
      description: The perimeter of the Profile.
    - id: voids
      type: Elements.Geometry.Polygon[]
      description: A collection of Polygons representing voids in the Profile.
    - id: name
      type: System.String
      description: The name of the Profile.
    content.vb: >-
      <JsonConstructor>

      Public Sub New(perimeter As Polygon, voids As Polygon(), name As String = Nothing)
  overload: Elements.Geometry.Profile.#ctor*
  attributes:
  - type: Newtonsoft.Json.JsonConstructorAttribute
    ctor: Newtonsoft.Json.JsonConstructorAttribute.#ctor
    arguments: []
  nameWithType.vb: Profile.Profile(Polygon, Polygon(), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Elements.Geometry.Profile.Profile(Elements.Geometry.Polygon, Elements.Geometry.Polygon(), System.String)
  name.vb: Profile(Polygon, Polygon(), String)
- uid: Elements.Geometry.Profile.#ctor(Elements.Geometry.Polygon,System.String)
  commentId: M:Elements.Geometry.Profile.#ctor(Elements.Geometry.Polygon,System.String)
  id: '#ctor(Elements.Geometry.Polygon,System.String)'
  parent: Elements.Geometry.Profile
  langs:
  - csharp
  - vb
  name: Profile(Polygon, String)
  nameWithType: Profile.Profile(Polygon, String)
  fullName: Elements.Geometry.Profile.Profile(Elements.Geometry.Polygon, System.String)
  type: Constructor
  source:
    remote:
      path: src/Elements/Geometry/Profile.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Geometry/Profile.cs
    startLine: 105
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConstruct a Profile.\n"
  example: []
  syntax:
    content: public Profile(Polygon perimeter, string name = null)
    parameters:
    - id: perimeter
      type: Elements.Geometry.Polygon
      description: The perimeter of the Profile
    - id: name
      type: System.String
      description: The name of the Profile.
    content.vb: Public Sub New(perimeter As Polygon, name As String = Nothing)
  overload: Elements.Geometry.Profile.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Profile.#ctor(Elements.Geometry.Polygon,Elements.Geometry.Polygon,System.String)
  commentId: M:Elements.Geometry.Profile.#ctor(Elements.Geometry.Polygon,Elements.Geometry.Polygon,System.String)
  id: '#ctor(Elements.Geometry.Polygon,Elements.Geometry.Polygon,System.String)'
  parent: Elements.Geometry.Profile
  langs:
  - csharp
  - vb
  name: Profile(Polygon, Polygon, String)
  nameWithType: Profile.Profile(Polygon, Polygon, String)
  fullName: Elements.Geometry.Profile.Profile(Elements.Geometry.Polygon, Elements.Geometry.Polygon, System.String)
  type: Constructor
  source:
    remote:
      path: src/Elements/Geometry/Profile.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Geometry/Profile.cs
    startLine: 122
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConstruct a Profile.\n"
  example: []
  syntax:
    content: public Profile(Polygon perimeter, Polygon singleVoid, string name = null)
    parameters:
    - id: perimeter
      type: Elements.Geometry.Polygon
      description: The perimeter of the Profile.
    - id: singleVoid
      type: Elements.Geometry.Polygon
      description: A void in the Profile.
    - id: name
      type: System.String
      description: The name of the Profile.
    content.vb: Public Sub New(perimeter As Polygon, singleVoid As Polygon, name As String = Nothing)
  overload: Elements.Geometry.Profile.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Profile.Reversed
  commentId: M:Elements.Geometry.Profile.Reversed
  id: Reversed
  parent: Elements.Geometry.Profile
  langs:
  - csharp
  - vb
  name: Reversed()
  nameWithType: Profile.Reversed()
  fullName: Elements.Geometry.Profile.Reversed()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Profile.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Reversed
    path: ../src/Elements/Geometry/Profile.cs
    startLine: 141
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nGet a new Profile which is the reverse of this Profile.\n"
  example: []
  syntax:
    content: public Profile Reversed()
    return:
      type: Elements.Geometry.Profile
    content.vb: Public Function Reversed As Profile
  overload: Elements.Geometry.Profile.Reversed*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Profile.Area
  commentId: M:Elements.Geometry.Profile.Area
  id: Area
  parent: Elements.Geometry.Profile
  langs:
  - csharp
  - vb
  name: Area()
  nameWithType: Profile.Area()
  fullName: Elements.Geometry.Profile.Area()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Profile.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Area
    path: ../src/Elements/Geometry/Profile.cs
    startLine: 158
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe area of the Profile.\n"
  example: []
  syntax:
    content: public double Area()
    return:
      type: System.Double
    content.vb: Public Function Area As Double
  overload: Elements.Geometry.Profile.Area*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Profile.#ctor(System.String)
  commentId: M:Elements.Geometry.Profile.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Elements.Geometry.Profile
  langs:
  - csharp
  - vb
  name: Profile(String)
  nameWithType: Profile.Profile(String)
  fullName: Elements.Geometry.Profile.Profile(System.String)
  type: Constructor
  source:
    remote:
      path: src/Elements/Geometry/Profile.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Geometry/Profile.cs
    startLine: 166
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nDefault constructor for Profile.\n"
  example: []
  syntax:
    content: protected Profile(string name)
    parameters:
    - id: name
      type: System.String
    content.vb: Protected Sub New(name As String)
  overload: Elements.Geometry.Profile.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: Elements.Geometry
  commentId: N:Elements.Geometry
  name: Elements.Geometry
  nameWithType: Elements.Geometry
  fullName: Elements.Geometry
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Elements.Interfaces.IIdentifiable
  commentId: T:Elements.Interfaces.IIdentifiable
  parent: Elements.Interfaces
  name: IIdentifiable
  nameWithType: IIdentifiable
  fullName: Elements.Interfaces.IIdentifiable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Elements.Interfaces
  commentId: N:Elements.Interfaces
  name: Elements.Interfaces
  nameWithType: Elements.Interfaces
  fullName: Elements.Interfaces
- uid: Elements.Geometry.Profile.Id*
  commentId: Overload:Elements.Geometry.Profile.Id
  name: Id
  nameWithType: Profile.Id
  fullName: Elements.Geometry.Profile.Id
- uid: Elements.Interfaces.IIdentifiable.Id
  commentId: P:Elements.Interfaces.IIdentifiable.Id
  parent: Elements.Interfaces.IIdentifiable
  name: Id
  nameWithType: IIdentifiable.Id
  fullName: Elements.Interfaces.IIdentifiable.Id
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Elements.Geometry.Profile.Name*
  commentId: Overload:Elements.Geometry.Profile.Name
  name: Name
  nameWithType: Profile.Name
  fullName: Elements.Geometry.Profile.Name
- uid: Elements.Interfaces.IIdentifiable.Name
  commentId: P:Elements.Interfaces.IIdentifiable.Name
  parent: Elements.Interfaces.IIdentifiable
  name: Name
  nameWithType: IIdentifiable.Name
  fullName: Elements.Interfaces.IIdentifiable.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Elements.Geometry.Profile.Perimeter*
  commentId: Overload:Elements.Geometry.Profile.Perimeter
  name: Perimeter
  nameWithType: Profile.Perimeter
  fullName: Elements.Geometry.Profile.Perimeter
- uid: Elements.Geometry.Polygon
  commentId: T:Elements.Geometry.Polygon
  parent: Elements.Geometry
  name: Polygon
  nameWithType: Polygon
  fullName: Elements.Geometry.Polygon
- uid: Elements.Geometry.Profile.Voids*
  commentId: Overload:Elements.Geometry.Profile.Voids
  name: Voids
  nameWithType: Profile.Voids
  fullName: Elements.Geometry.Profile.Voids
- uid: Elements.Geometry.Polygon[]
  isExternal: true
  name: Polygon[]
  nameWithType: Polygon[]
  fullName: Elements.Geometry.Polygon[]
  nameWithType.vb: Polygon()
  fullName.vb: Elements.Geometry.Polygon()
  name.vb: Polygon()
  spec.csharp:
  - uid: Elements.Geometry.Polygon
    name: Polygon
    nameWithType: Polygon
    fullName: Elements.Geometry.Polygon
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Elements.Geometry.Polygon
    name: Polygon
    nameWithType: Polygon
    fullName: Elements.Geometry.Polygon
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Elements.Geometry.Profile.#ctor*
  commentId: Overload:Elements.Geometry.Profile.#ctor
  name: Profile
  nameWithType: Profile.Profile
  fullName: Elements.Geometry.Profile.Profile
- uid: Elements.Geometry.Profile.Reversed*
  commentId: Overload:Elements.Geometry.Profile.Reversed
  name: Reversed
  nameWithType: Profile.Reversed
  fullName: Elements.Geometry.Profile.Reversed
- uid: Elements.Geometry.Profile
  commentId: T:Elements.Geometry.Profile
  parent: Elements.Geometry
  name: Profile
  nameWithType: Profile
  fullName: Elements.Geometry.Profile
- uid: Elements.Geometry.Profile.Area*
  commentId: Overload:Elements.Geometry.Profile.Area
  name: Area
  nameWithType: Profile.Area
  fullName: Elements.Geometry.Profile.Area
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
