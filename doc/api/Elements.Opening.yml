### YamlMime:ManagedReference
items:
- uid: Elements.Opening
  commentId: T:Elements.Opening
  id: Opening
  parent: Elements
  children:
  - Elements.Opening.#ctor(Elements.Geometry.Polygon,System.Double,Elements.Geometry.Transform)
  - Elements.Opening.#ctor(Elements.Geometry.Polygon,System.Double,System.Double,System.Double)
  - Elements.Opening.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)
  - Elements.Opening.BothSides
  - Elements.Opening.ExtrudeDepth
  - Elements.Opening.ExtrudeDirection
  - Elements.Opening.Profile
  langs:
  - csharp
  - vb
  name: Opening
  nameWithType: Opening
  fullName: Elements.Opening
  type: Class
  source:
    remote:
      path: src/Elements/Opening.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Opening
    path: ../src/Elements/Opening.cs
    startLine: 9
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nA rectangular opening in a wall or floor.\n"
  example: []
  syntax:
    content: 'public class Opening : Element, IElement, IIdentifiable, ITransformable, IPropertySet, IExtrude, IProfile'
    content.vb: >-
      Public Class Opening
          Inherits Element
          Implements IElement, IIdentifiable, ITransformable, IPropertySet, IExtrude, IProfile
  inheritance:
  - System.Object
  - Elements.Element
  implements:
  - Elements.Interfaces.IElement
  - Elements.Interfaces.IIdentifiable
  - Elements.Geometry.Interfaces.ITransformable
  - Elements.Interfaces.IPropertySet
  - Elements.Geometry.Interfaces.IExtrude
  - Elements.Geometry.Interfaces.IProfile
  inheritedMembers:
  - Elements.Element.Id
  - Elements.Element.Type
  - Elements.Element.Properties
  - Elements.Element.Transform
  - Elements.Element.Name
  - Elements.Element.AddProperty(System.String,Elements.Interfaces.IProperty)
  - Elements.Element.RemoveProperty(System.String)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Elements.Opening.Profile
  commentId: P:Elements.Opening.Profile
  id: Profile
  parent: Elements.Opening
  langs:
  - csharp
  - vb
  name: Profile
  nameWithType: Opening.Profile
  fullName: Elements.Opening.Profile
  type: Property
  source:
    remote:
      path: src/Elements/Opening.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Profile
    path: ../src/Elements/Opening.cs
    startLine: 15
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nThe perimeter of the opening.\n"
  example: []
  syntax:
    content: public Profile Profile { get; }
    parameters: []
    return:
      type: Elements.Geometry.Profile
      description: A polygon of Width and Height translated by X and Y.
    content.vb: Public ReadOnly Property Profile As Profile
  overload: Elements.Opening.Profile*
  implements:
  - Elements.Geometry.Interfaces.IProfile.Profile
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Opening.ExtrudeDirection
  commentId: P:Elements.Opening.ExtrudeDirection
  id: ExtrudeDirection
  parent: Elements.Opening
  langs:
  - csharp
  - vb
  name: ExtrudeDirection
  nameWithType: Opening.ExtrudeDirection
  fullName: Elements.Opening.ExtrudeDirection
  type: Property
  source:
    remote:
      path: src/Elements/Opening.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: ExtrudeDirection
    path: ../src/Elements/Opening.cs
    startLine: 20
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nThe extrude direction of the opening.\n"
  example: []
  syntax:
    content: public Vector3 ExtrudeDirection { get; }
    parameters: []
    return:
      type: Elements.Geometry.Vector3
    content.vb: Public ReadOnly Property ExtrudeDirection As Vector3
  overload: Elements.Opening.ExtrudeDirection*
  implements:
  - Elements.Geometry.Interfaces.IExtrude.ExtrudeDirection
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Opening.ExtrudeDepth
  commentId: P:Elements.Opening.ExtrudeDepth
  id: ExtrudeDepth
  parent: Elements.Opening
  langs:
  - csharp
  - vb
  name: ExtrudeDepth
  nameWithType: Opening.ExtrudeDepth
  fullName: Elements.Opening.ExtrudeDepth
  type: Property
  source:
    remote:
      path: src/Elements/Opening.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: ExtrudeDepth
    path: ../src/Elements/Opening.cs
    startLine: 25
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nThe depth of the opening&apos;s extrusion.\n"
  example: []
  syntax:
    content: public double ExtrudeDepth { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property ExtrudeDepth As Double
  overload: Elements.Opening.ExtrudeDepth*
  implements:
  - Elements.Geometry.Interfaces.IExtrude.ExtrudeDepth
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Opening.BothSides
  commentId: P:Elements.Opening.BothSides
  id: BothSides
  parent: Elements.Opening
  langs:
  - csharp
  - vb
  name: BothSides
  nameWithType: Opening.BothSides
  fullName: Elements.Opening.BothSides
  type: Property
  source:
    remote:
      path: src/Elements/Opening.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: BothSides
    path: ../src/Elements/Opening.cs
    startLine: 30
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nExtrude to both sides?\n"
  example: []
  syntax:
    content: public bool BothSides { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property BothSides As Boolean
  overload: Elements.Opening.BothSides*
  implements:
  - Elements.Geometry.Interfaces.IExtrude.BothSides
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Opening.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)
  commentId: M:Elements.Opening.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)
  id: '#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)'
  parent: Elements.Opening
  langs:
  - csharp
  - vb
  name: Opening(Double, Double, Double, Double, Double)
  nameWithType: Opening.Opening(Double, Double, Double, Double, Double)
  fullName: Elements.Opening.Opening(System.Double, System.Double, System.Double, System.Double, System.Double)
  type: Constructor
  source:
    remote:
      path: src/Elements/Opening.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Opening.cs
    startLine: 40
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nCreate a rectangular opening.\n"
  example: []
  syntax:
    content: public Opening(double x, double y, double width, double height, double depth = 5)
    parameters:
    - id: x
      type: System.Double
      description: The distance along the X axis of the transform of the host element to the center of the opening.
    - id: y
      type: System.Double
      description: The distance along the Y axis of the transform of the host element to the center of the opening.
    - id: width
      type: System.Double
      description: The width of the opening.
    - id: height
      type: System.Double
      description: The height of the opening.
    - id: depth
      type: System.Double
      description: The depth of the opening&apos;s extrusion.
    content.vb: Public Sub New(x As Double, y As Double, width As Double, height As Double, depth As Double = 5)
  overload: Elements.Opening.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Opening.#ctor(Elements.Geometry.Polygon,System.Double,System.Double,System.Double)
  commentId: M:Elements.Opening.#ctor(Elements.Geometry.Polygon,System.Double,System.Double,System.Double)
  id: '#ctor(Elements.Geometry.Polygon,System.Double,System.Double,System.Double)'
  parent: Elements.Opening
  langs:
  - csharp
  - vb
  name: Opening(Polygon, Double, Double, Double)
  nameWithType: Opening.Opening(Polygon, Double, Double, Double)
  fullName: Elements.Opening.Opening(Elements.Geometry.Polygon, System.Double, System.Double, System.Double)
  type: Constructor
  source:
    remote:
      path: src/Elements/Opening.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Opening.cs
    startLine: 53
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nCreate a polygonal opening.\n"
  example: []
  syntax:
    content: public Opening(Polygon profile, double x = 0, double y = 0, double depth = 5)
    parameters:
    - id: profile
      type: Elements.Geometry.Polygon
      description: A polygon representing the profile of the opening.
    - id: x
      type: System.Double
      description: The distance along the X axis of the transform of the host element to transform the profile.
    - id: y
      type: System.Double
      description: The distance along the Y axis of the transform of the host element to transform the profile.
    - id: depth
      type: System.Double
      description: The depth of the opening&apos;s extrusion.
    content.vb: Public Sub New(profile As Polygon, x As Double = 0, y As Double = 0, depth As Double = 5)
  overload: Elements.Opening.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Opening.#ctor(Elements.Geometry.Polygon,System.Double,Elements.Geometry.Transform)
  commentId: M:Elements.Opening.#ctor(Elements.Geometry.Polygon,System.Double,Elements.Geometry.Transform)
  id: '#ctor(Elements.Geometry.Polygon,System.Double,Elements.Geometry.Transform)'
  parent: Elements.Opening
  langs:
  - csharp
  - vb
  name: Opening(Polygon, Double, Transform)
  nameWithType: Opening.Opening(Polygon, Double, Transform)
  fullName: Elements.Opening.Opening(Elements.Geometry.Polygon, System.Double, Elements.Geometry.Transform)
  type: Constructor
  source:
    remote:
      path: src/Elements/Opening.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Opening.cs
    startLine: 66
  assemblies:
  - Hypar.Elements
  namespace: Elements
  summary: "\nCreate an opening.\n"
  example: []
  syntax:
    content: public Opening(Polygon profile, double depth, Transform transform = null)
    parameters:
    - id: profile
      type: Elements.Geometry.Polygon
      description: A polygon representing the profile of the opening.
    - id: depth
      type: System.Double
      description: The depth of the opening&apos;s extrusion.
    - id: transform
      type: Elements.Geometry.Transform
      description: An additional transform applied to the opening.
    content.vb: Public Sub New(profile As Polygon, depth As Double, transform As Transform = Nothing)
  overload: Elements.Opening.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Elements
  commentId: N:Elements
  name: Elements
  nameWithType: Elements
  fullName: Elements
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Elements.Element
  commentId: T:Elements.Element
  parent: Elements
  name: Element
  nameWithType: Element
  fullName: Elements.Element
- uid: Elements.Interfaces.IElement
  commentId: T:Elements.Interfaces.IElement
  parent: Elements.Interfaces
  name: IElement
  nameWithType: IElement
  fullName: Elements.Interfaces.IElement
- uid: Elements.Interfaces.IIdentifiable
  commentId: T:Elements.Interfaces.IIdentifiable
  parent: Elements.Interfaces
  name: IIdentifiable
  nameWithType: IIdentifiable
  fullName: Elements.Interfaces.IIdentifiable
- uid: Elements.Geometry.Interfaces.ITransformable
  commentId: T:Elements.Geometry.Interfaces.ITransformable
  parent: Elements.Geometry.Interfaces
  name: ITransformable
  nameWithType: ITransformable
  fullName: Elements.Geometry.Interfaces.ITransformable
- uid: Elements.Interfaces.IPropertySet
  commentId: T:Elements.Interfaces.IPropertySet
  parent: Elements.Interfaces
  name: IPropertySet
  nameWithType: IPropertySet
  fullName: Elements.Interfaces.IPropertySet
- uid: Elements.Geometry.Interfaces.IExtrude
  commentId: T:Elements.Geometry.Interfaces.IExtrude
  parent: Elements.Geometry.Interfaces
  name: IExtrude
  nameWithType: IExtrude
  fullName: Elements.Geometry.Interfaces.IExtrude
- uid: Elements.Geometry.Interfaces.IProfile
  commentId: T:Elements.Geometry.Interfaces.IProfile
  parent: Elements.Geometry.Interfaces
  name: IProfile
  nameWithType: IProfile
  fullName: Elements.Geometry.Interfaces.IProfile
- uid: Elements.Element.Id
  commentId: P:Elements.Element.Id
  parent: Elements.Element
  name: Id
  nameWithType: Element.Id
  fullName: Elements.Element.Id
- uid: Elements.Element.Type
  commentId: P:Elements.Element.Type
  parent: Elements.Element
  name: Type
  nameWithType: Element.Type
  fullName: Elements.Element.Type
- uid: Elements.Element.Properties
  commentId: P:Elements.Element.Properties
  parent: Elements.Element
  name: Properties
  nameWithType: Element.Properties
  fullName: Elements.Element.Properties
- uid: Elements.Element.Transform
  commentId: P:Elements.Element.Transform
  parent: Elements.Element
  name: Transform
  nameWithType: Element.Transform
  fullName: Elements.Element.Transform
- uid: Elements.Element.Name
  commentId: P:Elements.Element.Name
  parent: Elements.Element
  name: Name
  nameWithType: Element.Name
  fullName: Elements.Element.Name
- uid: Elements.Element.AddProperty(System.String,Elements.Interfaces.IProperty)
  commentId: M:Elements.Element.AddProperty(System.String,Elements.Interfaces.IProperty)
  parent: Elements.Element
  isExternal: true
  name: AddProperty(String, IProperty)
  nameWithType: Element.AddProperty(String, IProperty)
  fullName: Elements.Element.AddProperty(System.String, Elements.Interfaces.IProperty)
  spec.csharp:
  - uid: Elements.Element.AddProperty(System.String,Elements.Interfaces.IProperty)
    name: AddProperty
    nameWithType: Element.AddProperty
    fullName: Elements.Element.AddProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Elements.Interfaces.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Elements.Interfaces.IProperty
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Element.AddProperty(System.String,Elements.Interfaces.IProperty)
    name: AddProperty
    nameWithType: Element.AddProperty
    fullName: Elements.Element.AddProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Elements.Interfaces.IProperty
    name: IProperty
    nameWithType: IProperty
    fullName: Elements.Interfaces.IProperty
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Element.RemoveProperty(System.String)
  commentId: M:Elements.Element.RemoveProperty(System.String)
  parent: Elements.Element
  isExternal: true
  name: RemoveProperty(String)
  nameWithType: Element.RemoveProperty(String)
  fullName: Elements.Element.RemoveProperty(System.String)
  spec.csharp:
  - uid: Elements.Element.RemoveProperty(System.String)
    name: RemoveProperty
    nameWithType: Element.RemoveProperty
    fullName: Elements.Element.RemoveProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Element.RemoveProperty(System.String)
    name: RemoveProperty
    nameWithType: Element.RemoveProperty
    fullName: Elements.Element.RemoveProperty
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Elements.Interfaces
  commentId: N:Elements.Interfaces
  name: Elements.Interfaces
  nameWithType: Elements.Interfaces
  fullName: Elements.Interfaces
- uid: Elements.Geometry.Interfaces
  commentId: N:Elements.Geometry.Interfaces
  name: Elements.Geometry.Interfaces
  nameWithType: Elements.Geometry.Interfaces
  fullName: Elements.Geometry.Interfaces
- uid: Elements.Opening.Profile*
  commentId: Overload:Elements.Opening.Profile
  name: Profile
  nameWithType: Opening.Profile
  fullName: Elements.Opening.Profile
- uid: Elements.Geometry.Interfaces.IProfile.Profile
  commentId: P:Elements.Geometry.Interfaces.IProfile.Profile
  parent: Elements.Geometry.Interfaces.IProfile
  name: Profile
  nameWithType: IProfile.Profile
  fullName: Elements.Geometry.Interfaces.IProfile.Profile
- uid: Elements.Geometry.Profile
  commentId: T:Elements.Geometry.Profile
  parent: Elements.Geometry
  name: Profile
  nameWithType: Profile
  fullName: Elements.Geometry.Profile
- uid: Elements.Geometry
  commentId: N:Elements.Geometry
  name: Elements.Geometry
  nameWithType: Elements.Geometry
  fullName: Elements.Geometry
- uid: Elements.Opening.ExtrudeDirection*
  commentId: Overload:Elements.Opening.ExtrudeDirection
  name: ExtrudeDirection
  nameWithType: Opening.ExtrudeDirection
  fullName: Elements.Opening.ExtrudeDirection
- uid: Elements.Geometry.Interfaces.IExtrude.ExtrudeDirection
  commentId: P:Elements.Geometry.Interfaces.IExtrude.ExtrudeDirection
  parent: Elements.Geometry.Interfaces.IExtrude
  name: ExtrudeDirection
  nameWithType: IExtrude.ExtrudeDirection
  fullName: Elements.Geometry.Interfaces.IExtrude.ExtrudeDirection
- uid: Elements.Geometry.Vector3
  commentId: T:Elements.Geometry.Vector3
  parent: Elements.Geometry
  name: Vector3
  nameWithType: Vector3
  fullName: Elements.Geometry.Vector3
- uid: Elements.Opening.ExtrudeDepth*
  commentId: Overload:Elements.Opening.ExtrudeDepth
  name: ExtrudeDepth
  nameWithType: Opening.ExtrudeDepth
  fullName: Elements.Opening.ExtrudeDepth
- uid: Elements.Geometry.Interfaces.IExtrude.ExtrudeDepth
  commentId: P:Elements.Geometry.Interfaces.IExtrude.ExtrudeDepth
  parent: Elements.Geometry.Interfaces.IExtrude
  name: ExtrudeDepth
  nameWithType: IExtrude.ExtrudeDepth
  fullName: Elements.Geometry.Interfaces.IExtrude.ExtrudeDepth
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Elements.Opening.BothSides*
  commentId: Overload:Elements.Opening.BothSides
  name: BothSides
  nameWithType: Opening.BothSides
  fullName: Elements.Opening.BothSides
- uid: Elements.Geometry.Interfaces.IExtrude.BothSides
  commentId: P:Elements.Geometry.Interfaces.IExtrude.BothSides
  parent: Elements.Geometry.Interfaces.IExtrude
  name: BothSides
  nameWithType: IExtrude.BothSides
  fullName: Elements.Geometry.Interfaces.IExtrude.BothSides
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Elements.Opening.#ctor*
  commentId: Overload:Elements.Opening.#ctor
  name: Opening
  nameWithType: Opening.Opening
  fullName: Elements.Opening.Opening
- uid: Elements.Geometry.Polygon
  commentId: T:Elements.Geometry.Polygon
  parent: Elements.Geometry
  name: Polygon
  nameWithType: Polygon
  fullName: Elements.Geometry.Polygon
- uid: Elements.Geometry.Transform
  commentId: T:Elements.Geometry.Transform
  parent: Elements.Geometry
  name: Transform
  nameWithType: Transform
  fullName: Elements.Geometry.Transform
