### YamlMime:ManagedReference
items:
- uid: Elements.Geometry.Vector3
  commentId: T:Elements.Geometry.Vector3
  id: Vector3
  parent: Elements.Geometry
  children:
  - Elements.Geometry.Vector3.#ctor
  - Elements.Geometry.Vector3.#ctor(Elements.Geometry.Vector3)
  - Elements.Geometry.Vector3.#ctor(System.Double,System.Double)
  - Elements.Geometry.Vector3.#ctor(System.Double,System.Double,System.Double)
  - Elements.Geometry.Vector3.AngleTo(Elements.Geometry.Vector3)
  - Elements.Geometry.Vector3.AtNEqualSpacesAlongLine(Elements.Geometry.Line,System.Int32,System.Boolean)
  - Elements.Geometry.Vector3.Average(Elements.Geometry.Vector3)
  - Elements.Geometry.Vector3.CompareTo(Elements.Geometry.Vector3)
  - Elements.Geometry.Vector3.Cross(Elements.Geometry.Vector3)
  - Elements.Geometry.Vector3.DistanceTo(Elements.Geometry.Plane)
  - Elements.Geometry.Vector3.DistanceTo(Elements.Geometry.Vector3)
  - Elements.Geometry.Vector3.Dot(Elements.Geometry.Vector3)
  - Elements.Geometry.Vector3.Equals(Elements.Geometry.Vector3)
  - Elements.Geometry.Vector3.Equals(System.Object)
  - Elements.Geometry.Vector3.GetHashCode
  - Elements.Geometry.Vector3.IsAlmostEqualTo(Elements.Geometry.Vector3)
  - Elements.Geometry.Vector3.IsNaN
  - Elements.Geometry.Vector3.IsParallelTo(Elements.Geometry.Vector3)
  - Elements.Geometry.Vector3.Length
  - Elements.Geometry.Vector3.Negated
  - Elements.Geometry.Vector3.Normalized
  - Elements.Geometry.Vector3.op_Addition(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  - Elements.Geometry.Vector3.op_Division(Elements.Geometry.Vector3,System.Double)
  - Elements.Geometry.Vector3.op_GreaterThan(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  - Elements.Geometry.Vector3.op_LessThan(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  - Elements.Geometry.Vector3.op_Multiply(Elements.Geometry.Vector3,System.Double)
  - Elements.Geometry.Vector3.op_Multiply(System.Double,Elements.Geometry.Vector3)
  - Elements.Geometry.Vector3.op_Subtraction(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  - Elements.Geometry.Vector3.Origin
  - Elements.Geometry.Vector3.Project(Elements.Geometry.Plane)
  - Elements.Geometry.Vector3.ProjectAlong(Elements.Geometry.Vector3,Elements.Geometry.Plane)
  - Elements.Geometry.Vector3.ProjectOnto(Elements.Geometry.Vector3)
  - Elements.Geometry.Vector3.ToArray
  - Elements.Geometry.Vector3.Tolerance
  - Elements.Geometry.Vector3.ToString
  - Elements.Geometry.Vector3.X
  - Elements.Geometry.Vector3.XAxis
  - Elements.Geometry.Vector3.Y
  - Elements.Geometry.Vector3.YAxis
  - Elements.Geometry.Vector3.Z
  - Elements.Geometry.Vector3.ZAxis
  langs:
  - csharp
  - vb
  name: Vector3
  nameWithType: Vector3
  fullName: Elements.Geometry.Vector3
  type: Class
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Vector3
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 9
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nA 3D vector.\n"
  example: []
  syntax:
    content: 'public class Vector3 : IComparable<Vector3>, IEquatable<Vector3>'
    content.vb: >-
      Public Class Vector3
          Implements IComparable(Of Vector3), IEquatable(Of Vector3)
  inheritance:
  - System.Object
  implements:
  - System.IComparable{Elements.Geometry.Vector3}
  - System.IEquatable{Elements.Geometry.Vector3}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Elements.Geometry.Vector3.Tolerance
  commentId: F:Elements.Geometry.Vector3.Tolerance
  id: Tolerance
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Tolerance
  nameWithType: Vector3.Tolerance
  fullName: Elements.Geometry.Vector3.Tolerance
  type: Field
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Tolerance
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 14
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nA tolerance for comparison operations.\n"
  example: []
  syntax:
    content: public static double Tolerance
    return:
      type: System.Double
    content.vb: Public Shared Tolerance As Double
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Elements.Geometry.Vector3.X
  commentId: P:Elements.Geometry.Vector3.X
  id: X
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: X
  nameWithType: Vector3.X
  fullName: Elements.Geometry.Vector3.X
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: X
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 25
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe X component of the vector.\n"
  example: []
  syntax:
    content: public double X { get; }
    parameters: []
    return:
      type: System.Double
      description: ''
    content.vb: Public ReadOnly Property X As Double
  overload: Elements.Geometry.Vector3.X*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Geometry.Vector3.Y
  commentId: P:Elements.Geometry.Vector3.Y
  id: Y
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Y
  nameWithType: Vector3.Y
  fullName: Elements.Geometry.Vector3.Y
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Y
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 31
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe Y component of the vector.\n"
  example: []
  syntax:
    content: public double Y { get; }
    parameters: []
    return:
      type: System.Double
      description: ''
    content.vb: Public ReadOnly Property Y As Double
  overload: Elements.Geometry.Vector3.Y*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Geometry.Vector3.Z
  commentId: P:Elements.Geometry.Vector3.Z
  id: Z
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Z
  nameWithType: Vector3.Z
  fullName: Elements.Geometry.Vector3.Z
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Z
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 37
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe Z component of the vector.\n"
  example: []
  syntax:
    content: public double Z { get; }
    parameters: []
    return:
      type: System.Double
      description: ''
    content.vb: Public ReadOnly Property Z As Double
  overload: Elements.Geometry.Vector3.Z*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Geometry.Vector3.Origin
  commentId: P:Elements.Geometry.Vector3.Origin
  id: Origin
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Origin
  nameWithType: Vector3.Origin
  fullName: Elements.Geometry.Vector3.Origin
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Origin
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 43
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConstruct a vector at the origin.\n"
  example: []
  syntax:
    content: public static Vector3 Origin { get; }
    parameters: []
    return:
      type: Elements.Geometry.Vector3
      description: ''
    content.vb: Public Shared ReadOnly Property Origin As Vector3
  overload: Elements.Geometry.Vector3.Origin*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Elements.Geometry.Vector3.Equals(System.Object)
  commentId: M:Elements.Geometry.Vector3.Equals(System.Object)
  id: Equals(System.Object)
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Vector3.Equals(Object)
  fullName: Elements.Geometry.Vector3.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Equals
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 51
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nIs this vector equal to the provided vector?\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Elements.Geometry.Vector3.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Elements.Geometry.Vector3.GetHashCode
  commentId: M:Elements.Geometry.Vector3.GetHashCode
  id: GetHashCode
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Vector3.GetHashCode()
  fullName: Elements.Geometry.Vector3.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: GetHashCode
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 66
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nGet the hash code for the vector.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: ''
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: Elements.Geometry.Vector3.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Elements.Geometry.Vector3.XAxis
  commentId: P:Elements.Geometry.Vector3.XAxis
  id: XAxis
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: XAxis
  nameWithType: Vector3.XAxis
  fullName: Elements.Geometry.Vector3.XAxis
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: XAxis
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 74
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConstruct a vector along the X axis.\n"
  example: []
  syntax:
    content: public static Vector3 XAxis { get; }
    parameters: []
    return:
      type: Elements.Geometry.Vector3
    content.vb: Public Shared ReadOnly Property XAxis As Vector3
  overload: Elements.Geometry.Vector3.XAxis*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Elements.Geometry.Vector3.YAxis
  commentId: P:Elements.Geometry.Vector3.YAxis
  id: YAxis
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: YAxis
  nameWithType: Vector3.YAxis
  fullName: Elements.Geometry.Vector3.YAxis
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: YAxis
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 82
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConstruct a vector along the Y axis.\n"
  example: []
  syntax:
    content: public static Vector3 YAxis { get; }
    parameters: []
    return:
      type: Elements.Geometry.Vector3
    content.vb: Public Shared ReadOnly Property YAxis As Vector3
  overload: Elements.Geometry.Vector3.YAxis*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Elements.Geometry.Vector3.ZAxis
  commentId: P:Elements.Geometry.Vector3.ZAxis
  id: ZAxis
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: ZAxis
  nameWithType: Vector3.ZAxis
  fullName: Elements.Geometry.Vector3.ZAxis
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: ZAxis
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 91
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConstruct a vector along the Z axis.\n"
  example: []
  syntax:
    content: public static Vector3 ZAxis { get; }
    parameters: []
    return:
      type: Elements.Geometry.Vector3
      description: ''
    content.vb: Public Shared ReadOnly Property ZAxis As Vector3
  overload: Elements.Geometry.Vector3.ZAxis*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Elements.Geometry.Vector3.AtNEqualSpacesAlongLine(Elements.Geometry.Line,System.Int32,System.Boolean)
  commentId: M:Elements.Geometry.Vector3.AtNEqualSpacesAlongLine(Elements.Geometry.Line,System.Int32,System.Boolean)
  id: AtNEqualSpacesAlongLine(Elements.Geometry.Line,System.Int32,System.Boolean)
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: AtNEqualSpacesAlongLine(Line, Int32, Boolean)
  nameWithType: Vector3.AtNEqualSpacesAlongLine(Line, Int32, Boolean)
  fullName: Elements.Geometry.Vector3.AtNEqualSpacesAlongLine(Elements.Geometry.Line, System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: AtNEqualSpacesAlongLine
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 103
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConstruct vectors at n equal spaces along the provided line.\n"
  example: []
  syntax:
    content: public static IList<Vector3> AtNEqualSpacesAlongLine(Line line, int n, bool includeEnds = false)
    parameters:
    - id: line
      type: Elements.Geometry.Line
      description: The line.
    - id: n
      type: System.Int32
      description: The number of samples along the line.
    - id: includeEnds
      type: System.Boolean
      description: A flag indicating whether or not to include points for the start and end of the line.
    return:
      type: System.Collections.Generic.IList{Elements.Geometry.Vector3}
      description: ''
    content.vb: Public Shared Function AtNEqualSpacesAlongLine(line As Line, n As Integer, includeEnds As Boolean = False) As IList(Of Vector3)
  overload: Elements.Geometry.Vector3.AtNEqualSpacesAlongLine*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Elements.Geometry.Vector3.#ctor
  commentId: M:Elements.Geometry.Vector3.#ctor
  id: '#ctor'
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Vector3()
  nameWithType: Vector3.Vector3()
  fullName: Elements.Geometry.Vector3.Vector3()
  type: Constructor
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 123
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConstruct a default vector at the origin.\n"
  example: []
  syntax:
    content: public Vector3()
    content.vb: Public Sub New
  overload: Elements.Geometry.Vector3.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Vector3.#ctor(Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Vector3.#ctor(Elements.Geometry.Vector3)
  id: '#ctor(Elements.Geometry.Vector3)'
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Vector3(Vector3)
  nameWithType: Vector3.Vector3(Vector3)
  fullName: Elements.Geometry.Vector3.Vector3(Elements.Geometry.Vector3)
  type: Constructor
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 134
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConstruct a Vector3 by copying the components of another Vector3.\n"
  example: []
  syntax:
    content: public Vector3(Vector3 v)
    parameters:
    - id: v
      type: Elements.Geometry.Vector3
      description: The Vector3 to copy.
    content.vb: Public Sub New(v As Vector3)
  overload: Elements.Geometry.Vector3.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Vector3.#ctor(System.Double,System.Double,System.Double)
  commentId: M:Elements.Geometry.Vector3.#ctor(System.Double,System.Double,System.Double)
  id: '#ctor(System.Double,System.Double,System.Double)'
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Vector3(Double, Double, Double)
  nameWithType: Vector3.Vector3(Double, Double, Double)
  fullName: Elements.Geometry.Vector3.Vector3(System.Double, System.Double, System.Double)
  type: Constructor
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 148
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConstruct a vector from x, y, and z coordinates.\n"
  example: []
  syntax:
    content: >-
      [JsonConstructor]

      public Vector3(double x, double y, double z)
    parameters:
    - id: x
      type: System.Double
      description: The x coordinate of the vector.
    - id: y
      type: System.Double
      description: The y coordinate of the vector.
    - id: z
      type: System.Double
      description: The z coordinate of the vector.
    content.vb: >-
      <JsonConstructor>

      Public Sub New(x As Double, y As Double, z As Double)
  overload: Elements.Geometry.Vector3.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if any components of the vector are NaN or Infinity.
  attributes:
  - type: Newtonsoft.Json.JsonConstructorAttribute
    ctor: Newtonsoft.Json.JsonConstructorAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Vector3.#ctor(System.Double,System.Double)
  commentId: M:Elements.Geometry.Vector3.#ctor(System.Double,System.Double)
  id: '#ctor(System.Double,System.Double)'
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Vector3(Double, Double)
  nameWithType: Vector3.Vector3(Double, Double)
  fullName: Elements.Geometry.Vector3.Vector3(System.Double, System.Double)
  type: Constructor
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 172
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConstruct a vector from x, and y coordinates.\n"
  example: []
  syntax:
    content: public Vector3(double x, double y)
    parameters:
    - id: x
      type: System.Double
      description: The x coordinate of the vector.
    - id: y
      type: System.Double
      description: Thy y coordinate of the vector.
    content.vb: Public Sub New(x As Double, y As Double)
  overload: Elements.Geometry.Vector3.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown if any components of the vector are NaN or Infinity.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Vector3.Length
  commentId: M:Elements.Geometry.Vector3.Length
  id: Length
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Length()
  nameWithType: Vector3.Length()
  fullName: Elements.Geometry.Vector3.Length()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Length
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 191
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nGet the length of this vector.\n"
  example: []
  syntax:
    content: public double Length()
    return:
      type: System.Double
    content.vb: Public Function Length As Double
  overload: Elements.Geometry.Vector3.Length*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Vector3.Normalized
  commentId: M:Elements.Geometry.Vector3.Normalized
  id: Normalized
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Normalized()
  nameWithType: Vector3.Normalized()
  fullName: Elements.Geometry.Vector3.Normalized()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Normalized
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 200
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nReturn a new vector which is the normalized version of this vector.\n"
  example: []
  syntax:
    content: public Vector3 Normalized()
    return:
      type: Elements.Geometry.Vector3
      description: ''
    content.vb: Public Function Normalized As Vector3
  overload: Elements.Geometry.Vector3.Normalized*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Vector3.Cross(Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Vector3.Cross(Elements.Geometry.Vector3)
  id: Cross(Elements.Geometry.Vector3)
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Cross(Vector3)
  nameWithType: Vector3.Cross(Vector3)
  fullName: Elements.Geometry.Vector3.Cross(Elements.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Cross
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 210
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCompute the cross product of this vector and v.\n"
  example: []
  syntax:
    content: public Vector3 Cross(Vector3 v)
    parameters:
    - id: v
      type: Elements.Geometry.Vector3
      description: The vector with which to compute the cross product.
    return:
      type: Elements.Geometry.Vector3
    content.vb: Public Function Cross(v As Vector3) As Vector3
  overload: Elements.Geometry.Vector3.Cross*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Vector3.Dot(Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Vector3.Dot(Elements.Geometry.Vector3)
  id: Dot(Elements.Geometry.Vector3)
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Dot(Vector3)
  nameWithType: Vector3.Dot(Vector3)
  fullName: Elements.Geometry.Vector3.Dot(Elements.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Dot
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 224
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCompute the dot product of this vector and v.\n"
  example: []
  syntax:
    content: public double Dot(Vector3 v)
    parameters:
    - id: v
      type: Elements.Geometry.Vector3
      description: The vector with which to compute the dot product.
    return:
      type: System.Double
      description: The dot product.
    content.vb: Public Function Dot(v As Vector3) As Double
  overload: Elements.Geometry.Vector3.Dot*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Vector3.AngleTo(Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Vector3.AngleTo(Elements.Geometry.Vector3)
  id: AngleTo(Elements.Geometry.Vector3)
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: AngleTo(Vector3)
  nameWithType: Vector3.AngleTo(Vector3)
  fullName: Elements.Geometry.Vector3.AngleTo(Elements.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: AngleTo
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 233
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe angle in degrees from this vector to the provided vector.\n"
  example: []
  syntax:
    content: public double AngleTo(Vector3 v)
    parameters:
    - id: v
      type: Elements.Geometry.Vector3
      description: The vector with which to measure the angle.
    return:
      type: System.Double
    content.vb: Public Function AngleTo(v As Vector3) As Double
  overload: Elements.Geometry.Vector3.AngleTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Vector3.Average(Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Vector3.Average(Elements.Geometry.Vector3)
  id: Average(Elements.Geometry.Vector3)
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Average(Vector3)
  nameWithType: Vector3.Average(Vector3)
  fullName: Elements.Geometry.Vector3.Average(Elements.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Average
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 244
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCompute the average of this Vector3 and v.\n"
  example: []
  syntax:
    content: public Vector3 Average(Vector3 v)
    parameters:
    - id: v
      type: Elements.Geometry.Vector3
      description: The vector with which to compute the average.
    return:
      type: Elements.Geometry.Vector3
      description: A vector which is the average of this and v.
    content.vb: Public Function Average(v As Vector3) As Vector3
  overload: Elements.Geometry.Vector3.Average*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Vector3.ProjectOnto(Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Vector3.ProjectOnto(Elements.Geometry.Vector3)
  id: ProjectOnto(Elements.Geometry.Vector3)
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: ProjectOnto(Vector3)
  nameWithType: Vector3.ProjectOnto(Vector3)
  fullName: Elements.Geometry.Vector3.ProjectOnto(Elements.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: ProjectOnto
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 254
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nProject vector a onto this vector.\n"
  example: []
  syntax:
    content: public Vector3 ProjectOnto(Vector3 a)
    parameters:
    - id: a
      type: Elements.Geometry.Vector3
      description: The vector to project onto this vector.
    return:
      type: Elements.Geometry.Vector3
      description: A new vector which is the projection of a onto this vector.
    content.vb: Public Function ProjectOnto(a As Vector3) As Vector3
  overload: Elements.Geometry.Vector3.ProjectOnto*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Vector3.op_Multiply(Elements.Geometry.Vector3,System.Double)
  commentId: M:Elements.Geometry.Vector3.op_Multiply(Elements.Geometry.Vector3,System.Double)
  id: op_Multiply(Elements.Geometry.Vector3,System.Double)
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Multiply(Vector3, Double)
  nameWithType: Vector3.Multiply(Vector3, Double)
  fullName: Elements.Geometry.Vector3.Multiply(Elements.Geometry.Vector3, System.Double)
  type: Operator
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: op_Multiply
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 266
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nMultiply a vector and a scalar.\n"
  example: []
  syntax:
    content: public static Vector3 operator *(Vector3 v, double a)
    parameters:
    - id: v
      type: Elements.Geometry.Vector3
      description: The vector to multiply.
    - id: a
      type: System.Double
      description: The scalar value to multiply.
    return:
      type: Elements.Geometry.Vector3
      description: A vector whose magnitude is multiplied by a.
    content.vb: Public Shared Operator *(v As Vector3, a As Double) As Vector3
  overload: Elements.Geometry.Vector3.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Elements.Geometry.Vector3.op_Multiply(System.Double,Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Vector3.op_Multiply(System.Double,Elements.Geometry.Vector3)
  id: op_Multiply(System.Double,Elements.Geometry.Vector3)
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Multiply(Double, Vector3)
  nameWithType: Vector3.Multiply(Double, Vector3)
  fullName: Elements.Geometry.Vector3.Multiply(System.Double, Elements.Geometry.Vector3)
  type: Operator
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: op_Multiply
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 277
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nMultiply a scalar and a vector.\n"
  example: []
  syntax:
    content: public static Vector3 operator *(double a, Vector3 v)
    parameters:
    - id: a
      type: System.Double
      description: The scalar value to multiply.
    - id: v
      type: Elements.Geometry.Vector3
      description: The vector to multiply.
    return:
      type: Elements.Geometry.Vector3
      description: A vector whose magnitude is mutiplied by a.
    content.vb: Public Shared Operator *(a As Double, v As Vector3) As Vector3
  overload: Elements.Geometry.Vector3.op_Multiply*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Elements.Geometry.Vector3.op_Division(Elements.Geometry.Vector3,System.Double)
  commentId: M:Elements.Geometry.Vector3.op_Division(Elements.Geometry.Vector3,System.Double)
  id: op_Division(Elements.Geometry.Vector3,System.Double)
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Division(Vector3, Double)
  nameWithType: Vector3.Division(Vector3, Double)
  fullName: Elements.Geometry.Vector3.Division(Elements.Geometry.Vector3, System.Double)
  type: Operator
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: op_Division
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 288
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nDivide a vector by a scalar.\n"
  example: []
  syntax:
    content: public static Vector3 operator /(Vector3 v, double a)
    parameters:
    - id: v
      type: Elements.Geometry.Vector3
      description: The vector to divide.
    - id: a
      type: System.Double
      description: The scalar divisor.
    return:
      type: Elements.Geometry.Vector3
      description: A vector whose magnitude is mutiplied by a.
    content.vb: Public Shared Operator /(v As Vector3, a As Double) As Vector3
  overload: Elements.Geometry.Vector3.op_Division*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Elements.Geometry.Vector3.op_Subtraction(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Vector3.op_Subtraction(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  id: op_Subtraction(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Subtraction(Vector3, Vector3)
  nameWithType: Vector3.Subtraction(Vector3, Vector3)
  fullName: Elements.Geometry.Vector3.Subtraction(Elements.Geometry.Vector3, Elements.Geometry.Vector3)
  type: Operator
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: op_Subtraction
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 299
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nSubtract two vectors.\n"
  example: []
  syntax:
    content: public static Vector3 operator -(Vector3 a, Vector3 b)
    parameters:
    - id: a
      type: Elements.Geometry.Vector3
      description: The first vector.
    - id: b
      type: Elements.Geometry.Vector3
      description: The second vector.
    return:
      type: Elements.Geometry.Vector3
      description: A vector which is the difference between a and b.
    content.vb: Public Shared Operator -(a As Vector3, b As Vector3) As Vector3
  overload: Elements.Geometry.Vector3.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Elements.Geometry.Vector3.op_Addition(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Vector3.op_Addition(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  id: op_Addition(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Addition(Vector3, Vector3)
  nameWithType: Vector3.Addition(Vector3, Vector3)
  fullName: Elements.Geometry.Vector3.Addition(Elements.Geometry.Vector3, Elements.Geometry.Vector3)
  type: Operator
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: op_Addition
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 310
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nAdd two vectors.\n"
  example: []
  syntax:
    content: public static Vector3 operator +(Vector3 a, Vector3 b)
    parameters:
    - id: a
      type: Elements.Geometry.Vector3
      description: The first vector.
    - id: b
      type: Elements.Geometry.Vector3
      description: The second vector.
    return:
      type: Elements.Geometry.Vector3
      description: A vector which is the sum of a and b.
    content.vb: Public Shared Operator +(a As Vector3, b As Vector3) As Vector3
  overload: Elements.Geometry.Vector3.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Elements.Geometry.Vector3.op_GreaterThan(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Vector3.op_GreaterThan(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  id: op_GreaterThan(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: GreaterThan(Vector3, Vector3)
  nameWithType: Vector3.GreaterThan(Vector3, Vector3)
  fullName: Elements.Geometry.Vector3.GreaterThan(Elements.Geometry.Vector3, Elements.Geometry.Vector3)
  type: Operator
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: op_GreaterThan
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 321
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCompute whether all components of vector a are greater than those of vector b.\n"
  example: []
  syntax:
    content: public static bool operator>(Vector3 a, Vector3 b)
    parameters:
    - id: a
      type: Elements.Geometry.Vector3
      description: The first vector.
    - id: b
      type: Elements.Geometry.Vector3
      description: The second vector.
    return:
      type: System.Boolean
      description: True if all of a&apos;s components are greater than those of b, otherwise false.
    content.vb: Public Shared Operator>(a As Vector3, b As Vector3) As Boolean
  overload: Elements.Geometry.Vector3.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Elements.Geometry.Vector3.op_LessThan(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Vector3.op_LessThan(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  id: op_LessThan(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: LessThan(Vector3, Vector3)
  nameWithType: Vector3.LessThan(Vector3, Vector3)
  fullName: Elements.Geometry.Vector3.LessThan(Elements.Geometry.Vector3, Elements.Geometry.Vector3)
  type: Operator
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: op_LessThan
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 332
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCompute whether all components of vector a are less than those of vector b.\n"
  example: []
  syntax:
    content: public static bool operator <(Vector3 a, Vector3 b)
    parameters:
    - id: a
      type: Elements.Geometry.Vector3
      description: The first vector.
    - id: b
      type: Elements.Geometry.Vector3
      description: The second vector.
    return:
      type: System.Boolean
      description: True if all of a&apos;s components are less than those of b, otherwise false.
    content.vb: Public Shared Operator <(a As Vector3, b As Vector3) As Boolean
  overload: Elements.Geometry.Vector3.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Elements.Geometry.Vector3.IsParallelTo(Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Vector3.IsParallelTo(Elements.Geometry.Vector3)
  id: IsParallelTo(Elements.Geometry.Vector3)
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: IsParallelTo(Vector3)
  nameWithType: Vector3.IsParallelTo(Vector3)
  fullName: Elements.Geometry.Vector3.IsParallelTo(Elements.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: IsParallelTo
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 342
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nDetermine whether this vector is parallel to v.\n"
  example: []
  syntax:
    content: public bool IsParallelTo(Vector3 v)
    parameters:
    - id: v
      type: Elements.Geometry.Vector3
      description: The vector to compare to this vector.
    return:
      type: System.Boolean
      description: True if the vectors are parallel, otherwise false.
    content.vb: Public Function IsParallelTo(v As Vector3) As Boolean
  overload: Elements.Geometry.Vector3.IsParallelTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Vector3.Negated
  commentId: M:Elements.Geometry.Vector3.Negated
  id: Negated
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Negated()
  nameWithType: Vector3.Negated()
  fullName: Elements.Geometry.Vector3.Negated()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Negated
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 352
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConstruct a new vector which is the inverse of this vector.\n"
  example: []
  syntax:
    content: public Vector3 Negated()
    return:
      type: Elements.Geometry.Vector3
      description: A new vector which is the inverse of this vector.
    content.vb: Public Function Negated As Vector3
  overload: Elements.Geometry.Vector3.Negated*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Vector3.ToArray
  commentId: M:Elements.Geometry.Vector3.ToArray
  id: ToArray
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: ToArray()
  nameWithType: Vector3.ToArray()
  fullName: Elements.Geometry.Vector3.ToArray()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: ToArray
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 361
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConvert a vector&apos;s components to an array.\n"
  example: []
  syntax:
    content: public double[] ToArray()
    return:
      type: System.Double[]
      description: An array of comprised of the x, y, and z components of this vector.
    content.vb: Public Function ToArray As Double()
  overload: Elements.Geometry.Vector3.ToArray*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Vector3.ToString
  commentId: M:Elements.Geometry.Vector3.ToString
  id: ToString
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Vector3.ToString()
  fullName: Elements.Geometry.Vector3.ToString()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: ToString
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 370
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nA string representation of the vector.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: The string representation of this vector.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Elements.Geometry.Vector3.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Elements.Geometry.Vector3.IsAlmostEqualTo(Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Vector3.IsAlmostEqualTo(Elements.Geometry.Vector3)
  id: IsAlmostEqualTo(Elements.Geometry.Vector3)
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: IsAlmostEqualTo(Vector3)
  nameWithType: Vector3.IsAlmostEqualTo(Vector3)
  fullName: Elements.Geometry.Vector3.IsAlmostEqualTo(Elements.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: IsAlmostEqualTo
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 380
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nDetermine whether this vector&apos;s components are equal to those of v, within tolerance.\n"
  example: []
  syntax:
    content: public bool IsAlmostEqualTo(Vector3 v)
    parameters:
    - id: v
      type: Elements.Geometry.Vector3
      description: The vector to compare.
    return:
      type: System.Boolean
      description: True if the difference of this vector and the supplied vector&apos;s components are all within Tolerance, otherwise false.
    content.vb: Public Function IsAlmostEqualTo(v As Vector3) As Boolean
  overload: Elements.Geometry.Vector3.IsAlmostEqualTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Vector3.DistanceTo(Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Vector3.DistanceTo(Elements.Geometry.Vector3)
  id: DistanceTo(Elements.Geometry.Vector3)
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: DistanceTo(Vector3)
  nameWithType: Vector3.DistanceTo(Vector3)
  fullName: Elements.Geometry.Vector3.DistanceTo(Elements.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: DistanceTo
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 396
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe distance from this point to b.\n"
  example: []
  syntax:
    content: public double DistanceTo(Vector3 v)
    parameters:
    - id: v
      type: Elements.Geometry.Vector3
      description: The target vector.
    return:
      type: System.Double
      description: The distance between this vector and the provided vector.
    content.vb: Public Function DistanceTo(v As Vector3) As Double
  overload: Elements.Geometry.Vector3.DistanceTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Vector3.DistanceTo(Elements.Geometry.Plane)
  commentId: M:Elements.Geometry.Vector3.DistanceTo(Elements.Geometry.Plane)
  id: DistanceTo(Elements.Geometry.Plane)
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: DistanceTo(Plane)
  nameWithType: Vector3.DistanceTo(Plane)
  fullName: Elements.Geometry.Vector3.DistanceTo(Elements.Geometry.Plane)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: DistanceTo
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 407
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe distance from this vector to p.\nThe distance will be negative when this vector lies\n&quot;behind&quot; the plane.\n"
  example: []
  syntax:
    content: public double DistanceTo(Plane p)
    parameters:
    - id: p
      type: Elements.Geometry.Plane
      description: The plane.
    return:
      type: System.Double
    content.vb: Public Function DistanceTo(p As Plane) As Double
  overload: Elements.Geometry.Vector3.DistanceTo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Vector3.Project(Elements.Geometry.Plane)
  commentId: M:Elements.Geometry.Vector3.Project(Elements.Geometry.Plane)
  id: Project(Elements.Geometry.Plane)
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Project(Plane)
  nameWithType: Vector3.Project(Plane)
  fullName: Elements.Geometry.Vector3.Project(Elements.Geometry.Plane)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Project
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 417
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nProject this vector onto the plane.\n"
  example: []
  syntax:
    content: public Vector3 Project(Plane p)
    parameters:
    - id: p
      type: Elements.Geometry.Plane
      description: The plane on which to project the point.
    return:
      type: Elements.Geometry.Vector3
    content.vb: Public Function Project(p As Plane) As Vector3
  overload: Elements.Geometry.Vector3.Project*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Vector3.ProjectAlong(Elements.Geometry.Vector3,Elements.Geometry.Plane)
  commentId: M:Elements.Geometry.Vector3.ProjectAlong(Elements.Geometry.Vector3,Elements.Geometry.Plane)
  id: ProjectAlong(Elements.Geometry.Vector3,Elements.Geometry.Plane)
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: ProjectAlong(Vector3, Plane)
  nameWithType: Vector3.ProjectAlong(Vector3, Plane)
  fullName: Elements.Geometry.Vector3.ProjectAlong(Elements.Geometry.Vector3, Elements.Geometry.Plane)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: ProjectAlong
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 432
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nProject this vector onto the plane along a vector.\n"
  example: []
  syntax:
    content: public Vector3 ProjectAlong(Vector3 v, Plane p)
    parameters:
    - id: v
      type: Elements.Geometry.Vector3
      description: The vector along which t project.
    - id: p
      type: Elements.Geometry.Plane
      description: The plane on which to project.
    return:
      type: Elements.Geometry.Vector3
      description: A point on the plane.
    content.vb: Public Function ProjectAlong(v As Vector3, p As Plane) As Vector3
  overload: Elements.Geometry.Vector3.ProjectAlong*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Vector3.CompareTo(Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Vector3.CompareTo(Elements.Geometry.Vector3)
  id: CompareTo(Elements.Geometry.Vector3)
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: CompareTo(Vector3)
  nameWithType: Vector3.CompareTo(Vector3)
  fullName: Elements.Geometry.Vector3.CompareTo(Elements.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: CompareTo
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 444
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nImplement IComparable interface.\n"
  example: []
  syntax:
    content: public int CompareTo(Vector3 v)
    parameters:
    - id: v
      type: Elements.Geometry.Vector3
      description: ''
    return:
      type: System.Int32
      description: ''
    content.vb: Public Function CompareTo(v As Vector3) As Integer
  overload: Elements.Geometry.Vector3.CompareTo*
  implements:
  - System.IComparable{Elements.Geometry.Vector3}.CompareTo(Elements.Geometry.Vector3)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Vector3.Equals(Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Vector3.Equals(Elements.Geometry.Vector3)
  id: Equals(Elements.Geometry.Vector3)
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: Equals(Vector3)
  nameWithType: Vector3.Equals(Vector3)
  fullName: Elements.Geometry.Vector3.Equals(Elements.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Equals
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 463
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nImplement the IEquatable interface.\n"
  example: []
  syntax:
    content: public bool Equals(Vector3 other)
    parameters:
    - id: other
      type: Elements.Geometry.Vector3
      description: ''
    return:
      type: System.Boolean
      description: True if all the components of this and the provided vector are equal.
    content.vb: Public Function Equals(other As Vector3) As Boolean
  overload: Elements.Geometry.Vector3.Equals*
  implements:
  - System.IEquatable{Elements.Geometry.Vector3}.Equals(Elements.Geometry.Vector3)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Vector3.IsNaN
  commentId: M:Elements.Geometry.Vector3.IsNaN
  id: IsNaN
  parent: Elements.Geometry.Vector3
  langs:
  - csharp
  - vb
  name: IsNaN()
  nameWithType: Vector3.IsNaN()
  fullName: Elements.Geometry.Vector3.IsNaN()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Vector3.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: IsNaN
    path: ../src/Elements/Geometry/Vector3.cs
    startLine: 478
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nAre any components of this vector NaN?\n"
  example: []
  syntax:
    content: public bool IsNaN()
    return:
      type: System.Boolean
      description: True if any components are NaN otherwise false.
    content.vb: Public Function IsNaN As Boolean
  overload: Elements.Geometry.Vector3.IsNaN*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Elements.Geometry
  commentId: N:Elements.Geometry
  name: Elements.Geometry
  nameWithType: Elements.Geometry
  fullName: Elements.Geometry
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IComparable{Elements.Geometry.Vector3}
  commentId: T:System.IComparable{Elements.Geometry.Vector3}
  parent: System
  definition: System.IComparable`1
  name: IComparable<Vector3>
  nameWithType: IComparable<Vector3>
  fullName: System.IComparable<Elements.Geometry.Vector3>
  nameWithType.vb: IComparable(Of Vector3)
  fullName.vb: System.IComparable(Of Elements.Geometry.Vector3)
  name.vb: IComparable(Of Vector3)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Elements.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Elements.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Elements.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Elements.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{Elements.Geometry.Vector3}
  commentId: T:System.IEquatable{Elements.Geometry.Vector3}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Vector3>
  nameWithType: IEquatable<Vector3>
  fullName: System.IEquatable<Elements.Geometry.Vector3>
  nameWithType.vb: IEquatable(Of Vector3)
  fullName.vb: System.IEquatable(Of Elements.Geometry.Vector3)
  name.vb: IEquatable(Of Vector3)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Elements.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Elements.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Elements.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Elements.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Elements.Geometry.Vector3.X*
  commentId: Overload:Elements.Geometry.Vector3.X
  name: X
  nameWithType: Vector3.X
  fullName: Elements.Geometry.Vector3.X
- uid: Elements.Geometry.Vector3.Y*
  commentId: Overload:Elements.Geometry.Vector3.Y
  name: Y
  nameWithType: Vector3.Y
  fullName: Elements.Geometry.Vector3.Y
- uid: Elements.Geometry.Vector3.Z*
  commentId: Overload:Elements.Geometry.Vector3.Z
  name: Z
  nameWithType: Vector3.Z
  fullName: Elements.Geometry.Vector3.Z
- uid: Elements.Geometry.Vector3.Origin*
  commentId: Overload:Elements.Geometry.Vector3.Origin
  name: Origin
  nameWithType: Vector3.Origin
  fullName: Elements.Geometry.Vector3.Origin
- uid: Elements.Geometry.Vector3
  commentId: T:Elements.Geometry.Vector3
  parent: Elements.Geometry
  name: Vector3
  nameWithType: Vector3
  fullName: Elements.Geometry.Vector3
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Vector3.Equals*
  commentId: Overload:Elements.Geometry.Vector3.Equals
  name: Equals
  nameWithType: Vector3.Equals
  fullName: Elements.Geometry.Vector3.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Vector3.GetHashCode*
  commentId: Overload:Elements.Geometry.Vector3.GetHashCode
  name: GetHashCode
  nameWithType: Vector3.GetHashCode
  fullName: Elements.Geometry.Vector3.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Elements.Geometry.Vector3.XAxis*
  commentId: Overload:Elements.Geometry.Vector3.XAxis
  name: XAxis
  nameWithType: Vector3.XAxis
  fullName: Elements.Geometry.Vector3.XAxis
- uid: Elements.Geometry.Vector3.YAxis*
  commentId: Overload:Elements.Geometry.Vector3.YAxis
  name: YAxis
  nameWithType: Vector3.YAxis
  fullName: Elements.Geometry.Vector3.YAxis
- uid: Elements.Geometry.Vector3.ZAxis*
  commentId: Overload:Elements.Geometry.Vector3.ZAxis
  name: ZAxis
  nameWithType: Vector3.ZAxis
  fullName: Elements.Geometry.Vector3.ZAxis
- uid: Elements.Geometry.Vector3.AtNEqualSpacesAlongLine*
  commentId: Overload:Elements.Geometry.Vector3.AtNEqualSpacesAlongLine
  name: AtNEqualSpacesAlongLine
  nameWithType: Vector3.AtNEqualSpacesAlongLine
  fullName: Elements.Geometry.Vector3.AtNEqualSpacesAlongLine
- uid: Elements.Geometry.Line
  commentId: T:Elements.Geometry.Line
  parent: Elements.Geometry
  name: Line
  nameWithType: Line
  fullName: Elements.Geometry.Line
- uid: System.Collections.Generic.IList{Elements.Geometry.Vector3}
  commentId: T:System.Collections.Generic.IList{Elements.Geometry.Vector3}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Vector3>
  nameWithType: IList<Vector3>
  fullName: System.Collections.Generic.IList<Elements.Geometry.Vector3>
  nameWithType.vb: IList(Of Vector3)
  fullName.vb: System.Collections.Generic.IList(Of Elements.Geometry.Vector3)
  name.vb: IList(Of Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Elements.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Elements.Geometry.Vector3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Elements.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Elements.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Elements.Geometry.Vector3.#ctor*
  commentId: Overload:Elements.Geometry.Vector3.#ctor
  name: Vector3
  nameWithType: Vector3.Vector3
  fullName: Elements.Geometry.Vector3.Vector3
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: Elements.Geometry.Vector3.Length*
  commentId: Overload:Elements.Geometry.Vector3.Length
  name: Length
  nameWithType: Vector3.Length
  fullName: Elements.Geometry.Vector3.Length
- uid: Elements.Geometry.Vector3.Normalized*
  commentId: Overload:Elements.Geometry.Vector3.Normalized
  name: Normalized
  nameWithType: Vector3.Normalized
  fullName: Elements.Geometry.Vector3.Normalized
- uid: Elements.Geometry.Vector3.Cross*
  commentId: Overload:Elements.Geometry.Vector3.Cross
  name: Cross
  nameWithType: Vector3.Cross
  fullName: Elements.Geometry.Vector3.Cross
- uid: Elements.Geometry.Vector3.Dot*
  commentId: Overload:Elements.Geometry.Vector3.Dot
  name: Dot
  nameWithType: Vector3.Dot
  fullName: Elements.Geometry.Vector3.Dot
- uid: Elements.Geometry.Vector3.AngleTo*
  commentId: Overload:Elements.Geometry.Vector3.AngleTo
  name: AngleTo
  nameWithType: Vector3.AngleTo
  fullName: Elements.Geometry.Vector3.AngleTo
- uid: Elements.Geometry.Vector3.Average*
  commentId: Overload:Elements.Geometry.Vector3.Average
  name: Average
  nameWithType: Vector3.Average
  fullName: Elements.Geometry.Vector3.Average
- uid: Elements.Geometry.Vector3.ProjectOnto*
  commentId: Overload:Elements.Geometry.Vector3.ProjectOnto
  name: ProjectOnto
  nameWithType: Vector3.ProjectOnto
  fullName: Elements.Geometry.Vector3.ProjectOnto
- uid: Elements.Geometry.Vector3.op_Multiply*
  commentId: Overload:Elements.Geometry.Vector3.op_Multiply
  name: Multiply
  nameWithType: Vector3.Multiply
  fullName: Elements.Geometry.Vector3.Multiply
- uid: Elements.Geometry.Vector3.op_Division*
  commentId: Overload:Elements.Geometry.Vector3.op_Division
  name: Division
  nameWithType: Vector3.Division
  fullName: Elements.Geometry.Vector3.Division
- uid: Elements.Geometry.Vector3.op_Subtraction*
  commentId: Overload:Elements.Geometry.Vector3.op_Subtraction
  name: Subtraction
  nameWithType: Vector3.Subtraction
  fullName: Elements.Geometry.Vector3.Subtraction
- uid: Elements.Geometry.Vector3.op_Addition*
  commentId: Overload:Elements.Geometry.Vector3.op_Addition
  name: Addition
  nameWithType: Vector3.Addition
  fullName: Elements.Geometry.Vector3.Addition
- uid: Elements.Geometry.Vector3.op_GreaterThan*
  commentId: Overload:Elements.Geometry.Vector3.op_GreaterThan
  name: GreaterThan
  nameWithType: Vector3.GreaterThan
  fullName: Elements.Geometry.Vector3.GreaterThan
- uid: Elements.Geometry.Vector3.op_LessThan*
  commentId: Overload:Elements.Geometry.Vector3.op_LessThan
  name: LessThan
  nameWithType: Vector3.LessThan
  fullName: Elements.Geometry.Vector3.LessThan
- uid: Elements.Geometry.Vector3.IsParallelTo*
  commentId: Overload:Elements.Geometry.Vector3.IsParallelTo
  name: IsParallelTo
  nameWithType: Vector3.IsParallelTo
  fullName: Elements.Geometry.Vector3.IsParallelTo
- uid: Elements.Geometry.Vector3.Negated*
  commentId: Overload:Elements.Geometry.Vector3.Negated
  name: Negated
  nameWithType: Vector3.Negated
  fullName: Elements.Geometry.Vector3.Negated
- uid: Elements.Geometry.Vector3.ToArray*
  commentId: Overload:Elements.Geometry.Vector3.ToArray
  name: ToArray
  nameWithType: Vector3.ToArray
  fullName: Elements.Geometry.Vector3.ToArray
- uid: System.Double[]
  isExternal: true
  name: Double[]
  nameWithType: Double[]
  fullName: System.Double[]
  nameWithType.vb: Double()
  fullName.vb: System.Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Vector3.ToString*
  commentId: Overload:Elements.Geometry.Vector3.ToString
  name: ToString
  nameWithType: Vector3.ToString
  fullName: Elements.Geometry.Vector3.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Elements.Geometry.Vector3.IsAlmostEqualTo*
  commentId: Overload:Elements.Geometry.Vector3.IsAlmostEqualTo
  name: IsAlmostEqualTo
  nameWithType: Vector3.IsAlmostEqualTo
  fullName: Elements.Geometry.Vector3.IsAlmostEqualTo
- uid: Elements.Geometry.Vector3.DistanceTo*
  commentId: Overload:Elements.Geometry.Vector3.DistanceTo
  name: DistanceTo
  nameWithType: Vector3.DistanceTo
  fullName: Elements.Geometry.Vector3.DistanceTo
- uid: Elements.Geometry.Plane
  commentId: T:Elements.Geometry.Plane
  parent: Elements.Geometry
  name: Plane
  nameWithType: Plane
  fullName: Elements.Geometry.Plane
- uid: Elements.Geometry.Vector3.Project*
  commentId: Overload:Elements.Geometry.Vector3.Project
  name: Project
  nameWithType: Vector3.Project
  fullName: Elements.Geometry.Vector3.Project
- uid: Elements.Geometry.Vector3.ProjectAlong*
  commentId: Overload:Elements.Geometry.Vector3.ProjectAlong
  name: ProjectAlong
  nameWithType: Vector3.ProjectAlong
  fullName: Elements.Geometry.Vector3.ProjectAlong
- uid: Elements.Geometry.Vector3.CompareTo*
  commentId: Overload:Elements.Geometry.Vector3.CompareTo
  name: CompareTo
  nameWithType: Vector3.CompareTo
  fullName: Elements.Geometry.Vector3.CompareTo
- uid: System.IComparable{Elements.Geometry.Vector3}.CompareTo(Elements.Geometry.Vector3)
  commentId: M:System.IComparable{Elements.Geometry.Vector3}.CompareTo(Elements.Geometry.Vector3)
  parent: System.IComparable{Elements.Geometry.Vector3}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(Vector3)
  nameWithType: IComparable<Vector3>.CompareTo(Vector3)
  fullName: System.IComparable<Elements.Geometry.Vector3>.CompareTo(Elements.Geometry.Vector3)
  nameWithType.vb: IComparable(Of Vector3).CompareTo(Vector3)
  fullName.vb: System.IComparable(Of Elements.Geometry.Vector3).CompareTo(Elements.Geometry.Vector3)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<Vector3>.CompareTo
    fullName: System.IComparable<Elements.Geometry.Vector3>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Elements.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Elements.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of Vector3).CompareTo
    fullName: System.IComparable(Of Elements.Geometry.Vector3).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Elements.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Elements.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{Elements.Geometry.Vector3}.Equals(Elements.Geometry.Vector3)
  commentId: M:System.IEquatable{Elements.Geometry.Vector3}.Equals(Elements.Geometry.Vector3)
  parent: System.IEquatable{Elements.Geometry.Vector3}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Vector3)
  nameWithType: IEquatable<Vector3>.Equals(Vector3)
  fullName: System.IEquatable<Elements.Geometry.Vector3>.Equals(Elements.Geometry.Vector3)
  nameWithType.vb: IEquatable(Of Vector3).Equals(Vector3)
  fullName.vb: System.IEquatable(Of Elements.Geometry.Vector3).Equals(Elements.Geometry.Vector3)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Vector3>.Equals
    fullName: System.IEquatable<Elements.Geometry.Vector3>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Elements.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Elements.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Vector3).Equals
    fullName: System.IEquatable(Of Elements.Geometry.Vector3).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Elements.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Elements.Geometry.Vector3
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Vector3.IsNaN*
  commentId: Overload:Elements.Geometry.Vector3.IsNaN
  name: IsNaN
  nameWithType: Vector3.IsNaN
  fullName: Elements.Geometry.Vector3.IsNaN
