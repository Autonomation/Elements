### YamlMime:ManagedReference
items:
- uid: Elements.Geometry.Polygon
  commentId: T:Elements.Geometry.Polygon
  id: Polygon
  parent: Elements.Geometry
  children:
  - Elements.Geometry.Polygon.#ctor(Elements.Geometry.Vector3[])
  - Elements.Geometry.Polygon.Area
  - Elements.Geometry.Polygon.Centroid
  - Elements.Geometry.Polygon.Circle(System.Double,System.Int32)
  - Elements.Geometry.Polygon.Contains(Elements.Geometry.Polygon)
  - Elements.Geometry.Polygon.Contains(Elements.Geometry.Vector3)
  - Elements.Geometry.Polygon.Covers(Elements.Geometry.Polygon)
  - Elements.Geometry.Polygon.Covers(Elements.Geometry.Vector3)
  - Elements.Geometry.Polygon.Difference(Elements.Geometry.Polygon)
  - Elements.Geometry.Polygon.Difference(System.Collections.Generic.IList{Elements.Geometry.Polygon})
  - Elements.Geometry.Polygon.Disjoint(Elements.Geometry.Polygon)
  - Elements.Geometry.Polygon.Disjoint(Elements.Geometry.Vector3)
  - Elements.Geometry.Polygon.Equals(System.Object)
  - Elements.Geometry.Polygon.Frames(System.Double,System.Double)
  - Elements.Geometry.Polygon.GetHashCode
  - Elements.Geometry.Polygon.Intersection(Elements.Geometry.Polygon)
  - Elements.Geometry.Polygon.Intersects(Elements.Geometry.Polygon)
  - Elements.Geometry.Polygon.L(System.Double,System.Double,System.Double)
  - Elements.Geometry.Polygon.Length
  - Elements.Geometry.Polygon.Ngon(System.Int32,System.Double)
  - Elements.Geometry.Polygon.Offset(System.Double)
  - Elements.Geometry.Polygon.Plane
  - Elements.Geometry.Polygon.Project(Elements.Geometry.Plane)
  - Elements.Geometry.Polygon.ProjectAlong(Elements.Geometry.Vector3,Elements.Geometry.Plane)
  - Elements.Geometry.Polygon.Rectangle(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  - Elements.Geometry.Polygon.Rectangle(System.Double,System.Double,Elements.Geometry.Vector3,System.Double,System.Double)
  - Elements.Geometry.Polygon.Reversed
  - Elements.Geometry.Polygon.Segments
  - Elements.Geometry.Polygon.ToString
  - Elements.Geometry.Polygon.Touches(Elements.Geometry.Polygon)
  - Elements.Geometry.Polygon.Touches(Elements.Geometry.Vector3)
  - Elements.Geometry.Polygon.Union(Elements.Geometry.Polygon)
  - Elements.Geometry.Polygon.Union(System.Collections.Generic.IList{Elements.Geometry.Polygon})
  - Elements.Geometry.Polygon.XOR(Elements.Geometry.Polygon)
  langs:
  - csharp
  - vb
  name: Polygon
  nameWithType: Polygon
  fullName: Elements.Geometry.Polygon
  type: Class
  source:
    remote:
      path: src/Elements/Geometry/Polygons.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Polygon
    path: ../src/Elements/Geometry/Polygons.cs
    startLine: 8
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nA closed planar polygon.\n"
  example: []
  syntax:
    content: 'public class Polygon : Polyline, ICurve'
    content.vb: >-
      Public Class Polygon
          Inherits Polyline
          Implements ICurve
  inheritance:
  - System.Object
  - Elements.Geometry.Polyline
  implements:
  - Elements.Geometry.Interfaces.ICurve
  inheritedMembers:
  - Elements.Geometry.Polyline.Type
  - Elements.Geometry.Polyline._vertices
  - Elements.Geometry.Polyline.Vertices
  - Elements.Geometry.Polyline.Start
  - Elements.Geometry.Polyline.End
  - Elements.Geometry.Polyline.PointAt(System.Double)
  - Elements.Geometry.Polyline.TransformAt(System.Double)
  - Elements.Geometry.Polyline.Bounds
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Elements.Geometry.Polygon.#ctor(Elements.Geometry.Vector3[])
  commentId: M:Elements.Geometry.Polygon.#ctor(Elements.Geometry.Vector3[])
  id: '#ctor(Elements.Geometry.Vector3[])'
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Polygon(Vector3[])
  nameWithType: Polygon.Polygon(Vector3[])
  fullName: Elements.Geometry.Polygon.Polygon(Elements.Geometry.Vector3[])
  type: Constructor
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 24
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConstruct a Polygon from a collection of vertices.\n"
  example: []
  syntax:
    content: public Polygon(Vector3[] vertices)
    parameters:
    - id: vertices
      type: Elements.Geometry.Vector3[]
      description: A collection of vertices.
    content.vb: Public Sub New(vertices As Vector3())
  overload: Elements.Geometry.Polygon.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when coincident vertices are provided.
  nameWithType.vb: Polygon.Polygon(Vector3())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Elements.Geometry.Polygon.Polygon(Elements.Geometry.Vector3())
  name.vb: Polygon(Vector3())
- uid: Elements.Geometry.Polygon.Contains(Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Polygon.Contains(Elements.Geometry.Vector3)
  id: Contains(Elements.Geometry.Vector3)
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Contains(Vector3)
  nameWithType: Polygon.Contains(Vector3)
  fullName: Elements.Geometry.Polygon.Contains(Elements.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Contains
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 33
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nTests if the supplied Vector3 is within this Polygon without coincidence with an edge when compared on a shared plane.\n"
  example: []
  syntax:
    content: public bool Contains(Vector3 vector)
    parameters:
    - id: vector
      type: Elements.Geometry.Vector3
      description: The Vector3 to compare to this Polygon.
    return:
      type: System.Boolean
      description: "\nReturns true if the supplied Vector3 is within this Polygon when compared on a shared plane. Returns false if the Vector3 is outside this Polygon or if the supplied Vector3 is null.\n"
    content.vb: Public Function Contains(vector As Vector3) As Boolean
  overload: Elements.Geometry.Polygon.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Polygon.Contains(Elements.Geometry.Polygon)
  commentId: M:Elements.Geometry.Polygon.Contains(Elements.Geometry.Polygon)
  id: Contains(Elements.Geometry.Polygon)
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Contains(Polygon)
  nameWithType: Polygon.Contains(Polygon)
  fullName: Elements.Geometry.Polygon.Contains(Elements.Geometry.Polygon)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Contains
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 55
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nTests if the supplied Polygon is within this Polygon without coincident edges when compared on a shared plane.\n"
  example: []
  syntax:
    content: public bool Contains(Polygon polygon)
    parameters:
    - id: polygon
      type: Elements.Geometry.Polygon
      description: The Polygon to compare to this Polygon.
    return:
      type: System.Boolean
      description: "\nReturns true if every vertex of the supplied Polygon is within this Polygon when compared on a shared plane. Returns false if the supplied Polygon is not entirely within this Polygon, or if the supplied Polygon is null.\n"
    content.vb: Public Function Contains(polygon As Polygon) As Boolean
  overload: Elements.Geometry.Polygon.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Polygon.Covers(Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Polygon.Covers(Elements.Geometry.Vector3)
  id: Covers(Elements.Geometry.Vector3)
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Covers(Vector3)
  nameWithType: Polygon.Covers(Vector3)
  fullName: Elements.Geometry.Polygon.Covers(Elements.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Covers
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 80
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nTests if the supplied Vector3 is within this Polygon or coincident with an edge when compared on a shared plane.\n"
  example: []
  syntax:
    content: public bool Covers(Vector3 vector)
    parameters:
    - id: vector
      type: Elements.Geometry.Vector3
      description: The Vector3 to compare to this Polygon.
    return:
      type: System.Boolean
      description: "\nReturns true if the supplied Vector3 is within this Polygon or coincident with an edge when compared on a shared plane. Returns false if the supplied Vector3 is outside this Polygon, or if the supplied Vector3 is null.\n"
    content.vb: Public Function Covers(vector As Vector3) As Boolean
  overload: Elements.Geometry.Polygon.Covers*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Polygon.Covers(Elements.Geometry.Polygon)
  commentId: M:Elements.Geometry.Polygon.Covers(Elements.Geometry.Polygon)
  id: Covers(Elements.Geometry.Polygon)
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Covers(Polygon)
  nameWithType: Polygon.Covers(Polygon)
  fullName: Elements.Geometry.Polygon.Covers(Elements.Geometry.Polygon)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Covers
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 102
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nTests if the supplied Polygon is within this Polygon with or without edge coincident vertices when compared on a shared plane.\n"
  example: []
  syntax:
    content: public bool Covers(Polygon polygon)
    parameters:
    - id: polygon
      type: Elements.Geometry.Polygon
      description: The Polygon to compare to this Polygon.
    return:
      type: System.Boolean
      description: "\nReturns true if every vertex of the supplied Polygon is within this Polygon or coincident with an edge when compared on a shared plane. Returns false if any vertex of the supplied Polygon is outside this Polygon, or if the supplied Polygon is null.\n"
    content.vb: Public Function Covers(polygon As Polygon) As Boolean
  overload: Elements.Geometry.Polygon.Covers*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Polygon.Disjoint(Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Polygon.Disjoint(Elements.Geometry.Vector3)
  id: Disjoint(Elements.Geometry.Vector3)
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Disjoint(Vector3)
  nameWithType: Polygon.Disjoint(Vector3)
  fullName: Elements.Geometry.Polygon.Disjoint(Elements.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Disjoint
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 127
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nTests if the supplied Vector3 is outside this Polygon when compared on a shared plane.\n"
  example: []
  syntax:
    content: public bool Disjoint(Vector3 vector)
    parameters:
    - id: vector
      type: Elements.Geometry.Vector3
      description: The Vector3 to compare to this Polygon.
    return:
      type: System.Boolean
      description: "\nReturns true if the supplied Vector3 is outside this Polygon when compared on a shared plane or if the supplied Vector3 is null.\n"
    content.vb: Public Function Disjoint(vector As Vector3) As Boolean
  overload: Elements.Geometry.Polygon.Disjoint*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Polygon.Disjoint(Elements.Geometry.Polygon)
  commentId: M:Elements.Geometry.Polygon.Disjoint(Elements.Geometry.Polygon)
  id: Disjoint(Elements.Geometry.Polygon)
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Disjoint(Polygon)
  nameWithType: Polygon.Disjoint(Polygon)
  fullName: Elements.Geometry.Polygon.Disjoint(Elements.Geometry.Polygon)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Disjoint
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 149
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nTests if the supplied Polygon and this Polygon are coincident in any way when compared on a shared plane.\n"
  example: []
  syntax:
    content: public bool Disjoint(Polygon polygon)
    parameters:
    - id: polygon
      type: Elements.Geometry.Polygon
      description: The Polygon to compare to this Polygon.
    return:
      type: System.Boolean
      description: "\nReturns true if the supplied Polygon do not intersect or touch this Polygon when compared on a shared plane or if the supplied Polygon is null.\n"
    content.vb: Public Function Disjoint(polygon As Polygon) As Boolean
  overload: Elements.Geometry.Polygon.Disjoint*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Polygon.Intersects(Elements.Geometry.Polygon)
  commentId: M:Elements.Geometry.Polygon.Intersects(Elements.Geometry.Polygon)
  id: Intersects(Elements.Geometry.Polygon)
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Intersects(Polygon)
  nameWithType: Polygon.Intersects(Polygon)
  fullName: Elements.Geometry.Polygon.Intersects(Elements.Geometry.Polygon)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Intersects
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 181
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nTests if the supplied Polygon shares one or more areas with this Polygon when compared on a shared plane.\n"
  example: []
  syntax:
    content: public bool Intersects(Polygon polygon)
    parameters:
    - id: polygon
      type: Elements.Geometry.Polygon
      description: The Polygon to compare with this Polygon.
    return:
      type: System.Boolean
      description: "\nReturns true if the supplied Polygon shares one or more areas with this Polygon when compared on a shared plane. Returns false if the supplied Polygon does not share an area with this Polygon or if the supplied Polygon is null.\n"
    content.vb: Public Function Intersects(polygon As Polygon) As Boolean
  overload: Elements.Geometry.Polygon.Intersects*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Polygon.Touches(Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Polygon.Touches(Elements.Geometry.Vector3)
  id: Touches(Elements.Geometry.Vector3)
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Touches(Vector3)
  nameWithType: Polygon.Touches(Vector3)
  fullName: Elements.Geometry.Polygon.Touches(Elements.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Touches
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 202
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nTests if the supplied Vector3 is coincident with an edge of this Polygon when compared on a shared plane.\n"
  example: []
  syntax:
    content: public bool Touches(Vector3 vector)
    parameters:
    - id: vector
      type: Elements.Geometry.Vector3
      description: The Vector3 to compare to this Polygon.
    return:
      type: System.Boolean
      description: "\nReturns true if the supplied Vector3 coincides with an edge of this Polygon when compared on a shared plane. Returns false if the supplied Vector3 is not coincident with an edge of this Polygon, or if the supplied Vector3 is null.\n"
    content.vb: Public Function Touches(vector As Vector3) As Boolean
  overload: Elements.Geometry.Polygon.Touches*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Polygon.Touches(Elements.Geometry.Polygon)
  commentId: M:Elements.Geometry.Polygon.Touches(Elements.Geometry.Polygon)
  id: Touches(Elements.Geometry.Polygon)
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Touches(Polygon)
  nameWithType: Polygon.Touches(Polygon)
  fullName: Elements.Geometry.Polygon.Touches(Elements.Geometry.Polygon)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Touches
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 224
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nTests if at least one point of an edge of the supplied Polygon is shared with an edge of this Polygon without the Polygons interesecting when compared on a shared plane.\n"
  example: []
  syntax:
    content: public bool Touches(Polygon polygon)
    parameters:
    - id: polygon
      type: Elements.Geometry.Polygon
      description: The Polygon to compare to this Polygon.
    return:
      type: System.Boolean
      description: "\nReturns true if the supplied Polygon shares at least one edge point with this Polygon without the Polygons intersecting when compared on a shared plane. Returns false if the Polygons intersect, are disjoint, or if the supplied Polygon is null.\n"
    content.vb: Public Function Touches(polygon As Polygon) As Boolean
  overload: Elements.Geometry.Polygon.Touches*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Polygon.Difference(Elements.Geometry.Polygon)
  commentId: M:Elements.Geometry.Polygon.Difference(Elements.Geometry.Polygon)
  id: Difference(Elements.Geometry.Polygon)
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Difference(Polygon)
  nameWithType: Polygon.Difference(Polygon)
  fullName: Elements.Geometry.Polygon.Difference(Elements.Geometry.Polygon)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Difference
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 251
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConstructs the geometric difference between this Polygon and the supplied Polygon.\n"
  example: []
  syntax:
    content: public IList<Polygon> Difference(Polygon polygon)
    parameters:
    - id: polygon
      type: Elements.Geometry.Polygon
      description: The intersecting Polygon.
    return:
      type: System.Collections.Generic.IList{Elements.Geometry.Polygon}
      description: "\nReturns a list of Polygons representing the subtraction of the supplied Polygon from this Polygon.\nReturns null if the area of this Polygon is entirely subtracted.\nReturns a list containing a representation of the perimeter of this Polygon if the two Polygons do not intersect.\n"
    content.vb: Public Function Difference(polygon As Polygon) As IList(Of Polygon)
  overload: Elements.Geometry.Polygon.Difference*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Polygon.Difference(System.Collections.Generic.IList{Elements.Geometry.Polygon})
  commentId: M:Elements.Geometry.Polygon.Difference(System.Collections.Generic.IList{Elements.Geometry.Polygon})
  id: Difference(System.Collections.Generic.IList{Elements.Geometry.Polygon})
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Difference(IList<Polygon>)
  nameWithType: Polygon.Difference(IList<Polygon>)
  fullName: Elements.Geometry.Polygon.Difference(System.Collections.Generic.IList<Elements.Geometry.Polygon>)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Difference
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 281
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConstructs the geometric difference between this Polygon and the supplied Polygons.\n"
  example: []
  syntax:
    content: public IList<Polygon> Difference(IList<Polygon> difPolys)
    parameters:
    - id: difPolys
      type: System.Collections.Generic.IList{Elements.Geometry.Polygon}
      description: The list of intersecting Polygons.
    return:
      type: System.Collections.Generic.IList{Elements.Geometry.Polygon}
      description: "\nReturns a list of Polygons representing the subtraction of the supplied Polygons from this Polygon.\nReturns null if the area of this Polygon is entirely subtracted.\nReturns a list containing a representation of the perimeter of this Polygon if the two Polygons do not intersect.\n"
    content.vb: Public Function Difference(difPolys As IList(Of Polygon)) As IList(Of Polygon)
  overload: Elements.Geometry.Polygon.Difference*
  nameWithType.vb: Polygon.Difference(IList(Of Polygon))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Elements.Geometry.Polygon.Difference(System.Collections.Generic.IList(Of Elements.Geometry.Polygon))
  name.vb: Difference(IList(Of Polygon))
- uid: Elements.Geometry.Polygon.Intersection(Elements.Geometry.Polygon)
  commentId: M:Elements.Geometry.Polygon.Intersection(Elements.Geometry.Polygon)
  id: Intersection(Elements.Geometry.Polygon)
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Intersection(Polygon)
  nameWithType: Polygon.Intersection(Polygon)
  fullName: Elements.Geometry.Polygon.Intersection(Elements.Geometry.Polygon)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Intersection
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 314
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConstructs the Polygon intersections between this Polygon and the supplied Polygon.\n"
  example: []
  syntax:
    content: public IList<Polygon> Intersection(Polygon polygon)
    parameters:
    - id: polygon
      type: Elements.Geometry.Polygon
      description: The intersecting Polygon.
    return:
      type: System.Collections.Generic.IList{Elements.Geometry.Polygon}
      description: "\nReturns a list of Polygons representing the intersection of this Polygon with the supplied Polygon.\nReturns null if the two Polygons do not intersect.\n"
    content.vb: Public Function Intersection(polygon As Polygon) As IList(Of Polygon)
  overload: Elements.Geometry.Polygon.Intersection*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Polygon.Union(Elements.Geometry.Polygon)
  commentId: M:Elements.Geometry.Polygon.Union(Elements.Geometry.Polygon)
  id: Union(Elements.Geometry.Polygon)
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Union(Polygon)
  nameWithType: Polygon.Union(Polygon)
  fullName: Elements.Geometry.Polygon.Union(Elements.Geometry.Polygon)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Union
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 343
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConstructs the geometric union between this Polygon and the supplied Polygon.\n"
  example: []
  syntax:
    content: public Polygon Union(Polygon polygon)
    parameters:
    - id: polygon
      type: Elements.Geometry.Polygon
      description: The Polygon to be combined with this Polygon.
    return:
      type: Elements.Geometry.Polygon
      description: "\nReturns a single Polygon from a successful union.\nReturns null if a union cannot be performed on the two Polygons.\n"
    content.vb: Public Function Union(polygon As Polygon) As Polygon
  overload: Elements.Geometry.Polygon.Union*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Polygon.Union(System.Collections.Generic.IList{Elements.Geometry.Polygon})
  commentId: M:Elements.Geometry.Polygon.Union(System.Collections.Generic.IList{Elements.Geometry.Polygon})
  id: Union(System.Collections.Generic.IList{Elements.Geometry.Polygon})
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Union(IList<Polygon>)
  nameWithType: Polygon.Union(IList<Polygon>)
  fullName: Elements.Geometry.Polygon.Union(System.Collections.Generic.IList<Elements.Geometry.Polygon>)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Union
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 367
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nConstructs the geometric union between this Polygon and the supplied list of Polygons.\n"
  example: []
  syntax:
    content: public Polygon Union(IList<Polygon> polygons)
    parameters:
    - id: polygons
      type: System.Collections.Generic.IList{Elements.Geometry.Polygon}
      description: The list of Polygons to be combined with this Polygon.
    return:
      type: Elements.Geometry.Polygon
      description: "\nReturns a single Polygon from a successful union.\nReturns null if a union cannot be performed on the complete list of Polygons.\n"
    content.vb: Public Function Union(polygons As IList(Of Polygon)) As Polygon
  overload: Elements.Geometry.Polygon.Union*
  nameWithType.vb: Polygon.Union(IList(Of Polygon))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Elements.Geometry.Polygon.Union(System.Collections.Generic.IList(Of Elements.Geometry.Polygon))
  name.vb: Union(IList(Of Polygon))
- uid: Elements.Geometry.Polygon.XOR(Elements.Geometry.Polygon)
  commentId: M:Elements.Geometry.Polygon.XOR(Elements.Geometry.Polygon)
  id: XOR(Elements.Geometry.Polygon)
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: XOR(Polygon)
  nameWithType: Polygon.XOR(Polygon)
  fullName: Elements.Geometry.Polygon.XOR(Elements.Geometry.Polygon)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: XOR
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 395
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nReturns Polygons representing the symmetric difference between this Polygon and the supplied Polygon.\n"
  example: []
  syntax:
    content: public IList<Polygon> XOR(Polygon polygon)
    parameters:
    - id: polygon
      type: Elements.Geometry.Polygon
      description: The intersecting polygon.
    return:
      type: System.Collections.Generic.IList{Elements.Geometry.Polygon}
      description: "\nReturns a list of Polygons representing the symmetric difference of this Polygon and the supplied Polygon.\nReturns a representation of this Polygon and the supplied Polygon if the Polygons do not intersect.\n"
    content.vb: Public Function XOR(polygon As Polygon) As IList(Of Polygon)
  overload: Elements.Geometry.Polygon.XOR*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Polygon.Offset(System.Double)
  commentId: M:Elements.Geometry.Polygon.Offset(System.Double)
  id: Offset(System.Double)
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Offset(Double)
  nameWithType: Polygon.Offset(Double)
  fullName: Elements.Geometry.Polygon.Offset(System.Double)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Offset
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 417
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nOffset this polygon by the specified amount.\n"
  example: []
  syntax:
    content: public Polygon[] Offset(double offset)
    parameters:
    - id: offset
      type: System.Double
      description: The amount to offset.
    return:
      type: Elements.Geometry.Polygon[]
      description: A new Polygon offset by offset.
    content.vb: Public Function Offset(offset As Double) As Polygon()
  overload: Elements.Geometry.Polygon.Offset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Polygon.Segments
  commentId: M:Elements.Geometry.Polygon.Segments
  id: Segments
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Segments()
  nameWithType: Polygon.Segments()
  fullName: Elements.Geometry.Polygon.Segments()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Segments
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 438
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nGet a collection a lines representing each segment of this polyline.\n"
  example: []
  syntax:
    content: public override Line[] Segments()
    return:
      type: Elements.Geometry.Line[]
      description: A collection of Lines.
    content.vb: Public Overrides Function Segments As Line()
  overridden: Elements.Geometry.Polyline.Segments
  overload: Elements.Geometry.Polygon.Segments*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Elements.Geometry.Polygon.Reversed
  commentId: M:Elements.Geometry.Polygon.Reversed
  id: Reversed
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Reversed()
  nameWithType: Polygon.Reversed()
  fullName: Elements.Geometry.Polygon.Reversed()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Reversed
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 462
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nReverse the direction of a polygon.\n"
  example: []
  syntax:
    content: public Polygon Reversed()
    return:
      type: Elements.Geometry.Polygon
      description: Returns a new Polygon whose vertices are reversed.
    content.vb: Public Function Reversed As Polygon
  overload: Elements.Geometry.Polygon.Reversed*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Polygon.Equals(System.Object)
  commentId: M:Elements.Geometry.Polygon.Equals(System.Object)
  id: Equals(System.Object)
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Polygon.Equals(Object)
  fullName: Elements.Geometry.Polygon.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Equals
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 471
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nIs this polygon equal to the provided polygon?\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: ''
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Elements.Geometry.Polygon.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Elements.Geometry.Polygon.GetHashCode
  commentId: M:Elements.Geometry.Polygon.GetHashCode
  id: GetHashCode
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Polygon.GetHashCode()
  fullName: Elements.Geometry.Polygon.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: GetHashCode
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 498
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nGet the hash code for the polygon.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: ''
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: Elements.Geometry.Polygon.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Elements.Geometry.Polygon.Project(Elements.Geometry.Plane)
  commentId: M:Elements.Geometry.Polygon.Project(Elements.Geometry.Plane)
  id: Project(Elements.Geometry.Plane)
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Project(Plane)
  nameWithType: Polygon.Project(Plane)
  fullName: Elements.Geometry.Polygon.Project(Elements.Geometry.Plane)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Project
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 507
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nProject the specified vector onto the plane.\n"
  example: []
  syntax:
    content: public Polygon Project(Plane p)
    parameters:
    - id: p
      type: Elements.Geometry.Plane
      description: ''
    return:
      type: Elements.Geometry.Polygon
    content.vb: Public Function Project(p As Plane) As Polygon
  overload: Elements.Geometry.Polygon.Project*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Polygon.ProjectAlong(Elements.Geometry.Vector3,Elements.Geometry.Plane)
  commentId: M:Elements.Geometry.Polygon.ProjectAlong(Elements.Geometry.Vector3,Elements.Geometry.Plane)
  id: ProjectAlong(Elements.Geometry.Vector3,Elements.Geometry.Plane)
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: ProjectAlong(Vector3, Plane)
  nameWithType: Polygon.ProjectAlong(Vector3, Plane)
  fullName: Elements.Geometry.Polygon.ProjectAlong(Elements.Geometry.Vector3, Elements.Geometry.Plane)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: ProjectAlong
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 523
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nProject this Polygon onto a Plane along a vector.\n"
  example: []
  syntax:
    content: public Polygon ProjectAlong(Vector3 direction, Plane p)
    parameters:
    - id: direction
      type: Elements.Geometry.Vector3
      description: The projection vector.
    - id: p
      type: Elements.Geometry.Plane
      description: The Plane onto which to project the Polygon.
    return:
      type: Elements.Geometry.Polygon
      description: A Polygon projected onto the Plane.
    content.vb: Public Function ProjectAlong(direction As Vector3, p As Plane) As Polygon
  overload: Elements.Geometry.Polygon.ProjectAlong*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Polygon.Frames(System.Double,System.Double)
  commentId: M:Elements.Geometry.Polygon.Frames(System.Double,System.Double)
  id: Frames(System.Double,System.Double)
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Frames(Double, Double)
  nameWithType: Polygon.Frames(Double, Double)
  fullName: Elements.Geometry.Polygon.Frames(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Frames
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 539
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nGet the transforms used to transform a Profile extruded along this Polyline.\n"
  example: []
  syntax:
    content: public override Transform[] Frames(double startSetback, double endSetback)
    parameters:
    - id: startSetback
      type: System.Double
      description: ''
    - id: endSetback
      type: System.Double
      description: ''
    return:
      type: Elements.Geometry.Transform[]
      description: ''
    content.vb: Public Overrides Function Frames(startSetback As Double, endSetback As Double) As Transform()
  overridden: Elements.Geometry.Polyline.Frames(System.Double,System.Double)
  overload: Elements.Geometry.Polygon.Frames*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Elements.Geometry.Polygon.Plane
  commentId: M:Elements.Geometry.Polygon.Plane
  id: Plane
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Plane()
  nameWithType: Polygon.Plane()
  fullName: Elements.Geometry.Polygon.Plane()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Plane
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 548
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCompute the Plane defined by the first three vertices of the Polygon.\n"
  example: []
  syntax:
    content: public Plane Plane()
    return:
      type: Elements.Geometry.Plane
      description: A Plane.
    content.vb: Public Function Plane As Plane
  overload: Elements.Geometry.Polygon.Plane*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Polygon.ToString
  commentId: M:Elements.Geometry.Polygon.ToString
  id: ToString
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Polygon.ToString()
  fullName: Elements.Geometry.Polygon.ToString()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: ToString
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 557
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nThe string representation of the Polygon.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string containing the string representations of this Polygon&apos;s vertices.
    content.vb: Public Overrides Function ToString As String
  overridden: Elements.Geometry.Polyline.ToString
  overload: Elements.Geometry.Polygon.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Elements.Geometry.Polygon.Length
  commentId: M:Elements.Geometry.Polygon.Length
  id: Length
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Length()
  nameWithType: Polygon.Length()
  fullName: Elements.Geometry.Polygon.Length()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Length
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 565
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCalculate the length of the polygon.\n"
  example: []
  syntax:
    content: public override double Length()
    return:
      type: System.Double
    content.vb: Public Overrides Function Length As Double
  overridden: Elements.Geometry.Polyline.Length
  overload: Elements.Geometry.Polygon.Length*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Elements.Geometry.Polygon.Centroid
  commentId: M:Elements.Geometry.Polygon.Centroid
  id: Centroid
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Centroid()
  nameWithType: Polygon.Centroid()
  fullName: Elements.Geometry.Polygon.Centroid()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Centroid
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 579
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCalculate the centroid of the polygon.\n"
  example: []
  syntax:
    content: public Vector3 Centroid()
    return:
      type: Elements.Geometry.Vector3
    content.vb: Public Function Centroid As Vector3
  overload: Elements.Geometry.Polygon.Centroid*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Polygon.Area
  commentId: M:Elements.Geometry.Polygon.Area
  id: Area
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Area()
  nameWithType: Polygon.Area()
  fullName: Elements.Geometry.Polygon.Area()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygon.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Area
    path: ../src/Elements/Geometry/Polygon.cs
    startLine: 601
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCalculate the polygon&apos;s area.\n"
  example: []
  syntax:
    content: public double Area()
    return:
      type: System.Double
    content.vb: Public Function Area As Double
  overload: Elements.Geometry.Polygon.Area*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Polygon.Rectangle(System.Double,System.Double,Elements.Geometry.Vector3,System.Double,System.Double)
  commentId: M:Elements.Geometry.Polygon.Rectangle(System.Double,System.Double,Elements.Geometry.Vector3,System.Double,System.Double)
  id: Rectangle(System.Double,System.Double,Elements.Geometry.Vector3,System.Double,System.Double)
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Rectangle(Double, Double, Vector3, Double, Double)
  nameWithType: Polygon.Rectangle(Double, Double, Vector3, Double, Double)
  fullName: Elements.Geometry.Polygon.Rectangle(System.Double, System.Double, Elements.Geometry.Vector3, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygons.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Rectangle
    path: ../src/Elements/Geometry/Polygons.cs
    startLine: 19
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCreate a rectangle.\n"
  example: []
  syntax:
    content: public static Polygon Rectangle(double width, double height, Vector3 origin = null, double verticalOffset = 0, double horizontalOffset = 0)
    parameters:
    - id: width
      type: System.Double
      description: The width of the rectangle.
    - id: height
      type: System.Double
      description: The height of the rectangle.
    - id: origin
      type: Elements.Geometry.Vector3
      description: An optional origin to displace the rectangle.
    - id: verticalOffset
      type: System.Double
      description: An optional amount the rectangle should be offset from center in the vertical direction.
    - id: horizontalOffset
      type: System.Double
      description: An optional amount the rectangle should be offset from center in the horizontal direction.
    return:
      type: Elements.Geometry.Polygon
      description: A rectangular Polygon centered around origin.
    content.vb: Public Shared Function Rectangle(width As Double, height As Double, origin As Vector3 = Nothing, verticalOffset As Double = 0, horizontalOffset As Double = 0) As Polygon
  overload: Elements.Geometry.Polygon.Rectangle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Elements.Geometry.Polygon.Rectangle(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Polygon.Rectangle(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  id: Rectangle(Elements.Geometry.Vector3,Elements.Geometry.Vector3)
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Rectangle(Vector3, Vector3)
  nameWithType: Polygon.Rectangle(Vector3, Vector3)
  fullName: Elements.Geometry.Polygon.Rectangle(Elements.Geometry.Vector3, Elements.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygons.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Rectangle
    path: ../src/Elements/Geometry/Polygons.cs
    startLine: 36
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCreate a rectangle.\n"
  example: []
  syntax:
    content: public static Polygon Rectangle(Vector3 min, Vector3 max)
    parameters:
    - id: min
      type: Elements.Geometry.Vector3
      description: The minimum coordinate.
    - id: max
      type: Elements.Geometry.Vector3
      description: The maximum coordinate.
    return:
      type: Elements.Geometry.Polygon
      description: A rectangular Polygon with its lower left corner at min and its upper right corner at max.
    content.vb: Public Shared Function Rectangle(min As Vector3, max As Vector3) As Polygon
  overload: Elements.Geometry.Polygon.Rectangle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Elements.Geometry.Polygon.Circle(System.Double,System.Int32)
  commentId: M:Elements.Geometry.Polygon.Circle(System.Double,System.Int32)
  id: Circle(System.Double,System.Int32)
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Circle(Double, Int32)
  nameWithType: Polygon.Circle(Double, Int32)
  fullName: Elements.Geometry.Polygon.Circle(System.Double, System.Int32)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygons.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Circle
    path: ../src/Elements/Geometry/Polygons.cs
    startLine: 52
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCreate a circle.\n"
  example: []
  syntax:
    content: public static Polygon Circle(double radius = 1, int divisions = 10)
    parameters:
    - id: radius
      type: System.Double
      description: The radius of the circle.
    - id: divisions
      type: System.Int32
      description: The number of divisions of the circle.
    return:
      type: Elements.Geometry.Polygon
      description: A circle as a Polygon tessellated into the specified number of divisions.
    content.vb: Public Shared Function Circle(radius As Double = 1, divisions As Integer = 10) As Polygon
  overload: Elements.Geometry.Polygon.Circle*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Elements.Geometry.Polygon.Ngon(System.Int32,System.Double)
  commentId: M:Elements.Geometry.Polygon.Ngon(System.Int32,System.Double)
  id: Ngon(System.Int32,System.Double)
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: Ngon(Int32, Double)
  nameWithType: Polygon.Ngon(Int32, Double)
  fullName: Elements.Geometry.Polygon.Ngon(System.Int32, System.Double)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygons.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Ngon
    path: ../src/Elements/Geometry/Polygons.cs
    startLine: 71
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCreate an ngon.\n"
  example: []
  syntax:
    content: public static Polygon Ngon(int sides, double radius = 0.5)
    parameters:
    - id: sides
      type: System.Int32
      description: The number of side of the Polygon.
    - id: radius
      type: System.Double
      description: The radius of the circle in which the Ngon is inscribed.
    return:
      type: Elements.Geometry.Polygon
      description: A Polygon with the specified number of sides.
    content.vb: Public Shared Function Ngon(sides As Integer, radius As Double = 0.5) As Polygon
  overload: Elements.Geometry.Polygon.Ngon*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when the radius is less than or equal to zero.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Thrown when the number of sides is less than 3.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Elements.Geometry.Polygon.L(System.Double,System.Double,System.Double)
  commentId: M:Elements.Geometry.Polygon.L(System.Double,System.Double,System.Double)
  id: L(System.Double,System.Double,System.Double)
  parent: Elements.Geometry.Polygon
  langs:
  - csharp
  - vb
  name: L(Double, Double, Double)
  nameWithType: Polygon.L(Double, Double, Double)
  fullName: Elements.Geometry.Polygon.L(System.Double, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Polygons.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: L
    path: ../src/Elements/Geometry/Polygons.cs
    startLine: 99
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry
  summary: "\nCreate an L.\n"
  example: []
  syntax:
    content: public static Polygon L(double width, double length, double thickness)
    parameters:
    - id: width
      type: System.Double
      description: The width of the L.
    - id: length
      type: System.Double
      description: The length of the L.
    - id: thickness
      type: System.Double
      description: The thickness of the L.
    return:
      type: Elements.Geometry.Polygon
      description: ''
    content.vb: Public Shared Function L(width As Double, length As Double, thickness As Double) As Polygon
  overload: Elements.Geometry.Polygon.L*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Elements.Geometry
  commentId: N:Elements.Geometry
  name: Elements.Geometry
  nameWithType: Elements.Geometry
  fullName: Elements.Geometry
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Elements.Geometry.Polyline
  commentId: T:Elements.Geometry.Polyline
  parent: Elements.Geometry
  name: Polyline
  nameWithType: Polyline
  fullName: Elements.Geometry.Polyline
- uid: Elements.Geometry.Interfaces.ICurve
  commentId: T:Elements.Geometry.Interfaces.ICurve
  parent: Elements.Geometry.Interfaces
  name: ICurve
  nameWithType: ICurve
  fullName: Elements.Geometry.Interfaces.ICurve
- uid: Elements.Geometry.Polyline.Type
  commentId: P:Elements.Geometry.Polyline.Type
  parent: Elements.Geometry.Polyline
  name: Type
  nameWithType: Polyline.Type
  fullName: Elements.Geometry.Polyline.Type
- uid: Elements.Geometry.Polyline._vertices
  commentId: F:Elements.Geometry.Polyline._vertices
  parent: Elements.Geometry.Polyline
  name: _vertices
  nameWithType: Polyline._vertices
  fullName: Elements.Geometry.Polyline._vertices
- uid: Elements.Geometry.Polyline.Vertices
  commentId: P:Elements.Geometry.Polyline.Vertices
  parent: Elements.Geometry.Polyline
  name: Vertices
  nameWithType: Polyline.Vertices
  fullName: Elements.Geometry.Polyline.Vertices
- uid: Elements.Geometry.Polyline.Start
  commentId: P:Elements.Geometry.Polyline.Start
  parent: Elements.Geometry.Polyline
  name: Start
  nameWithType: Polyline.Start
  fullName: Elements.Geometry.Polyline.Start
- uid: Elements.Geometry.Polyline.End
  commentId: P:Elements.Geometry.Polyline.End
  parent: Elements.Geometry.Polyline
  name: End
  nameWithType: Polyline.End
  fullName: Elements.Geometry.Polyline.End
- uid: Elements.Geometry.Polyline.PointAt(System.Double)
  commentId: M:Elements.Geometry.Polyline.PointAt(System.Double)
  parent: Elements.Geometry.Polyline
  isExternal: true
  name: PointAt(Double)
  nameWithType: Polyline.PointAt(Double)
  fullName: Elements.Geometry.Polyline.PointAt(System.Double)
  spec.csharp:
  - uid: Elements.Geometry.Polyline.PointAt(System.Double)
    name: PointAt
    nameWithType: Polyline.PointAt
    fullName: Elements.Geometry.Polyline.PointAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Geometry.Polyline.PointAt(System.Double)
    name: PointAt
    nameWithType: Polyline.PointAt
    fullName: Elements.Geometry.Polyline.PointAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Polyline.TransformAt(System.Double)
  commentId: M:Elements.Geometry.Polyline.TransformAt(System.Double)
  parent: Elements.Geometry.Polyline
  isExternal: true
  name: TransformAt(Double)
  nameWithType: Polyline.TransformAt(Double)
  fullName: Elements.Geometry.Polyline.TransformAt(System.Double)
  spec.csharp:
  - uid: Elements.Geometry.Polyline.TransformAt(System.Double)
    name: TransformAt
    nameWithType: Polyline.TransformAt
    fullName: Elements.Geometry.Polyline.TransformAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Geometry.Polyline.TransformAt(System.Double)
    name: TransformAt
    nameWithType: Polyline.TransformAt
    fullName: Elements.Geometry.Polyline.TransformAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Polyline.Bounds
  commentId: M:Elements.Geometry.Polyline.Bounds
  parent: Elements.Geometry.Polyline
  name: Bounds()
  nameWithType: Polyline.Bounds()
  fullName: Elements.Geometry.Polyline.Bounds()
  spec.csharp:
  - uid: Elements.Geometry.Polyline.Bounds
    name: Bounds
    nameWithType: Polyline.Bounds
    fullName: Elements.Geometry.Polyline.Bounds
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Geometry.Polyline.Bounds
    name: Bounds
    nameWithType: Polyline.Bounds
    fullName: Elements.Geometry.Polyline.Bounds
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Elements.Geometry.Interfaces
  commentId: N:Elements.Geometry.Interfaces
  name: Elements.Geometry.Interfaces
  nameWithType: Elements.Geometry.Interfaces
  fullName: Elements.Geometry.Interfaces
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: Elements.Geometry.Polygon.#ctor*
  commentId: Overload:Elements.Geometry.Polygon.#ctor
  name: Polygon
  nameWithType: Polygon.Polygon
  fullName: Elements.Geometry.Polygon.Polygon
- uid: Elements.Geometry.Vector3[]
  isExternal: true
  name: Vector3[]
  nameWithType: Vector3[]
  fullName: Elements.Geometry.Vector3[]
  nameWithType.vb: Vector3()
  fullName.vb: Elements.Geometry.Vector3()
  name.vb: Vector3()
  spec.csharp:
  - uid: Elements.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Elements.Geometry.Vector3
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Elements.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Elements.Geometry.Vector3
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Elements.Geometry.Polygon.Contains*
  commentId: Overload:Elements.Geometry.Polygon.Contains
  name: Contains
  nameWithType: Polygon.Contains
  fullName: Elements.Geometry.Polygon.Contains
- uid: Elements.Geometry.Vector3
  commentId: T:Elements.Geometry.Vector3
  parent: Elements.Geometry
  name: Vector3
  nameWithType: Vector3
  fullName: Elements.Geometry.Vector3
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Elements.Geometry.Polygon
  commentId: T:Elements.Geometry.Polygon
  parent: Elements.Geometry
  name: Polygon
  nameWithType: Polygon
  fullName: Elements.Geometry.Polygon
- uid: Elements.Geometry.Polygon.Covers*
  commentId: Overload:Elements.Geometry.Polygon.Covers
  name: Covers
  nameWithType: Polygon.Covers
  fullName: Elements.Geometry.Polygon.Covers
- uid: Elements.Geometry.Polygon.Disjoint*
  commentId: Overload:Elements.Geometry.Polygon.Disjoint
  name: Disjoint
  nameWithType: Polygon.Disjoint
  fullName: Elements.Geometry.Polygon.Disjoint
- uid: Elements.Geometry.Polygon.Intersects*
  commentId: Overload:Elements.Geometry.Polygon.Intersects
  name: Intersects
  nameWithType: Polygon.Intersects
  fullName: Elements.Geometry.Polygon.Intersects
- uid: Elements.Geometry.Polygon.Touches*
  commentId: Overload:Elements.Geometry.Polygon.Touches
  name: Touches
  nameWithType: Polygon.Touches
  fullName: Elements.Geometry.Polygon.Touches
- uid: Elements.Geometry.Polygon.Difference*
  commentId: Overload:Elements.Geometry.Polygon.Difference
  name: Difference
  nameWithType: Polygon.Difference
  fullName: Elements.Geometry.Polygon.Difference
- uid: System.Collections.Generic.IList{Elements.Geometry.Polygon}
  commentId: T:System.Collections.Generic.IList{Elements.Geometry.Polygon}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Polygon>
  nameWithType: IList<Polygon>
  fullName: System.Collections.Generic.IList<Elements.Geometry.Polygon>
  nameWithType.vb: IList(Of Polygon)
  fullName.vb: System.Collections.Generic.IList(Of Elements.Geometry.Polygon)
  name.vb: IList(Of Polygon)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Elements.Geometry.Polygon
    name: Polygon
    nameWithType: Polygon
    fullName: Elements.Geometry.Polygon
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Elements.Geometry.Polygon
    name: Polygon
    nameWithType: Polygon
    fullName: Elements.Geometry.Polygon
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Elements.Geometry.Polygon.Intersection*
  commentId: Overload:Elements.Geometry.Polygon.Intersection
  name: Intersection
  nameWithType: Polygon.Intersection
  fullName: Elements.Geometry.Polygon.Intersection
- uid: Elements.Geometry.Polygon.Union*
  commentId: Overload:Elements.Geometry.Polygon.Union
  name: Union
  nameWithType: Polygon.Union
  fullName: Elements.Geometry.Polygon.Union
- uid: Elements.Geometry.Polygon.XOR*
  commentId: Overload:Elements.Geometry.Polygon.XOR
  name: XOR
  nameWithType: Polygon.XOR
  fullName: Elements.Geometry.Polygon.XOR
- uid: Elements.Geometry.Polygon.Offset*
  commentId: Overload:Elements.Geometry.Polygon.Offset
  name: Offset
  nameWithType: Polygon.Offset
  fullName: Elements.Geometry.Polygon.Offset
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Elements.Geometry.Polygon[]
  isExternal: true
  name: Polygon[]
  nameWithType: Polygon[]
  fullName: Elements.Geometry.Polygon[]
  nameWithType.vb: Polygon()
  fullName.vb: Elements.Geometry.Polygon()
  name.vb: Polygon()
  spec.csharp:
  - uid: Elements.Geometry.Polygon
    name: Polygon
    nameWithType: Polygon
    fullName: Elements.Geometry.Polygon
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Elements.Geometry.Polygon
    name: Polygon
    nameWithType: Polygon
    fullName: Elements.Geometry.Polygon
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Elements.Geometry.Polyline.Segments
  commentId: M:Elements.Geometry.Polyline.Segments
  parent: Elements.Geometry.Polyline
  name: Segments()
  nameWithType: Polyline.Segments()
  fullName: Elements.Geometry.Polyline.Segments()
  spec.csharp:
  - uid: Elements.Geometry.Polyline.Segments
    name: Segments
    nameWithType: Polyline.Segments
    fullName: Elements.Geometry.Polyline.Segments
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Geometry.Polyline.Segments
    name: Segments
    nameWithType: Polyline.Segments
    fullName: Elements.Geometry.Polyline.Segments
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Polygon.Segments*
  commentId: Overload:Elements.Geometry.Polygon.Segments
  name: Segments
  nameWithType: Polygon.Segments
  fullName: Elements.Geometry.Polygon.Segments
- uid: Elements.Geometry.Line[]
  isExternal: true
  name: Line[]
  nameWithType: Line[]
  fullName: Elements.Geometry.Line[]
  nameWithType.vb: Line()
  fullName.vb: Elements.Geometry.Line()
  name.vb: Line()
  spec.csharp:
  - uid: Elements.Geometry.Line
    name: Line
    nameWithType: Line
    fullName: Elements.Geometry.Line
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Elements.Geometry.Line
    name: Line
    nameWithType: Line
    fullName: Elements.Geometry.Line
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Elements.Geometry.Polygon.Reversed*
  commentId: Overload:Elements.Geometry.Polygon.Reversed
  name: Reversed
  nameWithType: Polygon.Reversed
  fullName: Elements.Geometry.Polygon.Reversed
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Polygon.Equals*
  commentId: Overload:Elements.Geometry.Polygon.Equals
  name: Equals
  nameWithType: Polygon.Equals
  fullName: Elements.Geometry.Polygon.Equals
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Polygon.GetHashCode*
  commentId: Overload:Elements.Geometry.Polygon.GetHashCode
  name: GetHashCode
  nameWithType: Polygon.GetHashCode
  fullName: Elements.Geometry.Polygon.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Elements.Geometry.Polygon.Project*
  commentId: Overload:Elements.Geometry.Polygon.Project
  name: Project
  nameWithType: Polygon.Project
  fullName: Elements.Geometry.Polygon.Project
- uid: Elements.Geometry.Plane
  commentId: T:Elements.Geometry.Plane
  parent: Elements.Geometry
  name: Plane
  nameWithType: Plane
  fullName: Elements.Geometry.Plane
- uid: Elements.Geometry.Polygon.ProjectAlong*
  commentId: Overload:Elements.Geometry.Polygon.ProjectAlong
  name: ProjectAlong
  nameWithType: Polygon.ProjectAlong
  fullName: Elements.Geometry.Polygon.ProjectAlong
- uid: Elements.Geometry.Polyline.Frames(System.Double,System.Double)
  commentId: M:Elements.Geometry.Polyline.Frames(System.Double,System.Double)
  parent: Elements.Geometry.Polyline
  isExternal: true
  name: Frames(Double, Double)
  nameWithType: Polyline.Frames(Double, Double)
  fullName: Elements.Geometry.Polyline.Frames(System.Double, System.Double)
  spec.csharp:
  - uid: Elements.Geometry.Polyline.Frames(System.Double,System.Double)
    name: Frames
    nameWithType: Polyline.Frames
    fullName: Elements.Geometry.Polyline.Frames
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Geometry.Polyline.Frames(System.Double,System.Double)
    name: Frames
    nameWithType: Polyline.Frames
    fullName: Elements.Geometry.Polyline.Frames
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Polygon.Frames*
  commentId: Overload:Elements.Geometry.Polygon.Frames
  name: Frames
  nameWithType: Polygon.Frames
  fullName: Elements.Geometry.Polygon.Frames
- uid: Elements.Geometry.Transform[]
  isExternal: true
  name: Transform[]
  nameWithType: Transform[]
  fullName: Elements.Geometry.Transform[]
  nameWithType.vb: Transform()
  fullName.vb: Elements.Geometry.Transform()
  name.vb: Transform()
  spec.csharp:
  - uid: Elements.Geometry.Transform
    name: Transform
    nameWithType: Transform
    fullName: Elements.Geometry.Transform
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Elements.Geometry.Transform
    name: Transform
    nameWithType: Transform
    fullName: Elements.Geometry.Transform
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Elements.Geometry.Polygon.Plane*
  commentId: Overload:Elements.Geometry.Polygon.Plane
  name: Plane
  nameWithType: Polygon.Plane
  fullName: Elements.Geometry.Polygon.Plane
- uid: Elements.Geometry.Polyline.ToString
  commentId: M:Elements.Geometry.Polyline.ToString
  parent: Elements.Geometry.Polyline
  name: ToString()
  nameWithType: Polyline.ToString()
  fullName: Elements.Geometry.Polyline.ToString()
  spec.csharp:
  - uid: Elements.Geometry.Polyline.ToString
    name: ToString
    nameWithType: Polyline.ToString
    fullName: Elements.Geometry.Polyline.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Geometry.Polyline.ToString
    name: ToString
    nameWithType: Polyline.ToString
    fullName: Elements.Geometry.Polyline.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Polygon.ToString*
  commentId: Overload:Elements.Geometry.Polygon.ToString
  name: ToString
  nameWithType: Polygon.ToString
  fullName: Elements.Geometry.Polygon.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Elements.Geometry.Polyline.Length
  commentId: M:Elements.Geometry.Polyline.Length
  parent: Elements.Geometry.Polyline
  name: Length()
  nameWithType: Polyline.Length()
  fullName: Elements.Geometry.Polyline.Length()
  spec.csharp:
  - uid: Elements.Geometry.Polyline.Length
    name: Length
    nameWithType: Polyline.Length
    fullName: Elements.Geometry.Polyline.Length
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Geometry.Polyline.Length
    name: Length
    nameWithType: Polyline.Length
    fullName: Elements.Geometry.Polyline.Length
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Polygon.Length*
  commentId: Overload:Elements.Geometry.Polygon.Length
  name: Length
  nameWithType: Polygon.Length
  fullName: Elements.Geometry.Polygon.Length
- uid: Elements.Geometry.Polygon.Centroid*
  commentId: Overload:Elements.Geometry.Polygon.Centroid
  name: Centroid
  nameWithType: Polygon.Centroid
  fullName: Elements.Geometry.Polygon.Centroid
- uid: Elements.Geometry.Polygon.Area*
  commentId: Overload:Elements.Geometry.Polygon.Area
  name: Area
  nameWithType: Polygon.Area
  fullName: Elements.Geometry.Polygon.Area
- uid: Elements.Geometry.Polygon.Rectangle*
  commentId: Overload:Elements.Geometry.Polygon.Rectangle
  name: Rectangle
  nameWithType: Polygon.Rectangle
  fullName: Elements.Geometry.Polygon.Rectangle
- uid: Elements.Geometry.Polygon.Circle*
  commentId: Overload:Elements.Geometry.Polygon.Circle
  name: Circle
  nameWithType: Polygon.Circle
  fullName: Elements.Geometry.Polygon.Circle
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
- uid: Elements.Geometry.Polygon.Ngon*
  commentId: Overload:Elements.Geometry.Polygon.Ngon
  name: Ngon
  nameWithType: Polygon.Ngon
  fullName: Elements.Geometry.Polygon.Ngon
- uid: Elements.Geometry.Polygon.L*
  commentId: Overload:Elements.Geometry.Polygon.L
  name: L
  nameWithType: Polygon.L
  fullName: Elements.Geometry.Polygon.L
