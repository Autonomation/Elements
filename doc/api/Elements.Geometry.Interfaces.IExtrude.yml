### YamlMime:ManagedReference
items:
- uid: Elements.Geometry.Interfaces.IExtrude
  commentId: T:Elements.Geometry.Interfaces.IExtrude
  id: IExtrude
  parent: Elements.Geometry.Interfaces
  children:
  - Elements.Geometry.Interfaces.IExtrude.BothSides
  - Elements.Geometry.Interfaces.IExtrude.ExtrudeDepth
  - Elements.Geometry.Interfaces.IExtrude.ExtrudeDirection
  langs:
  - csharp
  - vb
  name: IExtrude
  nameWithType: IExtrude
  fullName: Elements.Geometry.Interfaces.IExtrude
  type: Interface
  source:
    remote:
      path: src/Elements/Geometry/Interfaces/IExtrude.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: IExtrude
    path: ../src/Elements/Geometry/Interfaces/IExtrude.cs
    startLine: 5
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Interfaces
  summary: "\nExtrudes a closed profile in a direction to create a solid.\n"
  example: []
  syntax:
    content: 'public interface IExtrude : IProfile'
    content.vb: >-
      Public Interface IExtrude
          Inherits IProfile
  inheritedMembers:
  - Elements.Geometry.Interfaces.IProfile.Profile
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Elements.Geometry.Interfaces.IExtrude.ExtrudeDirection
  commentId: P:Elements.Geometry.Interfaces.IExtrude.ExtrudeDirection
  id: ExtrudeDirection
  parent: Elements.Geometry.Interfaces.IExtrude
  langs:
  - csharp
  - vb
  name: ExtrudeDirection
  nameWithType: IExtrude.ExtrudeDirection
  fullName: Elements.Geometry.Interfaces.IExtrude.ExtrudeDirection
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Interfaces/IExtrude.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: ExtrudeDirection
    path: ../src/Elements/Geometry/Interfaces/IExtrude.cs
    startLine: 10
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Interfaces
  summary: "\nThe direction of the extrusion.\n"
  example: []
  syntax:
    content: Vector3 ExtrudeDirection { get; }
    parameters: []
    return:
      type: Elements.Geometry.Vector3
    content.vb: ReadOnly Property ExtrudeDirection As Vector3
  overload: Elements.Geometry.Interfaces.IExtrude.ExtrudeDirection*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Elements.Geometry.Interfaces.IExtrude.ExtrudeDepth
  commentId: P:Elements.Geometry.Interfaces.IExtrude.ExtrudeDepth
  id: ExtrudeDepth
  parent: Elements.Geometry.Interfaces.IExtrude
  langs:
  - csharp
  - vb
  name: ExtrudeDepth
  nameWithType: IExtrude.ExtrudeDepth
  fullName: Elements.Geometry.Interfaces.IExtrude.ExtrudeDepth
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Interfaces/IExtrude.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: ExtrudeDepth
    path: ../src/Elements/Geometry/Interfaces/IExtrude.cs
    startLine: 15
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Interfaces
  summary: "\nThe depth of the extrusion.\n"
  example: []
  syntax:
    content: double ExtrudeDepth { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: ReadOnly Property ExtrudeDepth As Double
  overload: Elements.Geometry.Interfaces.IExtrude.ExtrudeDepth*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Elements.Geometry.Interfaces.IExtrude.BothSides
  commentId: P:Elements.Geometry.Interfaces.IExtrude.BothSides
  id: BothSides
  parent: Elements.Geometry.Interfaces.IExtrude
  langs:
  - csharp
  - vb
  name: BothSides
  nameWithType: IExtrude.BothSides
  fullName: Elements.Geometry.Interfaces.IExtrude.BothSides
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Interfaces/IExtrude.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: BothSides
    path: ../src/Elements/Geometry/Interfaces/IExtrude.cs
    startLine: 20
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Interfaces
  summary: "\nExtrude to both sides?\n"
  example: []
  syntax:
    content: bool BothSides { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property BothSides As Boolean
  overload: Elements.Geometry.Interfaces.IExtrude.BothSides*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Elements.Geometry.Interfaces
  commentId: N:Elements.Geometry.Interfaces
  name: Elements.Geometry.Interfaces
  nameWithType: Elements.Geometry.Interfaces
  fullName: Elements.Geometry.Interfaces
- uid: Elements.Geometry.Interfaces.IProfile.Profile
  commentId: P:Elements.Geometry.Interfaces.IProfile.Profile
  parent: Elements.Geometry.Interfaces.IProfile
  name: Profile
  nameWithType: IProfile.Profile
  fullName: Elements.Geometry.Interfaces.IProfile.Profile
- uid: Elements.Geometry.Interfaces.IProfile
  commentId: T:Elements.Geometry.Interfaces.IProfile
  parent: Elements.Geometry.Interfaces
  name: IProfile
  nameWithType: IProfile
  fullName: Elements.Geometry.Interfaces.IProfile
- uid: Elements.Geometry.Interfaces.IExtrude.ExtrudeDirection*
  commentId: Overload:Elements.Geometry.Interfaces.IExtrude.ExtrudeDirection
  name: ExtrudeDirection
  nameWithType: IExtrude.ExtrudeDirection
  fullName: Elements.Geometry.Interfaces.IExtrude.ExtrudeDirection
- uid: Elements.Geometry.Vector3
  commentId: T:Elements.Geometry.Vector3
  parent: Elements.Geometry
  name: Vector3
  nameWithType: Vector3
  fullName: Elements.Geometry.Vector3
- uid: Elements.Geometry
  commentId: N:Elements.Geometry
  name: Elements.Geometry
  nameWithType: Elements.Geometry
  fullName: Elements.Geometry
- uid: Elements.Geometry.Interfaces.IExtrude.ExtrudeDepth*
  commentId: Overload:Elements.Geometry.Interfaces.IExtrude.ExtrudeDepth
  name: ExtrudeDepth
  nameWithType: IExtrude.ExtrudeDepth
  fullName: Elements.Geometry.Interfaces.IExtrude.ExtrudeDepth
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Elements.Geometry.Interfaces.IExtrude.BothSides*
  commentId: Overload:Elements.Geometry.Interfaces.IExtrude.BothSides
  name: BothSides
  nameWithType: IExtrude.BothSides
  fullName: Elements.Geometry.Interfaces.IExtrude.BothSides
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
