### YamlMime:ManagedReference
items:
- uid: Elements.Geometry.Solids.Solid
  commentId: T:Elements.Geometry.Solids.Solid
  id: Solid
  parent: Elements.Geometry.Solids
  children:
  - Elements.Geometry.Solids.Solid.#ctor
  - Elements.Geometry.Solids.Solid.AddEdge(Elements.Geometry.Solids.Vertex,Elements.Geometry.Solids.Vertex)
  - Elements.Geometry.Solids.Solid.AddEdges(Elements.Geometry.Polygon)
  - Elements.Geometry.Solids.Solid.AddFace(Elements.Geometry.Polygon,Elements.Geometry.Polygon[])
  - Elements.Geometry.Solids.Solid.AddFace(Elements.Geometry.Solids.Loop,Elements.Geometry.Solids.Loop[])
  - Elements.Geometry.Solids.Solid.AddVertex(Elements.Geometry.Vector3)
  - Elements.Geometry.Solids.Solid.Cap(Elements.Geometry.Solids.Edge[][],System.Boolean)
  - Elements.Geometry.Solids.Solid.CreateLamina(Elements.Geometry.Vector3[])
  - Elements.Geometry.Solids.Solid.Edges
  - Elements.Geometry.Solids.Solid.Faces
  - Elements.Geometry.Solids.Solid.LoopFromPolygon(Elements.Geometry.Polygon)
  - Elements.Geometry.Solids.Solid.SweepFace(Elements.Geometry.Polygon,Elements.Geometry.Polygon[],Elements.Geometry.Vector3,System.Double,System.Boolean)
  - Elements.Geometry.Solids.Solid.SweepFace(Elements.Geometry.Polygon,Elements.Geometry.Polygon[],System.Double,System.Boolean)
  - Elements.Geometry.Solids.Solid.SweepFaceAlongCurve(Elements.Geometry.Polygon,Elements.Geometry.Polygon[],Elements.Geometry.Interfaces.ICurve,System.Double,System.Double)
  - Elements.Geometry.Solids.Solid.Tessellate(Elements.Geometry.Mesh@)
  - Elements.Geometry.Solids.Solid.ToString
  - Elements.Geometry.Solids.Solid.Vertices
  langs:
  - csharp
  - vb
  name: Solid
  nameWithType: Solid
  fullName: Elements.Geometry.Solids.Solid
  type: Class
  source:
    remote:
      path: src/Elements/Geometry/Solids/Solid.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Solid
    path: ../src/Elements/Geometry/Solids/Solid.cs
    startLine: 16
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Solids
  summary: "\nA boundary representation of a solid.\n"
  example: []
  syntax:
    content: 'public class Solid : ITessellate'
    content.vb: >-
      Public Class Solid
          Implements ITessellate
  inheritance:
  - System.Object
  implements:
  - Elements.Geometry.Interfaces.ITessellate
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Elements.Geometry.Solids.Solid.Faces
  commentId: P:Elements.Geometry.Solids.Solid.Faces
  id: Faces
  parent: Elements.Geometry.Solids.Solid
  langs:
  - csharp
  - vb
  name: Faces
  nameWithType: Solid.Faces
  fullName: Elements.Geometry.Solids.Solid.Faces
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Solids/Solid.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Faces
    path: ../src/Elements/Geometry/Solids/Solid.cs
    startLine: 25
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Solids
  summary: "\nThe Faces of the Solid.\n"
  example: []
  syntax:
    content: public Dictionary<long, Face> Faces { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.Int64,Elements.Geometry.Solids.Face}
    content.vb: Public ReadOnly Property Faces As Dictionary(Of Long, Face)
  overload: Elements.Geometry.Solids.Solid.Faces*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Geometry.Solids.Solid.Edges
  commentId: P:Elements.Geometry.Solids.Solid.Edges
  id: Edges
  parent: Elements.Geometry.Solids.Solid
  langs:
  - csharp
  - vb
  name: Edges
  nameWithType: Solid.Edges
  fullName: Elements.Geometry.Solids.Solid.Edges
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Solids/Solid.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Edges
    path: ../src/Elements/Geometry/Solids/Solid.cs
    startLine: 30
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Solids
  summary: "\nThe edges of the solid.\n"
  example: []
  syntax:
    content: public Dictionary<long, Edge> Edges { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.Int64,Elements.Geometry.Solids.Edge}
    content.vb: Public ReadOnly Property Edges As Dictionary(Of Long, Edge)
  overload: Elements.Geometry.Solids.Solid.Edges*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Geometry.Solids.Solid.Vertices
  commentId: P:Elements.Geometry.Solids.Solid.Vertices
  id: Vertices
  parent: Elements.Geometry.Solids.Solid
  langs:
  - csharp
  - vb
  name: Vertices
  nameWithType: Solid.Vertices
  fullName: Elements.Geometry.Solids.Solid.Vertices
  type: Property
  source:
    remote:
      path: src/Elements/Geometry/Solids/Solid.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Vertices
    path: ../src/Elements/Geometry/Solids/Solid.cs
    startLine: 35
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Solids
  summary: "\nThe vertices of the solid.\n"
  example: []
  syntax:
    content: public Dictionary<long, Vertex> Vertices { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.Int64,Elements.Geometry.Solids.Vertex}
    content.vb: Public ReadOnly Property Vertices As Dictionary(Of Long, Vertex)
  overload: Elements.Geometry.Solids.Solid.Vertices*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Elements.Geometry.Solids.Solid.#ctor
  commentId: M:Elements.Geometry.Solids.Solid.#ctor
  id: '#ctor'
  parent: Elements.Geometry.Solids.Solid
  langs:
  - csharp
  - vb
  name: Solid()
  nameWithType: Solid.Solid()
  fullName: Elements.Geometry.Solids.Solid.Solid()
  type: Constructor
  source:
    remote:
      path: src/Elements/Geometry/Solids/Solid.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: .ctor
    path: ../src/Elements/Geometry/Solids/Solid.cs
    startLine: 40
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Solids
  summary: "\nConstruct a solid.\n"
  example: []
  syntax:
    content: public Solid()
    content.vb: Public Sub New
  overload: Elements.Geometry.Solids.Solid.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Solids.Solid.CreateLamina(Elements.Geometry.Vector3[])
  commentId: M:Elements.Geometry.Solids.Solid.CreateLamina(Elements.Geometry.Vector3[])
  id: CreateLamina(Elements.Geometry.Vector3[])
  parent: Elements.Geometry.Solids.Solid
  langs:
  - csharp
  - vb
  name: CreateLamina(Vector3[])
  nameWithType: Solid.CreateLamina(Vector3[])
  fullName: Elements.Geometry.Solids.Solid.CreateLamina(Elements.Geometry.Vector3[])
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Solids/Solid.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: CreateLamina
    path: ../src/Elements/Geometry/Solids/Solid.cs
    startLine: 51
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Solids
  summary: "\nConstruct a lamina solid.\n"
  example: []
  syntax:
    content: public static Solid CreateLamina(Vector3[] perimeter)
    parameters:
    - id: perimeter
      type: Elements.Geometry.Vector3[]
      description: The perimeter of the lamina&apos;s faces.
    return:
      type: Elements.Geometry.Solids.Solid
    content.vb: Public Shared Function CreateLamina(perimeter As Vector3()) As Solid
  overload: Elements.Geometry.Solids.Solid.CreateLamina*
  nameWithType.vb: Solid.CreateLamina(Vector3())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Elements.Geometry.Solids.Solid.CreateLamina(Elements.Geometry.Vector3())
  name.vb: CreateLamina(Vector3())
- uid: Elements.Geometry.Solids.Solid.SweepFace(Elements.Geometry.Polygon,Elements.Geometry.Polygon[],System.Double,System.Boolean)
  commentId: M:Elements.Geometry.Solids.Solid.SweepFace(Elements.Geometry.Polygon,Elements.Geometry.Polygon[],System.Double,System.Boolean)
  id: SweepFace(Elements.Geometry.Polygon,Elements.Geometry.Polygon[],System.Double,System.Boolean)
  parent: Elements.Geometry.Solids.Solid
  langs:
  - csharp
  - vb
  name: SweepFace(Polygon, Polygon[], Double, Boolean)
  nameWithType: Solid.SweepFace(Polygon, Polygon[], Double, Boolean)
  fullName: Elements.Geometry.Solids.Solid.SweepFace(Elements.Geometry.Polygon, Elements.Geometry.Polygon[], System.Double, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Solids/Solid.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: SweepFace
    path: ../src/Elements/Geometry/Solids/Solid.cs
    startLine: 77
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Solids
  summary: "\nConstruct a solid by sweeping a face.\n"
  example: []
  syntax:
    content: public static Solid SweepFace(Polygon perimeter, Polygon[] holes, double distance, bool bothSides = false)
    parameters:
    - id: perimeter
      type: Elements.Geometry.Polygon
      description: The perimeter of the face to sweep.
    - id: holes
      type: Elements.Geometry.Polygon[]
      description: The holes of the face to sweep.
    - id: distance
      type: System.Double
      description: The distance to sweep.
    - id: bothSides
      type: System.Boolean
      description: 'Should the sweep start offset by direction distance/2? '
    return:
      type: Elements.Geometry.Solids.Solid
      description: A solid.
    content.vb: Public Shared Function SweepFace(perimeter As Polygon, holes As Polygon(), distance As Double, bothSides As Boolean = False) As Solid
  overload: Elements.Geometry.Solids.Solid.SweepFace*
  nameWithType.vb: Solid.SweepFace(Polygon, Polygon(), Double, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Elements.Geometry.Solids.Solid.SweepFace(Elements.Geometry.Polygon, Elements.Geometry.Polygon(), System.Double, System.Boolean)
  name.vb: SweepFace(Polygon, Polygon(), Double, Boolean)
- uid: Elements.Geometry.Solids.Solid.SweepFaceAlongCurve(Elements.Geometry.Polygon,Elements.Geometry.Polygon[],Elements.Geometry.Interfaces.ICurve,System.Double,System.Double)
  commentId: M:Elements.Geometry.Solids.Solid.SweepFaceAlongCurve(Elements.Geometry.Polygon,Elements.Geometry.Polygon[],Elements.Geometry.Interfaces.ICurve,System.Double,System.Double)
  id: SweepFaceAlongCurve(Elements.Geometry.Polygon,Elements.Geometry.Polygon[],Elements.Geometry.Interfaces.ICurve,System.Double,System.Double)
  parent: Elements.Geometry.Solids.Solid
  langs:
  - csharp
  - vb
  name: SweepFaceAlongCurve(Polygon, Polygon[], ICurve, Double, Double)
  nameWithType: Solid.SweepFaceAlongCurve(Polygon, Polygon[], ICurve, Double, Double)
  fullName: Elements.Geometry.Solids.Solid.SweepFaceAlongCurve(Elements.Geometry.Polygon, Elements.Geometry.Polygon[], Elements.Geometry.Interfaces.ICurve, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Solids/Solid.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: SweepFaceAlongCurve
    path: ../src/Elements/Geometry/Solids/Solid.cs
    startLine: 91
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Solids
  summary: "\nConstruct a solid by sweeping a face along a curve.\n"
  example: []
  syntax:
    content: public static Solid SweepFaceAlongCurve(Polygon perimeter, Polygon[] holes, ICurve curve, double startSetback = 0, double endSetback = 0)
    parameters:
    - id: perimeter
      type: Elements.Geometry.Polygon
      description: The perimeter of the face to sweep.
    - id: holes
      type: Elements.Geometry.Polygon[]
      description: The holes of the face to sweep.
    - id: curve
      type: Elements.Geometry.Interfaces.ICurve
      description: The curve along which to sweep.
    - id: startSetback
      type: System.Double
      description: The setback of the sweep from the start of the curve.
    - id: endSetback
      type: System.Double
      description: The setback of the sweep from the end of the curve.
    return:
      type: Elements.Geometry.Solids.Solid
      description: A solid.
    content.vb: Public Shared Function SweepFaceAlongCurve(perimeter As Polygon, holes As Polygon(), curve As ICurve, startSetback As Double = 0, endSetback As Double = 0) As Solid
  overload: Elements.Geometry.Solids.Solid.SweepFaceAlongCurve*
  nameWithType.vb: Solid.SweepFaceAlongCurve(Polygon, Polygon(), ICurve, Double, Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Elements.Geometry.Solids.Solid.SweepFaceAlongCurve(Elements.Geometry.Polygon, Elements.Geometry.Polygon(), Elements.Geometry.Interfaces.ICurve, System.Double, System.Double)
  name.vb: SweepFaceAlongCurve(Polygon, Polygon(), ICurve, Double, Double)
- uid: Elements.Geometry.Solids.Solid.SweepFace(Elements.Geometry.Polygon,Elements.Geometry.Polygon[],Elements.Geometry.Vector3,System.Double,System.Boolean)
  commentId: M:Elements.Geometry.Solids.Solid.SweepFace(Elements.Geometry.Polygon,Elements.Geometry.Polygon[],Elements.Geometry.Vector3,System.Double,System.Boolean)
  id: SweepFace(Elements.Geometry.Polygon,Elements.Geometry.Polygon[],Elements.Geometry.Vector3,System.Double,System.Boolean)
  parent: Elements.Geometry.Solids.Solid
  langs:
  - csharp
  - vb
  name: SweepFace(Polygon, Polygon[], Vector3, Double, Boolean)
  nameWithType: Solid.SweepFace(Polygon, Polygon[], Vector3, Double, Boolean)
  fullName: Elements.Geometry.Solids.Solid.SweepFace(Elements.Geometry.Polygon, Elements.Geometry.Polygon[], Elements.Geometry.Vector3, System.Double, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Solids/Solid.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: SweepFace
    path: ../src/Elements/Geometry/Solids/Solid.cs
    startLine: 158
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Solids
  summary: "\nConstruct a solid by sweeping a face in a direction.\n"
  example: []
  syntax:
    content: public static Solid SweepFace(Polygon perimeter, Polygon[] holes, Vector3 direction, double distance, bool bothSides = false)
    parameters:
    - id: perimeter
      type: Elements.Geometry.Polygon
      description: The perimeter of the face to sweep.
    - id: holes
      type: Elements.Geometry.Polygon[]
      description: The holes of the face to sweep.
    - id: direction
      type: Elements.Geometry.Vector3
      description: The direction in which to sweep.
    - id: distance
      type: System.Double
      description: The distance to sweep.
    - id: bothSides
      type: System.Boolean
      description: 'Should the sweep start offset by direction distance/2? '
    return:
      type: Elements.Geometry.Solids.Solid
      description: A solid.
    content.vb: Public Shared Function SweepFace(perimeter As Polygon, holes As Polygon(), direction As Vector3, distance As Double, bothSides As Boolean = False) As Solid
  overload: Elements.Geometry.Solids.Solid.SweepFace*
  nameWithType.vb: Solid.SweepFace(Polygon, Polygon(), Vector3, Double, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Elements.Geometry.Solids.Solid.SweepFace(Elements.Geometry.Polygon, Elements.Geometry.Polygon(), Elements.Geometry.Vector3, System.Double, System.Boolean)
  name.vb: SweepFace(Polygon, Polygon(), Vector3, Double, Boolean)
- uid: Elements.Geometry.Solids.Solid.AddVertex(Elements.Geometry.Vector3)
  commentId: M:Elements.Geometry.Solids.Solid.AddVertex(Elements.Geometry.Vector3)
  id: AddVertex(Elements.Geometry.Vector3)
  parent: Elements.Geometry.Solids.Solid
  langs:
  - csharp
  - vb
  name: AddVertex(Vector3)
  nameWithType: Solid.AddVertex(Vector3)
  fullName: Elements.Geometry.Solids.Solid.AddVertex(Elements.Geometry.Vector3)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Solids/Solid.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: AddVertex
    path: ../src/Elements/Geometry/Solids/Solid.cs
    startLine: 220
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Solids
  summary: "\nAdd a Vertex to the Solid.\n"
  example: []
  syntax:
    content: public Vertex AddVertex(Vector3 position)
    parameters:
    - id: position
      type: Elements.Geometry.Vector3
      description: ''
    return:
      type: Elements.Geometry.Solids.Vertex
      description: The newly added vertex.
    content.vb: Public Function AddVertex(position As Vector3) As Vertex
  overload: Elements.Geometry.Solids.Solid.AddVertex*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Solids.Solid.AddFace(Elements.Geometry.Polygon,Elements.Geometry.Polygon[])
  commentId: M:Elements.Geometry.Solids.Solid.AddFace(Elements.Geometry.Polygon,Elements.Geometry.Polygon[])
  id: AddFace(Elements.Geometry.Polygon,Elements.Geometry.Polygon[])
  parent: Elements.Geometry.Solids.Solid
  langs:
  - csharp
  - vb
  name: AddFace(Polygon, Polygon[])
  nameWithType: Solid.AddFace(Polygon, Polygon[])
  fullName: Elements.Geometry.Solids.Solid.AddFace(Elements.Geometry.Polygon, Elements.Geometry.Polygon[])
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Solids/Solid.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: AddFace
    path: ../src/Elements/Geometry/Solids/Solid.cs
    startLine: 234
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Solids
  summary: "\nAdd a Face to the Solid.\n"
  example: []
  syntax:
    content: public Face AddFace(Polygon outer, Polygon[] inner = null)
    parameters:
    - id: outer
      type: Elements.Geometry.Polygon
      description: A polygon representing the perimeter of the face.
    - id: inner
      type: Elements.Geometry.Polygon[]
      description: An array of polygons representing the holes in the face.
    return:
      type: Elements.Geometry.Solids.Face
      description: The newly added face.
    content.vb: Public Function AddFace(outer As Polygon, inner As Polygon() = Nothing) As Face
  overload: Elements.Geometry.Solids.Solid.AddFace*
  nameWithType.vb: Solid.AddFace(Polygon, Polygon())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Elements.Geometry.Solids.Solid.AddFace(Elements.Geometry.Polygon, Elements.Geometry.Polygon())
  name.vb: AddFace(Polygon, Polygon())
- uid: Elements.Geometry.Solids.Solid.AddEdge(Elements.Geometry.Solids.Vertex,Elements.Geometry.Solids.Vertex)
  commentId: M:Elements.Geometry.Solids.Solid.AddEdge(Elements.Geometry.Solids.Vertex,Elements.Geometry.Solids.Vertex)
  id: AddEdge(Elements.Geometry.Solids.Vertex,Elements.Geometry.Solids.Vertex)
  parent: Elements.Geometry.Solids.Solid
  langs:
  - csharp
  - vb
  name: AddEdge(Vertex, Vertex)
  nameWithType: Solid.AddEdge(Vertex, Vertex)
  fullName: Elements.Geometry.Solids.Solid.AddEdge(Elements.Geometry.Solids.Vertex, Elements.Geometry.Solids.Vertex)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Solids/Solid.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: AddEdge
    path: ../src/Elements/Geometry/Solids/Solid.cs
    startLine: 258
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Solids
  summary: "\nAdd an edge to the solid.\n"
  example: []
  syntax:
    content: public Edge AddEdge(Vertex from, Vertex to)
    parameters:
    - id: from
      type: Elements.Geometry.Solids.Vertex
      description: The start vertex.
    - id: to
      type: Elements.Geometry.Solids.Vertex
      description: The end vertex.
    return:
      type: Elements.Geometry.Solids.Edge
      description: The newly added edge.
    content.vb: Public Function AddEdge(from As Vertex, to As Vertex) As Edge
  overload: Elements.Geometry.Solids.Solid.AddEdge*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Solids.Solid.AddFace(Elements.Geometry.Solids.Loop,Elements.Geometry.Solids.Loop[])
  commentId: M:Elements.Geometry.Solids.Solid.AddFace(Elements.Geometry.Solids.Loop,Elements.Geometry.Solids.Loop[])
  id: AddFace(Elements.Geometry.Solids.Loop,Elements.Geometry.Solids.Loop[])
  parent: Elements.Geometry.Solids.Solid
  langs:
  - csharp
  - vb
  name: AddFace(Loop, Loop[])
  nameWithType: Solid.AddFace(Loop, Loop[])
  fullName: Elements.Geometry.Solids.Solid.AddFace(Elements.Geometry.Solids.Loop, Elements.Geometry.Solids.Loop[])
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Solids/Solid.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: AddFace
    path: ../src/Elements/Geometry/Solids/Solid.cs
    startLine: 274
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Solids
  summary: "\nAdd a face to the solid.\nProvided edges are expected to be wound CCW for outer,\nand CW for inner. The face will be linked to the edges.\n"
  example: []
  syntax:
    content: public Face AddFace(Loop outer, Loop[] inner = null)
    parameters:
    - id: outer
      type: Elements.Geometry.Solids.Loop
      description: The outer Loop of the Face.
    - id: inner
      type: Elements.Geometry.Solids.Loop[]
      description: The inner Loops of the Face.
    return:
      type: Elements.Geometry.Solids.Face
      description: The newly added Face.
    content.vb: Public Function AddFace(outer As  Loop, inner As  Loop  ()  = Nothing) As Face
  overload: Elements.Geometry.Solids.Solid.AddFace*
  nameWithType.vb: Solid.AddFace(Loop, Loop())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Elements.Geometry.Solids.Solid.AddFace(Elements.Geometry.Solids.Loop, Elements.Geometry.Solids.Loop())
  name.vb: AddFace(Loop, Loop())
- uid: Elements.Geometry.Solids.Solid.AddEdges(Elements.Geometry.Polygon)
  commentId: M:Elements.Geometry.Solids.Solid.AddEdges(Elements.Geometry.Polygon)
  id: AddEdges(Elements.Geometry.Polygon)
  parent: Elements.Geometry.Solids.Solid
  langs:
  - csharp
  - vb
  name: AddEdges(Polygon)
  nameWithType: Solid.AddEdges(Polygon)
  fullName: Elements.Geometry.Solids.Solid.AddEdges(Elements.Geometry.Polygon)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Solids/Solid.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: AddEdges
    path: ../src/Elements/Geometry/Solids/Solid.cs
    startLine: 286
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Solids
  summary: "\nCreates a series of edges from a polygon.\n"
  example: []
  syntax:
    content: public Edge[] AddEdges(Polygon p)
    parameters:
    - id: p
      type: Elements.Geometry.Polygon
      description: ''
    return:
      type: Elements.Geometry.Solids.Edge[]
    content.vb: Public Function AddEdges(p As Polygon) As Edge()
  overload: Elements.Geometry.Solids.Solid.AddEdges*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Elements.Geometry.Solids.Solid.ToString
  commentId: M:Elements.Geometry.Solids.Solid.ToString
  id: ToString
  parent: Elements.Geometry.Solids.Solid
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Solid.ToString()
  fullName: Elements.Geometry.Solids.Solid.ToString()
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Solids/Solid.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: ToString
    path: ../src/Elements/Geometry/Solids/Solid.cs
    startLine: 318
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Solids
  summary: "\nGet the string representation of the solid.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Elements.Geometry.Solids.Solid.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Elements.Geometry.Solids.Solid.Tessellate(Elements.Geometry.Mesh@)
  commentId: M:Elements.Geometry.Solids.Solid.Tessellate(Elements.Geometry.Mesh@)
  id: Tessellate(Elements.Geometry.Mesh@)
  parent: Elements.Geometry.Solids.Solid
  langs:
  - csharp
  - vb
  name: Tessellate(ref Mesh)
  nameWithType: Solid.Tessellate(ref Mesh)
  fullName: Elements.Geometry.Solids.Solid.Tessellate(ref Elements.Geometry.Mesh)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Solids/Solid.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Tessellate
    path: ../src/Elements/Geometry/Solids/Solid.cs
    startLine: 337
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Solids
  summary: "\nTriangulate this solid.\n"
  example: []
  syntax:
    content: public void Tessellate(ref Mesh mesh)
    parameters:
    - id: mesh
      type: Elements.Geometry.Mesh
      description: The mesh to which the solid&apos;s tessellated data will be added.
    content.vb: Public Sub Tessellate(ByRef mesh As Mesh)
  overload: Elements.Geometry.Solids.Solid.Tessellate*
  implements:
  - Elements.Geometry.Interfaces.ITessellate.Tessellate(Elements.Geometry.Mesh@)
  nameWithType.vb: Solid.Tessellate(ByRef Mesh)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Elements.Geometry.Solids.Solid.Tessellate(ByRef Elements.Geometry.Mesh)
  name.vb: Tessellate(ByRef Mesh)
- uid: Elements.Geometry.Solids.Solid.Cap(Elements.Geometry.Solids.Edge[][],System.Boolean)
  commentId: M:Elements.Geometry.Solids.Solid.Cap(Elements.Geometry.Solids.Edge[][],System.Boolean)
  id: Cap(Elements.Geometry.Solids.Edge[][],System.Boolean)
  parent: Elements.Geometry.Solids.Solid
  langs:
  - csharp
  - vb
  name: Cap(Edge[][], Boolean)
  nameWithType: Solid.Cap(Edge[][], Boolean)
  fullName: Elements.Geometry.Solids.Solid.Cap(Elements.Geometry.Solids.Edge[][], System.Boolean)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Solids/Solid.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: Cap
    path: ../src/Elements/Geometry/Solids/Solid.cs
    startLine: 377
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Solids
  summary: "\nCreate a face from edges.\nThe first edge array is treated as the outer edge.\nAdditional edge arrays are treated as holes.\n"
  example: []
  syntax:
    content: protected void Cap(Edge[][] edges, bool reverse = true)
    parameters:
    - id: edges
      type: Elements.Geometry.Solids.Edge[][]
      description: ''
    - id: reverse
      type: System.Boolean
      description: ''
    content.vb: Protected Sub Cap(edges As Edge()(), reverse As Boolean = True)
  overload: Elements.Geometry.Solids.Solid.Cap*
  nameWithType.vb: Solid.Cap(Edge()(), Boolean)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Elements.Geometry.Solids.Solid.Cap(Elements.Geometry.Solids.Edge()(), System.Boolean)
  name.vb: Cap(Edge()(), Boolean)
- uid: Elements.Geometry.Solids.Solid.LoopFromPolygon(Elements.Geometry.Polygon)
  commentId: M:Elements.Geometry.Solids.Solid.LoopFromPolygon(Elements.Geometry.Polygon)
  id: LoopFromPolygon(Elements.Geometry.Polygon)
  parent: Elements.Geometry.Solids.Solid
  langs:
  - csharp
  - vb
  name: LoopFromPolygon(Polygon)
  nameWithType: Solid.LoopFromPolygon(Polygon)
  fullName: Elements.Geometry.Solids.Solid.LoopFromPolygon(Elements.Geometry.Polygon)
  type: Method
  source:
    remote:
      path: src/Elements/Geometry/Solids/Solid.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: LoopFromPolygon
    path: ../src/Elements/Geometry/Solids/Solid.cs
    startLine: 411
  assemblies:
  - Hypar.Elements
  namespace: Elements.Geometry.Solids
  syntax:
    content: protected Loop LoopFromPolygon(Polygon p)
    parameters:
    - id: p
      type: Elements.Geometry.Polygon
    return:
      type: Elements.Geometry.Solids.Loop
    content.vb: 'Protected Function LoopFromPolygon(p As Polygon) As '
  overload: Elements.Geometry.Solids.Solid.LoopFromPolygon*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: Elements.Geometry.Solids
  commentId: N:Elements.Geometry.Solids
  name: Elements.Geometry.Solids
  nameWithType: Elements.Geometry.Solids
  fullName: Elements.Geometry.Solids
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Elements.Geometry.Interfaces.ITessellate
  commentId: T:Elements.Geometry.Interfaces.ITessellate
  parent: Elements.Geometry.Interfaces
  name: ITessellate
  nameWithType: ITessellate
  fullName: Elements.Geometry.Interfaces.ITessellate
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Elements.Geometry.Interfaces
  commentId: N:Elements.Geometry.Interfaces
  name: Elements.Geometry.Interfaces
  nameWithType: Elements.Geometry.Interfaces
  fullName: Elements.Geometry.Interfaces
- uid: Elements.Geometry.Solids.Solid.Faces*
  commentId: Overload:Elements.Geometry.Solids.Solid.Faces
  name: Faces
  nameWithType: Solid.Faces
  fullName: Elements.Geometry.Solids.Solid.Faces
- uid: System.Collections.Generic.Dictionary{System.Int64,Elements.Geometry.Solids.Face}
  commentId: T:System.Collections.Generic.Dictionary{System.Int64,Elements.Geometry.Solids.Face}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Int64, Face>
  nameWithType: Dictionary<Int64, Face>
  fullName: System.Collections.Generic.Dictionary<System.Int64, Elements.Geometry.Solids.Face>
  nameWithType.vb: Dictionary(Of Int64, Face)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Int64, Elements.Geometry.Solids.Face)
  name.vb: Dictionary(Of Int64, Face)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Elements.Geometry.Solids.Face
    name: Face
    nameWithType: Face
    fullName: Elements.Geometry.Solids.Face
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Elements.Geometry.Solids.Face
    name: Face
    nameWithType: Face
    fullName: Elements.Geometry.Solids.Face
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Elements.Geometry.Solids.Solid.Edges*
  commentId: Overload:Elements.Geometry.Solids.Solid.Edges
  name: Edges
  nameWithType: Solid.Edges
  fullName: Elements.Geometry.Solids.Solid.Edges
- uid: System.Collections.Generic.Dictionary{System.Int64,Elements.Geometry.Solids.Edge}
  commentId: T:System.Collections.Generic.Dictionary{System.Int64,Elements.Geometry.Solids.Edge}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Int64, Edge>
  nameWithType: Dictionary<Int64, Edge>
  fullName: System.Collections.Generic.Dictionary<System.Int64, Elements.Geometry.Solids.Edge>
  nameWithType.vb: Dictionary(Of Int64, Edge)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Int64, Elements.Geometry.Solids.Edge)
  name.vb: Dictionary(Of Int64, Edge)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Elements.Geometry.Solids.Edge
    name: Edge
    nameWithType: Edge
    fullName: Elements.Geometry.Solids.Edge
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Elements.Geometry.Solids.Edge
    name: Edge
    nameWithType: Edge
    fullName: Elements.Geometry.Solids.Edge
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Solids.Solid.Vertices*
  commentId: Overload:Elements.Geometry.Solids.Solid.Vertices
  name: Vertices
  nameWithType: Solid.Vertices
  fullName: Elements.Geometry.Solids.Solid.Vertices
- uid: System.Collections.Generic.Dictionary{System.Int64,Elements.Geometry.Solids.Vertex}
  commentId: T:System.Collections.Generic.Dictionary{System.Int64,Elements.Geometry.Solids.Vertex}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Int64, Vertex>
  nameWithType: Dictionary<Int64, Vertex>
  fullName: System.Collections.Generic.Dictionary<System.Int64, Elements.Geometry.Solids.Vertex>
  nameWithType.vb: Dictionary(Of Int64, Vertex)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.Int64, Elements.Geometry.Solids.Vertex)
  name.vb: Dictionary(Of Int64, Vertex)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Elements.Geometry.Solids.Vertex
    name: Vertex
    nameWithType: Vertex
    fullName: Elements.Geometry.Solids.Vertex
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Elements.Geometry.Solids.Vertex
    name: Vertex
    nameWithType: Vertex
    fullName: Elements.Geometry.Solids.Vertex
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Solids.Solid.#ctor*
  commentId: Overload:Elements.Geometry.Solids.Solid.#ctor
  name: Solid
  nameWithType: Solid.Solid
  fullName: Elements.Geometry.Solids.Solid.Solid
- uid: Elements.Geometry.Solids.Solid.CreateLamina*
  commentId: Overload:Elements.Geometry.Solids.Solid.CreateLamina
  name: CreateLamina
  nameWithType: Solid.CreateLamina
  fullName: Elements.Geometry.Solids.Solid.CreateLamina
- uid: Elements.Geometry.Vector3[]
  isExternal: true
  name: Vector3[]
  nameWithType: Vector3[]
  fullName: Elements.Geometry.Vector3[]
  nameWithType.vb: Vector3()
  fullName.vb: Elements.Geometry.Vector3()
  name.vb: Vector3()
  spec.csharp:
  - uid: Elements.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Elements.Geometry.Vector3
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Elements.Geometry.Vector3
    name: Vector3
    nameWithType: Vector3
    fullName: Elements.Geometry.Vector3
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Elements.Geometry.Solids.Solid
  commentId: T:Elements.Geometry.Solids.Solid
  parent: Elements.Geometry.Solids
  name: Solid
  nameWithType: Solid
  fullName: Elements.Geometry.Solids.Solid
- uid: Elements.Geometry.Solids.Solid.SweepFace*
  commentId: Overload:Elements.Geometry.Solids.Solid.SweepFace
  name: SweepFace
  nameWithType: Solid.SweepFace
  fullName: Elements.Geometry.Solids.Solid.SweepFace
- uid: Elements.Geometry.Polygon
  commentId: T:Elements.Geometry.Polygon
  parent: Elements.Geometry
  name: Polygon
  nameWithType: Polygon
  fullName: Elements.Geometry.Polygon
- uid: Elements.Geometry.Polygon[]
  isExternal: true
  name: Polygon[]
  nameWithType: Polygon[]
  fullName: Elements.Geometry.Polygon[]
  nameWithType.vb: Polygon()
  fullName.vb: Elements.Geometry.Polygon()
  name.vb: Polygon()
  spec.csharp:
  - uid: Elements.Geometry.Polygon
    name: Polygon
    nameWithType: Polygon
    fullName: Elements.Geometry.Polygon
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Elements.Geometry.Polygon
    name: Polygon
    nameWithType: Polygon
    fullName: Elements.Geometry.Polygon
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Elements.Geometry
  commentId: N:Elements.Geometry
  name: Elements.Geometry
  nameWithType: Elements.Geometry
  fullName: Elements.Geometry
- uid: Elements.Geometry.Solids.Solid.SweepFaceAlongCurve*
  commentId: Overload:Elements.Geometry.Solids.Solid.SweepFaceAlongCurve
  name: SweepFaceAlongCurve
  nameWithType: Solid.SweepFaceAlongCurve
  fullName: Elements.Geometry.Solids.Solid.SweepFaceAlongCurve
- uid: Elements.Geometry.Interfaces.ICurve
  commentId: T:Elements.Geometry.Interfaces.ICurve
  parent: Elements.Geometry.Interfaces
  name: ICurve
  nameWithType: ICurve
  fullName: Elements.Geometry.Interfaces.ICurve
- uid: Elements.Geometry.Vector3
  commentId: T:Elements.Geometry.Vector3
  parent: Elements.Geometry
  name: Vector3
  nameWithType: Vector3
  fullName: Elements.Geometry.Vector3
- uid: Elements.Geometry.Solids.Solid.AddVertex*
  commentId: Overload:Elements.Geometry.Solids.Solid.AddVertex
  name: AddVertex
  nameWithType: Solid.AddVertex
  fullName: Elements.Geometry.Solids.Solid.AddVertex
- uid: Elements.Geometry.Solids.Vertex
  commentId: T:Elements.Geometry.Solids.Vertex
  parent: Elements.Geometry.Solids
  name: Vertex
  nameWithType: Vertex
  fullName: Elements.Geometry.Solids.Vertex
- uid: Elements.Geometry.Solids.Solid.AddFace*
  commentId: Overload:Elements.Geometry.Solids.Solid.AddFace
  name: AddFace
  nameWithType: Solid.AddFace
  fullName: Elements.Geometry.Solids.Solid.AddFace
- uid: Elements.Geometry.Solids.Face
  commentId: T:Elements.Geometry.Solids.Face
  parent: Elements.Geometry.Solids
  name: Face
  nameWithType: Face
  fullName: Elements.Geometry.Solids.Face
- uid: Elements.Geometry.Solids.Solid.AddEdge*
  commentId: Overload:Elements.Geometry.Solids.Solid.AddEdge
  name: AddEdge
  nameWithType: Solid.AddEdge
  fullName: Elements.Geometry.Solids.Solid.AddEdge
- uid: Elements.Geometry.Solids.Edge
  commentId: T:Elements.Geometry.Solids.Edge
  parent: Elements.Geometry.Solids
  name: Edge
  nameWithType: Edge
  fullName: Elements.Geometry.Solids.Edge
- uid: Elements.Geometry.Solids.Loop
  commentId: T:Elements.Geometry.Solids.Loop
  parent: Elements.Geometry.Solids
  name: Loop
  nameWithType: Loop
  fullName: Elements.Geometry.Solids.Loop
- uid: Elements.Geometry.Solids.Loop[]
  isExternal: true
  name: Loop[]
  nameWithType: Loop[]
  fullName: Elements.Geometry.Solids.Loop[]
  nameWithType.vb: Loop()
  fullName.vb: Elements.Geometry.Solids.Loop()
  name.vb: Loop()
  spec.csharp:
  - uid: Elements.Geometry.Solids.Loop
    name: Loop
    nameWithType: Loop
    fullName: Elements.Geometry.Solids.Loop
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Elements.Geometry.Solids.Loop
    name: Loop
    nameWithType: Loop
    fullName: Elements.Geometry.Solids.Loop
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Elements.Geometry.Solids.Solid.AddEdges*
  commentId: Overload:Elements.Geometry.Solids.Solid.AddEdges
  name: AddEdges
  nameWithType: Solid.AddEdges
  fullName: Elements.Geometry.Solids.Solid.AddEdges
- uid: Elements.Geometry.Solids.Edge[]
  isExternal: true
  name: Edge[]
  nameWithType: Edge[]
  fullName: Elements.Geometry.Solids.Edge[]
  nameWithType.vb: Edge()
  fullName.vb: Elements.Geometry.Solids.Edge()
  name.vb: Edge()
  spec.csharp:
  - uid: Elements.Geometry.Solids.Edge
    name: Edge
    nameWithType: Edge
    fullName: Elements.Geometry.Solids.Edge
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Elements.Geometry.Solids.Edge
    name: Edge
    nameWithType: Edge
    fullName: Elements.Geometry.Solids.Edge
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Solids.Solid.ToString*
  commentId: Overload:Elements.Geometry.Solids.Solid.ToString
  name: ToString
  nameWithType: Solid.ToString
  fullName: Elements.Geometry.Solids.Solid.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Elements.Geometry.Solids.Solid.Tessellate*
  commentId: Overload:Elements.Geometry.Solids.Solid.Tessellate
  name: Tessellate
  nameWithType: Solid.Tessellate
  fullName: Elements.Geometry.Solids.Solid.Tessellate
- uid: Elements.Geometry.Interfaces.ITessellate.Tessellate(Elements.Geometry.Mesh@)
  commentId: M:Elements.Geometry.Interfaces.ITessellate.Tessellate(Elements.Geometry.Mesh@)
  parent: Elements.Geometry.Interfaces.ITessellate
  name: Tessellate(Mesh)
  nameWithType: ITessellate.Tessellate(Mesh)
  fullName: Elements.Geometry.Interfaces.ITessellate.Tessellate(Elements.Geometry.Mesh)
  spec.csharp:
  - uid: Elements.Geometry.Interfaces.ITessellate.Tessellate(Elements.Geometry.Mesh@)
    name: Tessellate
    nameWithType: ITessellate.Tessellate
    fullName: Elements.Geometry.Interfaces.ITessellate.Tessellate
  - name: (
    nameWithType: (
    fullName: (
  - uid: Elements.Geometry.Mesh
    name: Mesh
    nameWithType: Mesh
    fullName: Elements.Geometry.Mesh
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Elements.Geometry.Interfaces.ITessellate.Tessellate(Elements.Geometry.Mesh@)
    name: Tessellate
    nameWithType: ITessellate.Tessellate
    fullName: Elements.Geometry.Interfaces.ITessellate.Tessellate
  - name: (
    nameWithType: (
    fullName: (
  - uid: Elements.Geometry.Mesh
    name: Mesh
    nameWithType: Mesh
    fullName: Elements.Geometry.Mesh
  - name: )
    nameWithType: )
    fullName: )
- uid: Elements.Geometry.Mesh
  commentId: T:Elements.Geometry.Mesh
  parent: Elements.Geometry
  name: Mesh
  nameWithType: Mesh
  fullName: Elements.Geometry.Mesh
- uid: Elements.Geometry.Solids.Solid.Cap*
  commentId: Overload:Elements.Geometry.Solids.Solid.Cap
  name: Cap
  nameWithType: Solid.Cap
  fullName: Elements.Geometry.Solids.Solid.Cap
- uid: Elements.Geometry.Solids.Edge[][]
  isExternal: true
  name: Edge[][]
  nameWithType: Edge[][]
  fullName: Elements.Geometry.Solids.Edge[][]
  nameWithType.vb: Edge()()
  fullName.vb: Elements.Geometry.Solids.Edge()()
  name.vb: Edge()()
  spec.csharp:
  - uid: Elements.Geometry.Solids.Edge
    name: Edge
    nameWithType: Edge
    fullName: Elements.Geometry.Solids.Edge
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Elements.Geometry.Solids.Edge
    name: Edge
    nameWithType: Edge
    fullName: Elements.Geometry.Solids.Edge
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Elements.Geometry.Solids.Solid.LoopFromPolygon*
  commentId: Overload:Elements.Geometry.Solids.Solid.LoopFromPolygon
  name: LoopFromPolygon
  nameWithType: Solid.LoopFromPolygon
  fullName: Elements.Geometry.Solids.Solid.LoopFromPolygon
