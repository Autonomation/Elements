### YamlMime:ManagedReference
items:
- uid: Elements.Interfaces.ILayeredMaterial
  commentId: T:Elements.Interfaces.ILayeredMaterial
  id: ILayeredMaterial
  parent: Elements.Interfaces
  children:
  - Elements.Interfaces.ILayeredMaterial.MaterialLayers
  langs:
  - csharp
  - vb
  name: ILayeredMaterial
  nameWithType: ILayeredMaterial
  fullName: Elements.Interfaces.ILayeredMaterial
  type: Interface
  source:
    remote:
      path: src/Elements/Interfaces/IMaterial.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: ILayeredMaterial
    path: ../src/Elements/Interfaces/IMaterial.cs
    startLine: 18
  assemblies:
  - Hypar.Elements
  namespace: Elements.Interfaces
  summary: "\nA layered material.\n"
  example: []
  syntax:
    content: public interface ILayeredMaterial
    content.vb: Public Interface ILayeredMaterial
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Elements.Interfaces.ILayeredMaterial.MaterialLayers
  commentId: P:Elements.Interfaces.ILayeredMaterial.MaterialLayers
  id: MaterialLayers
  parent: Elements.Interfaces.ILayeredMaterial
  langs:
  - csharp
  - vb
  name: MaterialLayers
  nameWithType: ILayeredMaterial.MaterialLayers
  fullName: Elements.Interfaces.ILayeredMaterial.MaterialLayers
  type: Property
  source:
    remote:
      path: src/Elements/Interfaces/IMaterial.cs
      branch: ba40cd59bf67c7e003af07d127bdae94e7e8fbbc
      repo: https://github.com/hypar-io/Elements
    id: MaterialLayers
    path: ../src/Elements/Interfaces/IMaterial.cs
    startLine: 23
  assemblies:
  - Hypar.Elements
  namespace: Elements.Interfaces
  summary: "\nA collection of material layers.\n"
  example: []
  syntax:
    content: List<MaterialLayer> MaterialLayers { get; }
    parameters: []
    return:
      type: System.Collections.Generic.List{Elements.MaterialLayer}
    content.vb: ReadOnly Property MaterialLayers As List(Of MaterialLayer)
  overload: Elements.Interfaces.ILayeredMaterial.MaterialLayers*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Elements.Interfaces
  commentId: N:Elements.Interfaces
  name: Elements.Interfaces
  nameWithType: Elements.Interfaces
  fullName: Elements.Interfaces
- uid: Elements.Interfaces.ILayeredMaterial.MaterialLayers*
  commentId: Overload:Elements.Interfaces.ILayeredMaterial.MaterialLayers
  name: MaterialLayers
  nameWithType: ILayeredMaterial.MaterialLayers
  fullName: Elements.Interfaces.ILayeredMaterial.MaterialLayers
- uid: System.Collections.Generic.List{Elements.MaterialLayer}
  commentId: T:System.Collections.Generic.List{Elements.MaterialLayer}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<MaterialLayer>
  nameWithType: List<MaterialLayer>
  fullName: System.Collections.Generic.List<Elements.MaterialLayer>
  nameWithType.vb: List(Of MaterialLayer)
  fullName.vb: System.Collections.Generic.List(Of Elements.MaterialLayer)
  name.vb: List(Of MaterialLayer)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Elements.MaterialLayer
    name: MaterialLayer
    nameWithType: MaterialLayer
    fullName: Elements.MaterialLayer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Elements.MaterialLayer
    name: MaterialLayer
    nameWithType: MaterialLayer
    fullName: Elements.MaterialLayer
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
