{
  "Elements/WhatIsElements.html": {
    "href": "Elements/WhatIsElements.html",
    "title": "What is Elements? | Hypar Docs",
    "keywords": "What is Elements? Elements is a cross-platform library for creating building elements. It's meant to be used by architects, engineers, and other building professionals who want to write code that generates buildings. When we started Hypar we needed a library that would generate building elements and run at the core of each function on the platform. Because we don't like rebuilding the wheel, we looked around for existing libraries that fulfilled the following requirements: The library must be small and fast. Elements is currently ~300kb and we're working every day to make it smaller. The library must run in micro-services on Linux. The library must have great visual documentation. If we're going to pass this library on as a recommendation to developers on Hypar, we want great docs. The library must be free of dependencies on host applications like Rhino or Revit or geometry kernels like Open Cascade which, while really cool, become a black box in your system. The library must be able to serialize data to formats like JSON, IFC ,and glTF , that are useful to architects, engineers, contractors, and people building real-time visualization applications for AEC. The library must be written in a language that supports developer productivity through things like type safety, and which supports code re-use in other popular AEC applications like Dynamo, Grasshopper, Revit, and Unity. We couldn't find anything quite right. So we started building this. Where Can I Get Elements? If you want to use Hypar in your .NET project, it's available as a NuGet package . It can be installed like this: dotnet add package Hypar.Elements --version 0.3.3 Elements is also open source. The code is available in the github repository . Where Can I Use Elements? Elements will work in any project that supports the .NET Standard 2.0 API set. This includes Revit Addins (including Dynamo), Rhino addins (including Grasshopper), Unity games, and more! You can find out about more about .NET Standard API coverage here . Code you write with Elements is just code , you are free to use it wherever it is compatible. One place we recommend is Hypar Where Can I Get Some Code Examples? The Elements library API documentation is located here . Does Elements Create Geometry? Elements contains a very simple geometry library full of classes like Vector3 , Line , Polygon , and Arc . It contains boundary representation (BREP) classes with methods for creating extrusions and sweeps, a Mesh class for stuff like topographies that don't represent well using BREPs, and classes for working with GeoJSON . We like to joke that Elements' geometry library does \"flat stuff with holes in it\" really well. I'd Like a Feature or Something is Broken All conversations about Elements happen on the github repository . Please open a new issue there to start a discussion."
  },
  "api/Elements.GeoJSON.Point.html": {
    "href": "api/Elements.GeoJSON.Point.html",
    "title": "Class Point | Hypar Docs",
    "keywords": "Class Point A GeoJSON point. Inheritance System.Object Geometry Point Inherited Members Geometry.Type System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax public class Point : Geometry Constructors Point(Position) Construct a Point. Declaration public Point(Position coordinates) Parameters Type Name Description Position coordinates Exceptions Type Condition System.ArgumentNullException Thrown when the provided coordinates are null. Properties Coordinates The coordinates of the geometry. Declaration public Position Coordinates { get; } Property Value Type Description Position"
  },
  "api/Elements.FloorType.html": {
    "href": "api/Elements.FloorType.html",
    "title": "Class FloorType | Hypar Docs",
    "keywords": "Class FloorType A container for properties common to floors. Inheritance System.Object ElementType FloorType Implements IIdentifiable ILayeredMaterial Inherited Members ElementType.Id ElementType.Name System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class FloorType : ElementType, IIdentifiable, ILayeredMaterial Constructors FloorType(String, List<MaterialLayer>) Construct a floor type. Declaration [JsonConstructor] public FloorType(string name, List<MaterialLayer> materialLayers) Parameters Type Name Description System.String name The name of the floor type. System.Collections.Generic.List < MaterialLayer > materialLayers A collection of material layers. FloorType(String, Double) Construct a floor type. Declaration public FloorType(string name, double thickness) Parameters Type Name Description System.String name The name of the floor type. System.Double thickness The thickness of the associated floor. Properties MaterialLayers A collection of material layers. Declaration public List<MaterialLayer> MaterialLayers { get; } Property Value Type Description System.Collections.Generic.List < MaterialLayer > Type The type of the floor type. Declaration public override string Type { get; } Property Value Type Description System.String Overrides ElementType.Type Methods Thickness() Calculate the thickness of the floor by summing the thicknesses of its material layers. Declaration public double Thickness() Returns Type Description System.Double Implements IIdentifiable ILayeredMaterial"
  },
  "api/Elements.Element.html": {
    "href": "api/Elements.Element.html",
    "title": "Class Element | Hypar Docs",
    "keywords": "Class Element Base class for all Elements. Inheritance System.Object Element ElementOfType<TElementType> Floor Frame Mass Opening Panel Space StructuralFraming Topography Truss Wall Implements IElement IIdentifiable ITransformable IPropertySet Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public abstract class Element : IElement, IIdentifiable, ITransformable, IPropertySet Constructors Element() Construct an element. Declaration public Element() Element(Guid) Construct an element. Declaration [JsonConstructor] public Element(Guid id) Parameters Type Name Description System.Guid id The unique identifer of the element. Properties Id The unique identifier of the element. Declaration [JsonProperty(Order = -101)] public Guid Id { get; } Property Value Type Description System.Guid Name The element's name. Declaration public string Name { get; set; } Property Value Type Description System.String Properties A map of properties for the element. Declaration [JsonProperty(NullValueHandling = NullValueHandling.Ignore)] [JsonConverter(typeof(PropertyDictionaryConverter))] public Dictionary<string, IProperty> Properties { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , IProperty > Transform The element's transform. Declaration public Transform Transform { get; protected set; } Property Value Type Description Transform Type The type of the element. Used during deserialization to disambiguate derived types. Declaration [JsonProperty(Order = -100)] public string Type { get; } Property Value Type Description System.String Methods AddProperty(String, IProperty) Add a Property to the Element. Declaration public void AddProperty(string name, IProperty property) Parameters Type Name Description System.String name The name of the parameter. IProperty property The parameter to add. Exceptions Type Condition System.Exception Thrown when an parameter with the same name already exists. RemoveProperty(String) Remove a Property from the Properties map. Declaration public void RemoveProperty(string name) Parameters Type Name Description System.String name The name of the parameter to remove. Exceptions Type Condition System.Exception Thrown when the specified parameter cannot be found. Implements IElement IIdentifiable ITransformable IPropertySet"
  },
  "api/Elements.html": {
    "href": "api/Elements.html",
    "title": "Namespace Elements | Hypar Docs",
    "keywords": "Namespace Elements Classes Beam A structural framing element defined by a center line curve and a profile. BeamSystem A collection of beams within a perimeter. Brace A Brace is a structural framing element which is often diagonal. BuiltInMaterials Built in materials. Column A vertical structural framing element. Element Base class for all Elements. ElementOfType<TElementType> Base class for all Elements which have an ElementType. ElementType Base class for all ElementTypes Floor A floor is a horizontal element defined by a profile. FloorType A container for properties common to floors. Frame An element defined by a perimeter and a cross section swept along that perimeter. Grid A grid comprised of rows and columns with each cell represented by a polyline. Mass An extruded volume. Material A material with red, green, blue, alpha, and metallic factor components. MaterialLayer A layer of homogeneous material. Model A container for elements, element types, materials, and profiles. NumericProperty A property with a numeric value. Opening A rectangular opening in a wall or floor. Panel A zero-thickness planar element defined by a perimeter. Space An extruded region of occupiable space. StandardWall A wall defined by a planar curve, a height, and a thickness. StringProperty A property with a string value. StructuralFraming A structural element with a profile swept along a curve. StructuralFramingType A container for properties common to a type of structural framing. Topography A topographic mesh defined by an array of elevation values. Truss An aggregation of structural framing elements. Wall A wall defined by a planar profile extruded to a height. WallType A container for properties common to walls. Enums UnitType An enumeration of unit types for a numeric parameter."
  },
  "api/Elements.Serialization.JSON.IListVector3Converter.html": {
    "href": "api/Elements.Serialization.JSON.IListVector3Converter.html",
    "title": "Class IListVector3Converter | Hypar Docs",
    "keywords": "Class IListVector3Converter Inheritance System.Object Newtonsoft.Json.JsonConverter IListVector3Converter Inherited Members Newtonsoft.Json.JsonConverter.CanRead Newtonsoft.Json.JsonConverter.CanWrite System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Serialization.JSON Assembly : Hypar.Elements.dll Syntax public class IListVector3Converter : JsonConverter Methods CanConvert(Type) Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType Returns Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanConvert(System.Type) ReadJson(JsonReader, Type, Object, JsonSerializer) Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader System.Type objectType System.Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description System.Object Overrides Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) WriteJson(JsonWriter, Object, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer System.Object value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)"
  },
  "api/Elements.Serialization.JSON.ICurveConverter.html": {
    "href": "api/Elements.Serialization.JSON.ICurveConverter.html",
    "title": "Class ICurveConverter | Hypar Docs",
    "keywords": "Class ICurveConverter Inheritance System.Object Newtonsoft.Json.JsonConverter ICurveConverter Inherited Members Newtonsoft.Json.JsonConverter.CanRead System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Serialization.JSON Assembly : Hypar.Elements.dll Syntax public class ICurveConverter : JsonConverter Constructors ICurveConverter() Declaration public ICurveConverter() Properties CanWrite Declaration public override bool CanWrite { get; } Property Value Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanWrite Methods CanConvert(Type) Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType Returns Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanConvert(System.Type) ReadJson(JsonReader, Type, Object, JsonSerializer) Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader System.Type objectType System.Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description System.Object Overrides Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) WriteJson(JsonWriter, Object, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer System.Object value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)"
  },
  "api/Elements.Interfaces.IPropertySingleValue-1.html": {
    "href": "api/Elements.Interfaces.IPropertySingleValue-1.html",
    "title": "Interface IPropertySingleValue<TValue> | Hypar Docs",
    "keywords": "Interface IPropertySingleValue<TValue> Inherited Members IProperty.Description Namespace : Elements.Interfaces Assembly : Hypar.Elements.dll Syntax public interface IPropertySingleValue<TValue> : IProperty Type Parameters Name Description TValue Properties UnitType Declaration UnitType UnitType { get; } Property Value Type Description UnitType Value Declaration TValue Value { get; } Property Value Type Description TValue"
  },
  "api/Elements.WallType.html": {
    "href": "api/Elements.WallType.html",
    "title": "Class WallType | Hypar Docs",
    "keywords": "Class WallType A container for properties common to walls. Inheritance System.Object ElementType WallType Implements IIdentifiable ILayeredMaterial Inherited Members ElementType.Id ElementType.Name System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class WallType : ElementType, IIdentifiable, ILayeredMaterial Constructors WallType(String, Material) Construct a wall type with homogeneous material. Declaration public WallType(string name, Material material) Parameters Type Name Description System.String name The name of the wall type. Material material The wall type's material. WallType(String, List<MaterialLayer>) Construct a wall type. Declaration [JsonConstructor] public WallType(string name, List<MaterialLayer> materialLayers) Parameters Type Name Description System.String name The name of the wall type. System.Collections.Generic.List < MaterialLayer > materialLayers The material layers of the wall type. WallType(String, Double) Construct a wall type. Declaration public WallType(string name, double thickness) Parameters Type Name Description System.String name The name of the wall type. System.Double thickness The thickness for all walls of this wall type. Properties MaterialLayers The material layers of the wall. Declaration public List<MaterialLayer> MaterialLayers { get; } Property Value Type Description System.Collections.Generic.List < MaterialLayer > Type The type of the wall type. Declaration public override string Type { get; } Property Value Type Description System.String Overrides ElementType.Type Methods Thickness() Calculate the thickness of the wall by summing the layer thicknesses. Declaration public double Thickness() Returns Type Description System.Double Implements IIdentifiable ILayeredMaterial"
  },
  "api/Elements.Serialization.JSON.PropertyDictionaryConverter.html": {
    "href": "api/Elements.Serialization.JSON.PropertyDictionaryConverter.html",
    "title": "Class PropertyDictionaryConverter | Hypar Docs",
    "keywords": "Class PropertyDictionaryConverter Inheritance System.Object Newtonsoft.Json.JsonConverter PropertyDictionaryConverter Inherited Members Newtonsoft.Json.JsonConverter.CanRead System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Serialization.JSON Assembly : Hypar.Elements.dll Syntax public class PropertyDictionaryConverter : JsonConverter Properties CanWrite Declaration public override bool CanWrite { get; } Property Value Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanWrite Methods CanConvert(Type) Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType Returns Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanConvert(System.Type) ReadJson(JsonReader, Type, Object, JsonSerializer) Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader System.Type objectType System.Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description System.Object Overrides Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) WriteJson(JsonWriter, Object, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer System.Object value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)"
  },
  "api/Elements.Serialization.JSON.PropertyConverter.html": {
    "href": "api/Elements.Serialization.JSON.PropertyConverter.html",
    "title": "Class PropertyConverter | Hypar Docs",
    "keywords": "Class PropertyConverter Inheritance System.Object Newtonsoft.Json.JsonConverter PropertyConverter Inherited Members Newtonsoft.Json.JsonConverter.CanRead Newtonsoft.Json.JsonConverter.CanWrite System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Serialization.JSON Assembly : Hypar.Elements.dll Syntax public class PropertyConverter : JsonConverter Methods CanConvert(Type) Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType Returns Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanConvert(System.Type) ReadJson(JsonReader, Type, Object, JsonSerializer) Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader System.Type objectType System.Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description System.Object Overrides Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) WriteJson(JsonWriter, Object, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer System.Object value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)"
  },
  "api/Elements.Panel.html": {
    "href": "api/Elements.Panel.html",
    "title": "Class Panel | Hypar Docs",
    "keywords": "Class Panel A zero-thickness planar element defined by a perimeter. var scene = new THREE.Scene(); var div = document.getElementById(\"model\") var camera = new THREE.PerspectiveCamera( 75, div.clientWidth/div.clientHeight, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true }); renderer.setSize( div.clientWidth, div.clientHeight ); renderer.setClearColor( 0x000000, 0 ); div.appendChild( renderer.domElement ); var controls = new THREE.OrbitControls( camera, renderer.domElement ); var light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 ); scene.add( light ); var axesHelper = new THREE.AxesHelper( 2 ); scene.add( axesHelper ); var size = 100; var divisions = 100; var colorCenterLine = new THREE.Color( 0xa0a0a0 ); var colorGrid = new THREE.Color( 0xdbdbdb ); var gridHelper = new THREE.GridHelper( size, divisions, colorCenterLine, colorGrid); scene.add( gridHelper ); window.addEventListener( 'resize', onWindowResize, false ); camera.position.z = 5; // Instantiate a loader var loader = new THREE.GLTFLoader(); // Load a glTF resource loader.load( // resource URL '../models/Elements_Panel.glb', // called when the resource is loaded function ( gltf ) { scene.add( gltf.scene ); gltf.animations; // Array<THREE.AnimationClip> gltf.scene; // THREE.Scene gltf.scenes; // Array<THREE.Scene> gltf.cameras; // Array<THREE.Camera> gltf.asset; // Object fitCameraToObject(gltf.scene, 2.0, controls) }, // called while loading is progressing function ( xhr ) { console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' ); }, // called when loading has errors function ( error ) { console.log( 'An error happened' ); } ); var animate = function () { requestAnimationFrame( animate ); // cube.rotation.x += 0.01; // cube.rotation.y += 0.01; renderer.render( scene, camera ); }; function onWindowResize(){ var div = document.getElementById(\"model\"); camera.aspect = div.clientWidth / div.clientHeight; camera.updateProjectionMatrix(); renderer.setSize( div.clientWidth, div.clientHeight ); }; const fitCameraToObject = function ( object, offset, orbitControls ) { const boundingBox = new THREE.Box3(); boundingBox.setFromObject( object ); const center = boundingBox.getCenter(); const size = boundingBox.getSize(); // get the max side of the bounding box const maxDim = Math.max( size.x, size.y, size.z ) * 3; const fov = this.camera.fov * ( Math.PI / 180 ); let cameraZ = Math.abs( maxDim / 4 * Math.tan( fov * 2 ) ); // offset the camera as desired - usually a value of ~ 1.25 is good to prevent // object filling the whole canvas if( offset !== undefined && offset !== 0 ) cameraZ *= offset; camera.position.set( center.x, center.y, cameraZ ); // set the far plane of the camera so that it easily encompasses the whole object const minZ = boundingBox.min.z; const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ; this.camera.far = cameraToFarEdge * 3; this.camera.updateProjectionMatrix(); if ( orbitControls !== undefined ) { // set camera to rotate around center of loaded object orbitControls.target = center; // prevent camera from zooming out far enough to create far plane cutoff orbitControls.maxDistance = cameraToFarEdge * 2; } }; animate(); Examples var a = new Vector3(0,0,0); var b = new Vector3(1,0,0); var c = new Vector3(1,0,1); var d = new Vector3(0,0,1); // Create a panel. var panel = new Panel(new Polygon(new []{a,b,c,d}), BuiltInMaterials.Glass); Inheritance System.Object Element Panel Implements IElement IIdentifiable ITransformable IPropertySet IMaterial ILamina ISolid Inherited Members Element.Id Element.Type Element.Properties Element.Transform Element.Name Element.AddProperty(String, IProperty) Element.RemoveProperty(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Panel : Element, IElement, IIdentifiable, ITransformable, IPropertySet, IMaterial, ILamina, ISolid Constructors Panel(Polygon, Material, Transform) Create a panel. Declaration [JsonConstructor] public Panel(Polygon perimeter, Material material = null, Transform transform = null) Parameters Type Name Description Polygon perimeter The perimeter of the panel. Material material The panel's material Transform transform The panel's transform. Exceptions Type Condition System.ArgumentException Thrown when the provided perimeter points are not coplanar. Properties Material The panel's material. Declaration public Material Material { get; } Property Value Type Description Material Perimeter The perimeter of the panel. Declaration public Polygon Perimeter { get; } Property Value Type Description Polygon Methods GetUpdatedSolid() Get the updated solid representation of the panel. Declaration public Solid GetUpdatedSolid() Returns Type Description Solid Normal() The normal of the panel, defined using the first 3 vertices in the location. Declaration public Vector3 Normal() Returns Type Description Vector3 The normal vector of the panel. Implements IElement IIdentifiable ITransformable IPropertySet IMaterial ILamina ISolid"
  },
  "api/Elements.GeoJSON.MultiPoint.html": {
    "href": "api/Elements.GeoJSON.MultiPoint.html",
    "title": "Class MultiPoint | Hypar Docs",
    "keywords": "Class MultiPoint A GeoJSON multipoint. Inheritance System.Object Geometry MultiPoint Inherited Members Geometry.Type System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax public class MultiPoint : Geometry Constructors MultiPoint(Position[]) Construct a MultiPoint. Declaration public MultiPoint(Position[] coordinates) Parameters Type Name Description Position [] coordinates Exceptions Type Condition System.ArgumentOutOfRangeException Thrown when the coordinates provided contains 1 item or less. Properties Coordinates The coordinates of the geometry. Declaration public Position[] Coordinates { get; } Property Value Type Description Position []"
  },
  "api/Elements.GeoJSON.GeometryCollection.html": {
    "href": "api/Elements.GeoJSON.GeometryCollection.html",
    "title": "Class GeometryCollection | Hypar Docs",
    "keywords": "Class GeometryCollection A GeoJSON geometry collection. Inheritance System.Object GeometryCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax public class GeometryCollection Constructors GeometryCollection(Geometry[]) Construct a geometry collection. Declaration public GeometryCollection(Geometry[] geometries) Parameters Type Name Description Geometry [] geometries An array of geometries."
  },
  "api/Elements.Geometry.Polyline.html": {
    "href": "api/Elements.Geometry.Polyline.html",
    "title": "Class Polyline | Hypar Docs",
    "keywords": "Class Polyline A coplanar continuous set of lines. Inheritance System.Object Polyline Polygon Implements ICurve Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Polyline : ICurve Constructors Polyline(Vector3[]) Construct a polyline from a collection of vertices. Declaration public Polyline(Vector3[] vertices) Parameters Type Name Description Vector3 [] vertices A CCW wound set of vertices. Fields _vertices The internal collection of vertices. Declaration protected Vector3[] _vertices Field Value Type Description Vector3 [] Properties End The end of the polyline. Declaration [JsonIgnore] public Vector3 End { get; } Property Value Type Description Vector3 Start The start of the polyline. Declaration [JsonIgnore] public Vector3 Start { get; } Property Value Type Description Vector3 Type The type of the curve. Used during deserialization to disambiguate derived types. Declaration [JsonProperty(Order = -100)] public string Type { get; } Property Value Type Description System.String Vertices The vertices of the polygon. Declaration public Vector3[] Vertices { get; } Property Value Type Description Vector3 [] Methods Bounds() Get the bounding box for this curve. Declaration public BBox3 Bounds() Returns Type Description BBox3 Frames(Double, Double) Get the transforms used to transform a Profile extruded along this Polyline. Declaration public virtual Transform[] Frames(double startSetback, double endSetback) Parameters Type Name Description System.Double startSetback System.Double endSetback Returns Type Description Transform [] Length() Calculate the length of the polygon. Declaration public virtual double Length() Returns Type Description System.Double Plane() Compute the Plane defined by the first three vertices of the Polygon. Declaration public Plane Plane() Returns Type Description Plane A Plane. PointAt(Double) Get a point on the polygon at parameter u. Declaration public Vector3 PointAt(double u) Parameters Type Name Description System.Double u A value between 0.0 and 1.0. Returns Type Description Vector3 Returns a Vector3 indicating a point along the Polygon length from its start vertex. Reversed() Reverse the direction of a polyline. Declaration public ICurve Reversed() Returns Type Description ICurve Returns a new polyline with opposite winding. Segments() Get a collection a lines representing each segment of this polyline. Declaration public virtual Line[] Segments() Returns Type Description Line [] A collection of Lines. ToString() Get a string representation of this polyline. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() TransformAt(Double) Get the Transform at the specified parameter along the Polygon. Declaration public Transform TransformAt(double u) Parameters Type Name Description System.Double u The parameter on the Polygon between 0.0 and 1.0. Returns Type Description Transform A Transform with its Z axis aligned trangent to the Polygon. Implements ICurve"
  },
  "api/Elements.Geometry.Interfaces.ITransformable.html": {
    "href": "api/Elements.Geometry.Interfaces.ITransformable.html",
    "title": "Interface ITransformable | Hypar Docs",
    "keywords": "Interface ITransformable Namespace : Elements.Geometry.Interfaces Assembly : Hypar.Elements.dll Syntax public interface ITransformable Properties Transform Declaration Transform Transform { get; } Property Value Type Description Transform"
  },
  "api/Elements.GeoJSON.Feature.html": {
    "href": "api/Elements.GeoJSON.Feature.html",
    "title": "Class Feature | Hypar Docs",
    "keywords": "Class Feature A GeoJSON feature. Inheritance System.Object Feature Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax public class Feature Constructors Feature(Geometry, Dictionary<String, Object>) Construct a feature. Declaration public Feature(Geometry geometry, Dictionary<string, object> properties) Parameters Type Name Description Geometry geometry System.Collections.Generic.Dictionary < System.String , System.Object > properties Properties BBox The bounding box of the feature. Declaration [JsonProperty(NullValueHandling = NullValueHandling.Ignore)] public IEnumerable<double> BBox { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.Double > Geometry The geometry of the feature. Declaration [JsonConverter(typeof(GeometryConverter))] public Geometry Geometry { get; set; } Property Value Type Description Geometry Properties All properties of the feature. Declaration [JsonProperty(NullValueHandling = NullValueHandling.Ignore)] public Dictionary<string, object> Properties { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.Object > Type The type of the feature. Declaration public string Type { get; } Property Value Type Description System.String"
  },
  "api/Elements.BeamSystem.html": {
    "href": "api/Elements.BeamSystem.html",
    "title": "Class BeamSystem | Hypar Docs",
    "keywords": "Class BeamSystem A collection of beams within a perimeter. Inheritance System.Object BeamSystem Implements IAggregateElements Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class BeamSystem : IAggregateElements Constructors BeamSystem(Floor, Int32, StructuralFramingType) Construct a beam system under a slab. Declaration public BeamSystem(Floor floor, int count, StructuralFramingType framingType) Parameters Type Name Description Floor floor The floor under which to create beams. System.Int32 count The number of beams to create. StructuralFramingType framingType The structural framing type to be used for all beams. BeamSystem(Int32, StructuralFramingType, Line, Line) Construct a BeamSystem between two edges. Declaration public BeamSystem(int count, StructuralFramingType framingType, Line edge1, Line edge2) Parameters Type Name Description System.Int32 count The number of beams to create. StructuralFramingType framingType The structural framing type to be used for all beams. Line edge1 The first edge of the system. Line edge2 The second edge of the system. Properties Elements The Beams that make up the BeamSystem. Declaration public List<Element> Elements { get; } Property Value Type Description System.Collections.Generic.List < Element > Implements IAggregateElements"
  },
  "api/Elements.MaterialLayer.html": {
    "href": "api/Elements.MaterialLayer.html",
    "title": "Class MaterialLayer | Hypar Docs",
    "keywords": "Class MaterialLayer A layer of homogeneous material. Inheritance System.Object MaterialLayer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class MaterialLayer Constructors MaterialLayer(Material, Double) Construct a material layer. Declaration public MaterialLayer(Material material, double thickness) Parameters Type Name Description Material material The layer's material. System.Double thickness The thickness of the layer. Properties Material The layer's material. Declaration public Material Material { get; } Property Value Type Description Material Thickness The thickness of the layer. Declaration public double Thickness { get; } Property Value Type Description System.Double"
  },
  "api/Elements.Frame.html": {
    "href": "api/Elements.Frame.html",
    "title": "Class Frame | Hypar Docs",
    "keywords": "Class Frame An element defined by a perimeter and a cross section swept along that perimeter. Inheritance System.Object Element Frame Implements IElement IIdentifiable ITransformable IPropertySet IMaterial ISweepAlongCurve IProfile ISolid Inherited Members Element.Id Element.Type Element.Properties Element.Transform Element.Name Element.AddProperty(String, IProperty) Element.RemoveProperty(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Frame : Element, IElement, IIdentifiable, ITransformable, IPropertySet, IMaterial, ISweepAlongCurve, IProfile, ISolid Constructors Frame(Polygon, Profile, Double, Material, Transform) Create a frame. Declaration public Frame(Polygon curve, Profile profile, double offset = 0, Material material = null, Transform transform = null) Parameters Type Name Description Polygon curve The frame's perimeter. Profile profile The frame's profile. System.Double offset The amount which the perimeter will be offset internally. Material material The frame's material. Transform transform The frame's transform. Properties Curve The perimeter of the frame. Declaration public ICurve Curve { get; } Property Value Type Description ICurve EndSetback The end setback of the sweep along the curve. Declaration public double EndSetback { get; } Property Value Type Description System.Double Material The frame's material. Declaration public Material Material { get; } Property Value Type Description Material Profile The frame's profile. Declaration public Profile Profile { get; } Property Value Type Description Profile StartSetback The start setback of the sweep along the curve. Declaration public double StartSetback { get; } Property Value Type Description System.Double Methods GetUpdatedSolid() Get the updated solid representation of the frame. Declaration public Solid GetUpdatedSolid() Returns Type Description Solid Implements IElement IIdentifiable ITransformable IPropertySet IMaterial ISweepAlongCurve IProfile ISolid"
  },
  "api/Elements.Geometry.Transform.html": {
    "href": "api/Elements.Geometry.Transform.html",
    "title": "Class Transform | Hypar Docs",
    "keywords": "Class Transform A coordinate system defined by an origin, x, y, and z axes. Inheritance System.Object Transform Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Transform Constructors Transform() Create the identity transform. Declaration public Transform() Transform(Matrix) Create a transform by a matrix. Declaration [JsonConstructor] public Transform(Matrix matrix) Parameters Type Name Description Matrix matrix The transform's Matrix. Transform(Transform) Create a transform by copying another transform. Declaration public Transform(Transform t) Parameters Type Name Description Transform t The transform to copy. Transform(Vector3) Create a transform with a translation. Declaration public Transform(Vector3 origin) Parameters Type Name Description Vector3 origin The origin of the transform. Transform(Vector3, Vector3) Create a transform centered at origin and an up vector. Declaration public Transform(Vector3 origin, Vector3 up) Parameters Type Name Description Vector3 origin The origin of the transform. Vector3 up The vector which will define the Z axis of the transform. Transform(Vector3, Vector3, Vector3) Create a transform by origin and axes. Declaration public Transform(Vector3 origin, Vector3 xAxis, Vector3 zAxis) Parameters Type Name Description Vector3 origin The origin of the transform. Vector3 xAxis The X axis of the transform. Vector3 zAxis The Z axis of the transform. Transform(Double, Double, Double) Create a transform with a translation. Declaration public Transform(double x, double y, double z) Parameters Type Name Description System.Double x The X component of translation. System.Double y The Y component of translation. System.Double z The Z component of translation. Properties Matrix The transform's matrix. Declaration public Matrix Matrix { get; } Property Value Type Description Matrix Origin The origin. Declaration [JsonIgnore] public Vector3 Origin { get; } Property Value Type Description Vector3 XAxis The X axis. Declaration [JsonIgnore] public Vector3 XAxis { get; } Property Value Type Description Vector3 YAxis The Y axis. Declaration [JsonIgnore] public Vector3 YAxis { get; } Property Value Type Description Vector3 ZAxis The Z axis. Declaration [JsonIgnore] public Vector3 ZAxis { get; } Property Value Type Description Vector3 Methods Concatenate(Transform) Concatenate the transform. Declaration public void Concatenate(Transform transform) Parameters Type Name Description Transform transform Invert() Invert this transform. Declaration public void Invert() Move(Vector3) Apply a translation to the transform. Declaration public void Move(Vector3 translation) Parameters Type Name Description Vector3 translation The translation to apply. OfLine(Line) Transform the specified line. Declaration public Line OfLine(Line line) Parameters Type Name Description Line line The line to transform. Returns Type Description Line A new line transformed by this transform. OfPlane(Plane) Transform the specified plane. Declaration public Plane OfPlane(Plane plane) Parameters Type Name Description Plane plane The plane to transform. Returns Type Description Plane A new plane transformed by this transform. OfPoint(Vector3) Transform a vector into the coordinate space defined by this transform ignoring the translation. Declaration public Vector3 OfPoint(Vector3 vector) Parameters Type Name Description Vector3 vector The vector to transform. Returns Type Description Vector3 A new vector transformed by this transform. OfPolygon(Polygon) Transform the specified polygon. Declaration public Polygon OfPolygon(Polygon polygon) Parameters Type Name Description Polygon polygon The polygon to transform. Returns Type Description Polygon A new polygon transformed by this transform. OfPolygons(Polygon[]) Transform the specified polygons. Declaration public Polygon[] OfPolygons(Polygon[] polygons) Parameters Type Name Description Polygon [] polygons The polygons to transform. Returns Type Description Polygon [] An array of polygons transformed by this transform. OfProfile(Profile) Transform the specified profile. Declaration public Profile OfProfile(Profile profile) Parameters Type Name Description Profile profile The profile to transform. Returns Type Description Profile A new profile transformed by this transform. OfVector(Vector3) Transform a vector into the coordinate space defined by this transform. Declaration public Vector3 OfVector(Vector3 vector) Parameters Type Name Description Vector3 vector The vector to transform. Returns Type Description Vector3 A new vector transformed by this transform. Rotate(Vector3, Double) Apply a rotation to the transform. Declaration public void Rotate(Vector3 axis, double angle) Parameters Type Name Description Vector3 axis The axis of rotation. System.Double angle The angle of rotation in degrees. Scale(Vector3) Apply a scale to the transform. Declaration public void Scale(Vector3 amount) Parameters Type Name Description Vector3 amount The amount to scale. ToString() Get a string representation of the transform. Declaration public override string ToString() Returns Type Description System.String A string representation of the transform. Overrides System.Object.ToString() XY() Calculate XY plane of the transform. Declaration public Plane XY() Returns Type Description Plane XZ() Calculate the XZ plane of the transform. Declaration public Plane XZ() Returns Type Description Plane YZ() Calculate the YZ plane of the transform. Declaration public Plane YZ() Returns Type Description Plane"
  },
  "api/Elements.Geometry.Arc.html": {
    "href": "api/Elements.Geometry.Arc.html",
    "title": "Class Arc | Hypar Docs",
    "keywords": "Class Arc An arc defined around a center between a start angle and an end angle. Inheritance System.Object Arc Implements ICurve Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Arc : ICurve Constructors Arc(Plane, Double, Double, Double) Create a plane. Declaration [JsonConstructor] public Arc(Plane plane, double radius, double startAngle, double endAngle) Parameters Type Name Description Plane plane The plane of the arc. System.Double radius The radius of the arc. System.Double startAngle The start angle of the arc in degrees. System.Double endAngle The end angle of the arc in degrees. Arc(Vector3, Double, Double, Double) Create a plane. Declaration public Arc(Vector3 center, double radius, double startAngle, double endAngle) Parameters Type Name Description Vector3 center The center of the arc. System.Double radius The radius of the arc. System.Double startAngle The start angle of the arc in degrees. System.Double endAngle The end angle of the arc in degrees. Properties End The end point of the arc. Declaration [JsonIgnore] public Vector3 End { get; } Property Value Type Description Vector3 EndAngle The angle from 0.0, in degrees, at which the arc will end with respect to the positive X axis. Declaration public double EndAngle { get; } Property Value Type Description System.Double Plane The plane of the arc. Declaration public Plane Plane { get; } Property Value Type Description Plane Radius The radius of the Arc. Declaration public double Radius { get; } Property Value Type Description System.Double Start The start point of the arc. Declaration [JsonIgnore] public Vector3 Start { get; } Property Value Type Description Vector3 StartAngle The angle from 0.0, in degrees, at which the arc will start with respect to the positive X axis. Declaration public double StartAngle { get; } Property Value Type Description System.Double Type The type of the curve. Used during deserialization to disambiguate derived types. Declaration [JsonProperty(Order = -100)] public string Type { get; } Property Value Type Description System.String Methods Bounds() Get a bounding box for this arc. Declaration public BBox3 Bounds() Returns Type Description BBox3 A bounding box for this arc. Frames(Double, Double) Get a collection of transforms which represent frames along the arc. Declaration public Transform[] Frames(double startSetback, double endSetback) Parameters Type Name Description System.Double startSetback The offset from the start of the arc. System.Double endSetback The offset from the end of the arc. Returns Type Description Transform [] A collection of transforms. Length() Calculate the length of the arc. Declaration public double Length() Returns Type Description System.Double PointAt(Double) Return the point at parameter u on the arc. Declaration public Vector3 PointAt(double u) Parameters Type Name Description System.Double u A parameter between 0.0 and 1.0. Returns Type Description Vector3 A Vector3 representing the point along the arc. Reversed() Get an arc which is the reverse of this Arc. Declaration public ICurve Reversed() Returns Type Description ICurve TransformAt(Double) Return transform on the arc at parameter u. Declaration public Transform TransformAt(double u) Parameters Type Name Description System.Double u A parameter between 0.0 and 1.0 on the arc. Returns Type Description Transform A transform with its origin at u along the curve and its Z axis tangent to the curve. Implements ICurve"
  },
  "api/Elements.Space.html": {
    "href": "api/Elements.Space.html",
    "title": "Class Space | Hypar Docs",
    "keywords": "Class Space An extruded region of occupiable space. var scene = new THREE.Scene(); var div = document.getElementById(\"model\") var camera = new THREE.PerspectiveCamera( 75, div.clientWidth/div.clientHeight, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true }); renderer.setSize( div.clientWidth, div.clientHeight ); renderer.setClearColor( 0x000000, 0 ); div.appendChild( renderer.domElement ); var controls = new THREE.OrbitControls( camera, renderer.domElement ); var light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 ); scene.add( light ); var axesHelper = new THREE.AxesHelper( 2 ); scene.add( axesHelper ); var size = 100; var divisions = 100; var colorCenterLine = new THREE.Color( 0xa0a0a0 ); var colorGrid = new THREE.Color( 0xdbdbdb ); var gridHelper = new THREE.GridHelper( size, divisions, colorCenterLine, colorGrid); scene.add( gridHelper ); window.addEventListener( 'resize', onWindowResize, false ); camera.position.z = 5; // Instantiate a loader var loader = new THREE.GLTFLoader(); // Load a glTF resource loader.load( // resource URL '../models/Elements_Space.glb', // called when the resource is loaded function ( gltf ) { scene.add( gltf.scene ); gltf.animations; // Array<THREE.AnimationClip> gltf.scene; // THREE.Scene gltf.scenes; // Array<THREE.Scene> gltf.cameras; // Array<THREE.Camera> gltf.asset; // Object fitCameraToObject(gltf.scene, 2.0, controls) }, // called while loading is progressing function ( xhr ) { console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' ); }, // called when loading has errors function ( error ) { console.log( 'An error happened' ); } ); var animate = function () { requestAnimationFrame( animate ); // cube.rotation.x += 0.01; // cube.rotation.y += 0.01; renderer.render( scene, camera ); }; function onWindowResize(){ var div = document.getElementById(\"model\"); camera.aspect = div.clientWidth / div.clientHeight; camera.updateProjectionMatrix(); renderer.setSize( div.clientWidth, div.clientHeight ); }; const fitCameraToObject = function ( object, offset, orbitControls ) { const boundingBox = new THREE.Box3(); boundingBox.setFromObject( object ); const center = boundingBox.getCenter(); const size = boundingBox.getSize(); // get the max side of the bounding box const maxDim = Math.max( size.x, size.y, size.z ) * 3; const fov = this.camera.fov * ( Math.PI / 180 ); let cameraZ = Math.abs( maxDim / 4 * Math.tan( fov * 2 ) ); // offset the camera as desired - usually a value of ~ 1.25 is good to prevent // object filling the whole canvas if( offset !== undefined && offset !== 0 ) cameraZ *= offset; camera.position.set( center.x, center.y, cameraZ ); // set the far plane of the camera so that it easily encompasses the whole object const minZ = boundingBox.min.z; const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ; this.camera.far = cameraToFarEdge * 3; this.camera.updateProjectionMatrix(); if ( orbitControls !== undefined ) { // set camera to rotate around center of loaded object orbitControls.target = center; // prevent camera from zooming out far enough to create far plane cutoff orbitControls.maxDistance = cameraToFarEdge * 2; } }; animate(); Examples // Create a space. var a = new Vector3(); var b = new Vector3(30, 10); var c = new Vector3(20, 50); var d = new Vector3(-10, 5); var profile = new Polygon(new[]{a,b,c,d}); var space = new Space(profile, 10, 0); Inheritance System.Object Element Space Implements IElement IIdentifiable ITransformable IPropertySet IExtrude IProfile ISolid IMaterial Inherited Members Element.Id Element.Type Element.Properties Element.Transform Element.Name Element.AddProperty(String, IProperty) Element.RemoveProperty(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Space : Element, IElement, IIdentifiable, ITransformable, IPropertySet, IExtrude, IProfile, ISolid, IMaterial Constructors Space(Polygon, Double, Double, Material, Transform) Construct a Space. Declaration public Space(Polygon profile, double height, double elevation = 0, Material material = null, Transform transform = null) Parameters Type Name Description Polygon profile The profile of the space. System.Double height The height of the space above the lower elevation. System.Double elevation The elevation of the space. Material material The space's material. Transform transform The space's transform. Space(Profile, Double, Double, Material, Transform) Construct a space. Declaration [JsonConstructor] public Space(Profile profile, double height, double elevation = 0, Material material = null, Transform transform = null) Parameters Type Name Description Profile profile The profile of the space. System.Double height The height of the space. System.Double elevation The elevation of the space. Material material The space's material. Transform transform The space's transform. Exceptions Type Condition System.ArgumentOutOfRangeException Thrown when the height is less than or equal to 0.0. Properties BothSides Should the space extrude to both sides of the profile? Declaration public bool BothSides { get; } Property Value Type Description System.Boolean ExtrudeDepth The extrude height of the space. Declaration public double ExtrudeDepth { get; } Property Value Type Description System.Double ExtrudeDirection The extrude direction of the space. Declaration public Vector3 ExtrudeDirection { get; } Property Value Type Description Vector3 Geometry The space's geometry. Declaration [JsonIgnore] public Solid Geometry { get; } Property Value Type Description Solid Height The space's height. Declaration public double Height { get; } Property Value Type Description System.Double Material The space's material. Declaration public Material Material { get; } Property Value Type Description Material Profile The profile of the space. Declaration public Profile Profile { get; } Property Value Type Description Profile Methods GetUpdatedSolid() Get the updated solid representation of the space. Declaration public Solid GetUpdatedSolid() Returns Type Description Solid ProfileTransformed() Get the profile of the space transformed by the space's transform. Declaration public Profile ProfileTransformed() Returns Type Description Profile Implements IElement IIdentifiable ITransformable IPropertySet IExtrude IProfile ISolid IMaterial"
  },
  "api/Elements.ElementType.html": {
    "href": "api/Elements.ElementType.html",
    "title": "Class ElementType | Hypar Docs",
    "keywords": "Class ElementType Base class for all ElementTypes Inheritance System.Object ElementType FloorType StructuralFramingType WallType Implements IIdentifiable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public abstract class ElementType : IIdentifiable Constructors ElementType(Guid, String) Construct an element type. Declaration [JsonConstructor] public ElementType(Guid id, string name) Parameters Type Name Description System.Guid id The unique identifier of the element type. System.String name The name of the element type. ElementType(String) Construct an element type. Declaration public ElementType(string name) Parameters Type Name Description System.String name A name. Properties Id The unique identifier of an ElementType. Declaration public Guid Id { get; } Property Value Type Description System.Guid Name The name of the ElementType. Declaration public string Name { get; } Property Value Type Description System.String Type The type of the ElementType. Used during serialization. Declaration public abstract string Type { get; } Property Value Type Description System.String Implements IIdentifiable"
  },
  "api/Elements.Interfaces.IPropertySet.html": {
    "href": "api/Elements.Interfaces.IPropertySet.html",
    "title": "Interface IPropertySet | Hypar Docs",
    "keywords": "Interface IPropertySet Namespace : Elements.Interfaces Assembly : Hypar.Elements.dll Syntax public interface IPropertySet Properties Properties Declaration Dictionary<string, IProperty> Properties { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , IProperty >"
  },
  "api/Elements.Geometry.HorizontalAlignment.html": {
    "href": "api/Elements.Geometry.HorizontalAlignment.html",
    "title": "Enum HorizontalAlignment | Hypar Docs",
    "keywords": "Enum HorizontalAlignment The horizontal alignment of a profile. Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public enum HorizontalAlignment Fields Name Description Center Align the profile along its center. Left Align the profile along its left edge. Right Align the profile along its right edge."
  },
  "index.html": {
    "href": "index.html",
    "title": "Getting Started with Hypar | Hypar Docs",
    "keywords": "Getting Started with Hypar Hypar is a cloud platform for generating buildings that makes it easy to publish, distribute, and maintain your building design logic. Rather than requiring web development skills to scale and deliver your design logic, Hypar lets you concentrate on what you want to get done while the platform creates the interface for your audience and provides computation, visualization, delivery, interoperability, and access control for your functions. By uploading a function to Hypar you can produce twenty options for a building problem in just a few seconds: In this introduction to Hypar, we'll work with a much simpler function that generates masses of variable dimensions. Pre-Flight Check Before getting started, there are a few things you'll need and some other things you might want to know. Things you'll need A 'modern' web browser. We'll use Google Chrome for this guide, but Firefox or Brave should also work fine. Chrome : https://www.google.com/chrome/ Firefox : https://www.mozilla.org/en-US/firefox/new/ Brave : https://brave.com/download/ Visual Studio Community (Windows) or VS Code (Windows, Mac OS, Linux) We'll use Visual Studio Community or VSC for this guide, but if you're more comfortable in VS Code , take analogous actions in that editor when we come to those steps. Visual Studio Community : https://visualstudio.microsoft.com/vs/community/ Access to a command line for your operating system. We'll use the Windows Command Prompt for this guide, but other operating system command prompts should work similarly. The Microsoft .Net Core 2.1. Hypar uses the cross-platform dotnet framework created and maintained by Microsoft. The version number is important! There might be issues with later or earlier versions of .Net Core. .Net Core 2.1 : https://dotnet.microsoft.com/download/dotnet-core/2.1 Things you might want to know Basic familiarity with the C# programming language will help, but if you're not familiar with C# we'll do our best to walk you through making changes to the initial code you'll get by following the steps in this guide. If you want to share your Hypar functions, you have to explicitly make your work public, so don't worry that perfect strangers are judging your work. They will, but only if you decide to make them public. The procedures you'll use in this guide compile your code on your desktop and only upload the resulting binary file. No one at Hypar will examine your source code because we won't have it unless you make it public by some other means or if you send it to us so we can help you solve a problem. None of the Hypar libraries you'll use in this guide bind your code to Hypar web services. For example, if you'd like to use the Elements library for a desktop application, it's an open source project on GitHub and will always be free for anyone to use or extend. You don't even have to tell us you're using it. Signing up for Hypar To upload anything to the Hypar platform, you're going to need an account. Point your browser to https://hypar.io , and you should see a page that looks like this. If you don't have an account already, click on the Sign Up button below the logo on the right. That should take you to the Sign Up screen. Fill in a username, an email address you can access, and the password you'd like to use. Then click on the Sign up button in the center of the screen. Then we do some explaining: Now check the email account you supplied for a message that looks something like this: Click on the Verify Email link in the message and you should see a confirmation page: That's it! You now have a Hypar account. Later in this guide you'll sign in to see your first function in Hypar Explore. Installing and Using the Hypar Command Line Interface (CLI) Open a Windows Command Prompt and input the following command: dotnet tool install -g hypar.cli Now you're ready to send your first function to Hypar. First use the command prompt cd (for \" c hange d irectory\") command to navigate to the folder where you'd like to place your function project. Now try this in the same Windows Command Prompt: hypar new For consistency with the rest of this example give your function the name StarterFunction . A bunch of stuff happens that we'll explain in a moment, but in the meantime enter your Hypar user name and password: Now more stuff happens, but the important thing right now is to know that your function has been published (privately) to Hypar! With one command you've created a web application that we're going to customize and publish again (and again and again), but first let's see what we've got so far. Back to https://hypar.io . This time, click on the Sign In button on the left below the logo... ...and sign in using your new account: Once you sign in, you'll see something like the following screen: All the function cards have default graphics because they haven't produced options yet. Click on the card flipper arrow on the lower right of your StarterFunction card: That checked Private box is what's keeping your new function invisible to everyone but you and the administrators of Hypar. If you ever want everyone to see your function, you'll have to uncheck that box and read our warning that the world is about to see your work. Try changing the setting, then make it private again. Now let's make some options. Click on StarterFunction card title. You should see something like this: Click on the Sample 10 Options in the lower left corner of the page to generate some options. After a few progress messages go by, you should see something like this: You've generated a bunch of extruded rectangles! More importantly, you've just used a web application you created with one command. Let's do a little more exploration into the options before we explain everything that happened. Click on one of the option cards to look at one of them in more detail: Click in the geometry display window to zoom, pan, and rotate the option. Now let's go back and look at everything that happened and what it means for writing your own custom Hypar functions in the future. We'll place blue boxes around what we're talking about, like this: The first thing that happened was that the hypar new command created a new local project folder within the current folder. In Windows Explorer, the new folder looks like this: The next thing hypar new did was add a test project into that folder, in the folder called test above. This is the project that will help you test your function updates locally before uploading them to Hypar. Then the hypar new command created a hypar.json file that you can see in the StarterFunction folder above. We'll use this file to customize and extend the default function. Next the hypar new command executed something called hypar init , which created a couple of more important files in your project, but which you shouldn't have to worry about except to understand what they do and how they change as you edit your hypar.json file. If you open the src folder, you'll see these files: The three files with names containing .g.cs are generated code files. You never need to edit these directly but it's important to know that the hypar init command generates them from the hypar.json file that we'll look at in a moment, because when you make changes to the hypar.json file you'll have to run hypar init again to update these files. These three files are what make your C# code compatible with Hypar services. They're kept separate so that your code won't become directly dependent on the Hypar platform but can easily take advantage of its services. After hypar init executes, there's some housekeeping that completes the local changes, then after you sign in the hypar new command uploads your new function. In the StarterFunction folder you'll see a matching StarterFunction.sln file. Double click on StarterFunction.sln to open it in Visual Studio Community (VSC). Now use VSC to open the hypar.json file, and we'll look at how this configuration influences what you see when you work with a function on Hypar. IMPORTANT: Do not use \"Add Existing Item\" to add the hypar.json to the project. VSC will silently make a copy and place it in the ./src folder, while the Hypar CLI will still read the original file. Just open the file to edit it when you need to. The \"inputs\" section of the hypar.json determines what inputs you see for the uploaded function: The \"outputs\" section determines the values you see associated with each option: In the next exercise, we're going add a new Height input to this function. Adding a new function input First, let's open the StarterFunctionInputs.g.cs file in VSC and look at the StarterFunctionInputs class to see how the hypar.json turns into code. Note how the corresponding entries become public class properties: Edit your hypar.json file to look like the one illustrated below. Copy the \"Width\" output and change the copy's name and description values to refer to \"Height\" and \"The height\" instead of \"Width\" and \"The width\" . VSC politely inserts a comma after the \"Width\" section's closing brace now that it's no longer the last input field: Save this file and open the command prompt again, using the cd command to change the current directory to your project folder. Then run hypar init : hypar init reads the json file to understand how to regenerate the input and output class files as well as the function file. When you return to VSC, if the StarterFunctionInputs.g.cs file is still open, you'll see a warning that the file has been changed externally, which is what hypar init did when it rewrote the three .g.cs files. Select \"Yes to All\" if you get this warning, and open StarterFunctionInputs.g.cs to see what changed. Now that we have this new entry for Height , we have to tell our function to use it. Open StarterFunction.cs and change the var height = 1.0; line to use the height input value instead: Now we have our new Height input. Let's send this up to Hypar using hypar publish and see how our function works now: Opening StarterFunction on Hypar again, we now have a Height input in addition to the Length and Width inputs. Setting height to 10 gives us 10 options with identical heights and varied lengths and widths: What if we wanted a maximum height of 20? Let's go back to the hypar.json file and change the maximum for the input range: Save the file and run hypar publish again at the command prompt: When we open StarterFunction on Hypar again, the range is changed: If you click the Sample 10 Options button with the height set to 20, you should see results that look something like this: Now let's allow Hypar to sample the Height range instead by toggling Select Value to Sample Range on the slider: Note that Sample 10 Options has become Sample 20 Options . What happened there? Hypar uses the widest range of values within a group of sliders to determine how many options it will create at once, up to a limit of 20. Since your Height slider now has a min of 1 and a max of 20 with a step of 1 , you now can sample 20 options: Adding a new function output In Hypar click one of the options and look at the function outputs. You should see something like this, although your volume result might be different: What if we also wanted to display the area of our cube? For this exercise we'll add a new output to the hypar.json and calculate the result we need. Add these new lines to the hypar.json : Copy the \"Volume\" section down and change its \"name\" field to \"Area\" and its \"description\" to \"The area\" . After those changes, on the command line in the project folder run hypar init : Now in VSC let's see what changed. Open StarterFunctionOutputs.g.cs and you should see your new Area output under the Volume output: Also note that the StarterFunctionOutputs constructor at the bottom of the illustration has a new double area argument. That new argument is important when we open StarterFunction.cs in VSC and see that we now have an error condition: That's because we're still calling StarterFunctionOutputs with just the volume output. We have to calculate and add the area output like this: Once you've made that change and saved the file, publish the function to Hypar again: In Hypar return to the StarterFunction options page either by clicking on the browser's back button or by clicking on explore and the StarterFunction card again. Then click on the Sample 20 Options button to arrive at a screen that looks something like this: Click on one of the options. Now you should see your area calculation on the left side: What if we wanted to see these results in the graphic display as well? We'll handle that by adding properties to the generated masses, and display them using the Label dropdown. For the moment the Label dropdown only has None as an entry: To add labels for our volume and area values open StarterFunction.cs in VSC. Move the two value calculations up under the height input, because we're going to need those values a little earlier so we can add them as properties to our mass : Before we add the mass to our Hypar model , we need to add a couple of NumericProperty entries to the mass . Add these lines before model.AddElement(mass) : There's a lot happening in these two lines, so let's look at each part, using our new Volume property as an example of how both lines work. Since we're adding a property to our mass , we use its method AddProperty : The first argument this method needs is a name for the new property, which in this case is \"Volume\" : Next the method needs to know what kind of property you're going to add. Eligible values for this argument are StringProperty (if we were adding a string value), or in this case NumericProperty : The new NumericProperty needs two arguments: the value, which in this case is the volume variable calculated above, and then the UnitType , which for this output is UnitType.Volume : Save the file and publish StarterFunction again: When you return to Hypar, click on the Sample 20 Options button in StarterFunction to create 20 new options, then click on one of the options to open it in the interactive display. In the Label dropdown you should see the two new properties you just added: Select volume and you should see the value appear in the graphic display on the mass: Now you see why we specified the UnitType for the new property. Specifying the UnitType as UnitType.Volume tells Hypar to add m3 to the displayed value to denote cubic meters. Internally Hypar maintains all values in metric units. Functions can calculate the conversion to Imperial units if required. If you select area in the Label dropdown, you should see the value notated in square meters: You're not limited to simple values like these. You can add any static or calculated value you'd like to any Hypar Element (like Mass). To learn more about the open source Hypar Elements library browse to the GitHub repository ."
  },
  "api/Elements.StructuralFraming.html": {
    "href": "api/Elements.StructuralFraming.html",
    "title": "Class StructuralFraming | Hypar Docs",
    "keywords": "Class StructuralFraming A structural element with a profile swept along a curve. Inheritance System.Object Element StructuralFraming Beam Brace Column Implements IElement IIdentifiable ITransformable IPropertySet IElementType < StructuralFramingType > ISweepAlongCurve IProfile ISolid Inherited Members Element.Id Element.Type Element.Properties Element.Transform Element.Name Element.AddProperty(String, IProperty) Element.RemoveProperty(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public abstract class StructuralFraming : Element, IElement, IIdentifiable, ITransformable, IPropertySet, IElementType<StructuralFramingType>, ISweepAlongCurve, IProfile, ISolid Constructors StructuralFraming(ICurve, StructuralFramingType, Double, Double, Transform) Construct a beam. Declaration [JsonConstructor] public StructuralFraming(ICurve curve, StructuralFramingType elementType, double startSetback = 0, double endSetback = 0, Transform transform = null) Parameters Type Name Description ICurve curve The center line of the beam. StructuralFramingType elementType The structural framing type. System.Double startSetback The setback of the beam's extrusion at its start. System.Double endSetback The setback of the beam's extrusion at its end. Transform transform The element's Transform. Properties Curve The center line of the framing element. Declaration [JsonConverter(typeof(ICurveConverter))] public ICurve Curve { get; } Property Value Type Description ICurve ElementType The element type of the structural framing. Declaration public StructuralFramingType ElementType { get; } Property Value Type Description StructuralFramingType EndSetback The setback of the framing's extrusion at the end. Declaration public double EndSetback { get; } Property Value Type Description System.Double Profile The extrusion's profile. Declaration [JsonIgnore] public Profile Profile { get; } Property Value Type Description Profile StartSetback The setback of the framing's extrusion at the start. Declaration public double StartSetback { get; } Property Value Type Description System.Double Methods GetUpdatedSolid() Get the updated solid representation of the framing element. Declaration public Solid GetUpdatedSolid() Returns Type Description Solid ProfileTransformed() Get the cross-section profile of the framing element transformed by the element's transform. Declaration public Profile ProfileTransformed() Returns Type Description Profile Volume() Calculate the volume of the element. Declaration public double Volume() Returns Type Description System.Double Implements IElement IIdentifiable ITransformable IPropertySet IElementType<TElementType> ISweepAlongCurve IProfile ISolid"
  },
  "api/Elements.Serialization.JSON.JsonExtensions.html": {
    "href": "api/Elements.Serialization.JSON.JsonExtensions.html",
    "title": "Class JsonExtensions | Hypar Docs",
    "keywords": "Class JsonExtensions Extensions for JSON serialization. Inheritance System.Object JsonExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Serialization.JSON Assembly : Hypar.Elements.dll Syntax public static class JsonExtensions Methods ToJson(Model, Boolean) Save a model to JSON. Declaration public static string ToJson(this Model model, bool indented = false) Parameters Type Name Description Model model System.Boolean indented Returns Type Description System.String"
  },
  "api/Elements.Geometry.Solids.Edge.html": {
    "href": "api/Elements.Geometry.Solids.Edge.html",
    "title": "Class Edge | Hypar Docs",
    "keywords": "Class Edge A Solid Edge. Inheritance System.Object Edge Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Elements.Geometry.Solids Assembly : Hypar.Elements.dll Syntax public class Edge Properties Id The Id of the Edge. Declaration public long Id { get; } Property Value Type Description System.Int64 Left The Left edge. Declaration public HalfEdge Left { get; } Property Value Type Description HalfEdge Right The Right edge. Declaration public HalfEdge Right { get; } Property Value Type Description HalfEdge Methods ToString() Get the string representation of the Edge. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Elements.Wall.html": {
    "href": "api/Elements.Wall.html",
    "title": "Class Wall | Hypar Docs",
    "keywords": "Class Wall A wall defined by a planar profile extruded to a height. var scene = new THREE.Scene(); var div = document.getElementById(\"model\") var camera = new THREE.PerspectiveCamera( 75, div.clientWidth/div.clientHeight, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true }); renderer.setSize( div.clientWidth, div.clientHeight ); renderer.setClearColor( 0x000000, 0 ); div.appendChild( renderer.domElement ); var controls = new THREE.OrbitControls( camera, renderer.domElement ); var light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 ); scene.add( light ); var axesHelper = new THREE.AxesHelper( 2 ); scene.add( axesHelper ); var size = 100; var divisions = 100; var colorCenterLine = new THREE.Color( 0xa0a0a0 ); var colorGrid = new THREE.Color( 0xdbdbdb ); var gridHelper = new THREE.GridHelper( size, divisions, colorCenterLine, colorGrid); scene.add( gridHelper ); window.addEventListener( 'resize', onWindowResize, false ); camera.position.z = 5; // Instantiate a loader var loader = new THREE.GLTFLoader(); // Load a glTF resource loader.load( // resource URL '../models/Elements_Wall.glb', // called when the resource is loaded function ( gltf ) { scene.add( gltf.scene ); gltf.animations; // Array<THREE.AnimationClip> gltf.scene; // THREE.Scene gltf.scenes; // Array<THREE.Scene> gltf.cameras; // Array<THREE.Camera> gltf.asset; // Object fitCameraToObject(gltf.scene, 2.0, controls) }, // called while loading is progressing function ( xhr ) { console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' ); }, // called when loading has errors function ( error ) { console.log( 'An error happened' ); } ); var animate = function () { requestAnimationFrame( animate ); // cube.rotation.x += 0.01; // cube.rotation.y += 0.01; renderer.render( scene, camera ); }; function onWindowResize(){ var div = document.getElementById(\"model\"); camera.aspect = div.clientWidth / div.clientHeight; camera.updateProjectionMatrix(); renderer.setSize( div.clientWidth, div.clientHeight ); }; const fitCameraToObject = function ( object, offset, orbitControls ) { const boundingBox = new THREE.Box3(); boundingBox.setFromObject( object ); const center = boundingBox.getCenter(); const size = boundingBox.getSize(); // get the max side of the bounding box const maxDim = Math.max( size.x, size.y, size.z ) * 3; const fov = this.camera.fov * ( Math.PI / 180 ); let cameraZ = Math.abs( maxDim / 4 * Math.tan( fov * 2 ) ); // offset the camera as desired - usually a value of ~ 1.25 is good to prevent // object filling the whole canvas if( offset !== undefined && offset !== 0 ) cameraZ *= offset; camera.position.set( center.x, center.y, cameraZ ); // set the far plane of the camera so that it easily encompasses the whole object const minZ = boundingBox.min.z; const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ; this.camera.far = cameraToFarEdge * 3; this.camera.updateProjectionMatrix(); if ( orbitControls !== undefined ) { // set camera to rotate around center of loaded object orbitControls.target = center; // prevent camera from zooming out far enough to create far plane cutoff orbitControls.maxDistance = cameraToFarEdge * 2; } }; animate(); Examples // Create a wall type. var wallType = new WallType(\"test\", new List<MaterialLayer> { new MaterialLayer(BuiltInMaterials.Concrete, 0.1) }); // Create some openings. var openings = new List<Opening>(){ new Opening(1.0, 2.0, 1.0, 1.0), new Opening(3.0, 1.0, 1.0, 2.0) }; var line = new Line(new Vector3(0, 0, 0), new Vector3(10, 10, 0)); var wall = new StandardWall(line, wallType, 3.0, openings); Inheritance System.Object Element Wall StandardWall Implements IElement IIdentifiable ITransformable IPropertySet IElementType < WallType > IExtrude IProfile ISolid Inherited Members Element.Id Element.Type Element.Properties Element.Transform Element.Name Element.AddProperty(String, IProperty) Element.RemoveProperty(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Wall : Element, IElement, IIdentifiable, ITransformable, IPropertySet, IElementType<WallType>, IExtrude, IProfile, ISolid Constructors Wall(Polygon, WallType, Double, Transform) Construct a wall by extruding a profile. Declaration public Wall(Polygon profile, WallType elementType, double height, Transform transform = null) Parameters Type Name Description Polygon profile The plan profile of the wall. WallType elementType The wall type of the wall. System.Double height The height of the wall. Transform transform An option transform for the wall. Properties BothSides Extrude to both sides? Declaration public virtual bool BothSides { get; } Property Value Type Description System.Boolean ElementType The WallType of the Wall. Declaration public WallType ElementType { get; protected set; } Property Value Type Description WallType ExtrudeDepth The extruded depth of the wall. Declaration public double ExtrudeDepth { get; protected set; } Property Value Type Description System.Double ExtrudeDirection The extruded direction of the wall. Declaration public Vector3 ExtrudeDirection { get; protected set; } Property Value Type Description Vector3 Geometry The wall's geometry. Declaration [JsonIgnore] public Solid Geometry { get; protected set; } Property Value Type Description Solid Height The height of the wall. Declaration public double Height { get; protected set; } Property Value Type Description System.Double Profile The extruded area of the wall. Declaration public Profile Profile { get; protected set; } Property Value Type Description Profile Methods GetUpdatedSolid() Get the updated solid representation of a wall. Declaration public Solid GetUpdatedSolid() Returns Type Description Solid Thickness() Calculate the thickness of the wall's extrusion from its wall type. Declaration public double Thickness() Returns Type Description System.Double Implements IElement IIdentifiable ITransformable IPropertySet IElementType<TElementType> IExtrude IProfile ISolid"
  },
  "api/Elements.UnitType.html": {
    "href": "api/Elements.UnitType.html",
    "title": "Enum UnitType | Hypar Docs",
    "keywords": "Enum UnitType An enumeration of unit types for a numeric parameter. Namespace : Elements Assembly : Hypar.Elements.dll Syntax [JsonConverter(typeof(StringEnumConverter))] public enum UnitType Fields Name Description Area An area in square meters. Distance A length in meters. Force A force in Newtons. Mass A mass in kilograms. None No unit assigned. Text A string value. Volume A volume in cubic meters."
  },
  "api/Elements.Serialization.JSON.ColorConverter.html": {
    "href": "api/Elements.Serialization.JSON.ColorConverter.html",
    "title": "Class ColorConverter | Hypar Docs",
    "keywords": "Class ColorConverter Inheritance System.Object Newtonsoft.Json.JsonConverter ColorConverter Inherited Members Newtonsoft.Json.JsonConverter.CanWrite System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Serialization.JSON Assembly : Hypar.Elements.dll Syntax public class ColorConverter : JsonConverter Properties CanRead Declaration public override bool CanRead { get; } Property Value Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanRead Methods CanConvert(Type) Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType Returns Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanConvert(System.Type) ReadJson(JsonReader, Type, Object, JsonSerializer) Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader System.Type objectType System.Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description System.Object Overrides Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) WriteJson(JsonWriter, Object, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer System.Object value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)"
  },
  "api/Elements.Interfaces.IElement.html": {
    "href": "api/Elements.Interfaces.IElement.html",
    "title": "Interface IElement | Hypar Docs",
    "keywords": "Interface IElement Inherited Members IIdentifiable.Id IIdentifiable.Name ITransformable.Transform IPropertySet.Properties Namespace : Elements.Interfaces Assembly : Hypar.Elements.dll Syntax public interface IElement : IIdentifiable, ITransformable, IPropertySet Properties Type A type descriptor for use in deserialization. Declaration string Type { get; } Property Value Type Description System.String"
  },
  "api/Elements.Geometry.Interfaces.ILamina.html": {
    "href": "api/Elements.Geometry.Interfaces.ILamina.html",
    "title": "Interface ILamina | Hypar Docs",
    "keywords": "Interface ILamina Creates a lamina (zero-thickness) solid. Inherited Members ISolid.GetUpdatedSolid() Namespace : Elements.Geometry.Interfaces Assembly : Hypar.Elements.dll Syntax public interface ILamina : ISolid Properties Perimeter The perimeter of the lamina's surfaces. Declaration Polygon Perimeter { get; } Property Value Type Description Polygon"
  },
  "api/Elements.GeoJSON.html": {
    "href": "api/Elements.GeoJSON.html",
    "title": "Namespace Elements.GeoJSON | Hypar Docs",
    "keywords": "Namespace Elements.GeoJSON Classes Feature A GeoJSON feature. FeatureCollection A GeoJSON feature collection. Geometry The base class for all GeoJSON geometry types. GeometryCollection A GeoJSON geometry collection. Line A GeoJSON line. LineString A GeoJSON linestring. MercatorProjection Methods for computing geographic coordinates using the Mercator projection. MultiLineString A GeoJSON multi line string. MultiPoint A GeoJSON multipoint. MultiPolygon A GeoJSON multi polygon. Point A GeoJSON point. Polygon A GeoJSON polygon. Position A GeoJSON position specified by longitude and latitude."
  },
  "api/Elements.Serialization.JSON.ModelConverter.html": {
    "href": "api/Elements.Serialization.JSON.ModelConverter.html",
    "title": "Class ModelConverter | Hypar Docs",
    "keywords": "Class ModelConverter Convert a Model. Inheritance System.Object Newtonsoft.Json.JsonConverter ModelConverter Inherited Members Newtonsoft.Json.JsonConverter.CanRead Newtonsoft.Json.JsonConverter.CanWrite System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Serialization.JSON Assembly : Hypar.Elements.dll Syntax public class ModelConverter : JsonConverter Methods CanConvert(Type) Can this converter convert and object of type objectType? Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType Returns Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanConvert(System.Type) ReadJson(JsonReader, Type, Object, JsonSerializer) Read json. Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader System.Type objectType System.Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description System.Object Overrides Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) WriteJson(JsonWriter, Object, JsonSerializer) Write json. Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer System.Object value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)"
  },
  "api/Elements.Serialization.JSON.MaterialToIdConverter.html": {
    "href": "api/Elements.Serialization.JSON.MaterialToIdConverter.html",
    "title": "Class MaterialToIdConverter | Hypar Docs",
    "keywords": "Class MaterialToIdConverter Converts a Material to its identifier and back. Inheritance System.Object Newtonsoft.Json.JsonConverter MaterialToIdConverter Inherited Members Newtonsoft.Json.JsonConverter.CanRead Newtonsoft.Json.JsonConverter.CanWrite System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Serialization.JSON Assembly : Hypar.Elements.dll Syntax public class MaterialToIdConverter : JsonConverter Constructors MaterialToIdConverter(Dictionary<Guid, Material>) Construct a MaterialConverter. Declaration public MaterialToIdConverter(Dictionary<Guid, Material> materials) Parameters Type Name Description System.Collections.Generic.Dictionary < System.Guid , Material > materials A collection of Materials. Methods CanConvert(Type) Can this converter convert an object of type objectType? Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType Returns Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanConvert(System.Type) ReadJson(JsonReader, Type, Object, JsonSerializer) Read json. Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader System.Type objectType System.Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description System.Object Overrides Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) WriteJson(JsonWriter, Object, JsonSerializer) Write json. Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer System.Object value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)"
  },
  "api/Elements.Geometry.Mesh.html": {
    "href": "api/Elements.Geometry.Mesh.html",
    "title": "Class Mesh | Hypar Docs",
    "keywords": "Class Mesh An indexed mesh. Inheritance System.Object Mesh Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Mesh Constructors Mesh() Construct an empty mesh. Declaration public Mesh() Properties Triangles The mesh's triangles. Declaration public List<Triangle> Triangles { get; } Property Value Type Description System.Collections.Generic.List < Triangle > Vertices The mesh's vertices. Declaration public List<Vertex> Vertices { get; } Property Value Type Description System.Collections.Generic.List < Vertex > Methods GetBuffers(out Byte[], out Byte[], out Byte[], out Byte[], out Double[], out Double[], out Double[], out Double[], out Single[], out Single[], out UInt16, out UInt16) Get all buffers required for rendering. Declaration public void GetBuffers(out byte[] vertexBuffer, out byte[] indexBuffer, out byte[] normalBuffer, out byte[] colorBuffer, out double[] v_max, out double[] v_min, out double[] n_min, out double[] n_max, out float[] c_min, out float[] c_max, out ushort index_min, out ushort index_max) Parameters Type Name Description System.Byte [] vertexBuffer System.Byte [] indexBuffer System.Byte [] normalBuffer System.Byte [] colorBuffer System.Double [] v_max System.Double [] v_min System.Double [] n_min System.Double [] n_max System.Single [] c_min System.Single [] c_max System.UInt16 index_min System.UInt16 index_max ToString() Get a string representation of the mesh. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Elements.Geometry.Interfaces.ISolid.html": {
    "href": "api/Elements.Geometry.Interfaces.ISolid.html",
    "title": "Interface ISolid | Hypar Docs",
    "keywords": "Interface ISolid Namespace : Elements.Geometry.Interfaces Assembly : Hypar.Elements.dll Syntax public interface ISolid Methods GetUpdatedSolid() Declaration Solid GetUpdatedSolid() Returns Type Description Solid"
  },
  "api/Elements.StringProperty.html": {
    "href": "api/Elements.StringProperty.html",
    "title": "Class StringProperty | Hypar Docs",
    "keywords": "Class StringProperty A property with a string value. Inheritance System.Object StringProperty Implements IPropertySingleValue < System.String > IProperty Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class StringProperty : IPropertySingleValue<string>, IProperty Constructors StringProperty(String, UnitType, String) Construct a Property. Declaration [JsonConstructor] public StringProperty(string value, UnitType unitType, string description = null) Parameters Type Name Description System.String value The value of the Property. UnitType unitType The unit type of the Property. System.String description The description of the Property. Properties Description The description of the Property. Declaration public string Description { get; } Property Value Type Description System.String UnitType The UnitType of the Property. Declaration [JsonConverter(typeof(StringEnumConverter))] public UnitType UnitType { get; } Property Value Type Description UnitType Value The value of the Property. Declaration public string Value { get; } Property Value Type Description System.String Implements IPropertySingleValue<TValue> IProperty"
  },
  "api/Elements.Geometry.html": {
    "href": "api/Elements.Geometry.html",
    "title": "Namespace Elements.Geometry | Hypar Docs",
    "keywords": "Namespace Elements.Geometry Classes Arc An arc defined around a center between a start angle and an end angle. BBox3 An axis-alignment bounding box. Color An RGBA color. Colors Commonly used colors. Kernel Line A linear curve between two points. Matrix A column-ordered 4x4 matrix. Mesh An indexed mesh. Plane A cartesian plane. Polygon A closed planar polygon. Polyline A coplanar continuous set of lines. Profile A polygonal perimeter with zero or more polygonal voids. Quaternion A quaternion. Transform A coordinate system defined by an origin, x, y, and z axes. Triangle A mesh triangle. Vector3 A 3D vector. Vector3Extensions Extension methods for Vector3. Vertex A mesh vertex. Enums HorizontalAlignment The horizontal alignment of a profile. VerticalAlignment The vertical alignment of a profile."
  },
  "api/Elements.Geometry.Solids.Solid.html": {
    "href": "api/Elements.Geometry.Solids.Solid.html",
    "title": "Class Solid | Hypar Docs",
    "keywords": "Class Solid A boundary representation of a solid. Inheritance System.Object Solid Implements ITessellate Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Elements.Geometry.Solids Assembly : Hypar.Elements.dll Syntax public class Solid : ITessellate Constructors Solid() Construct a solid. Declaration public Solid() Properties Edges The edges of the solid. Declaration public Dictionary<long, Edge> Edges { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.Int64 , Edge > Faces The Faces of the Solid. Declaration public Dictionary<long, Face> Faces { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.Int64 , Face > Vertices The vertices of the solid. Declaration public Dictionary<long, Vertex> Vertices { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.Int64 , Vertex > Methods AddEdge(Vertex, Vertex) Add an edge to the solid. Declaration public Edge AddEdge(Vertex from, Vertex to) Parameters Type Name Description Vertex from The start vertex. Vertex to The end vertex. Returns Type Description Edge The newly added edge. AddEdges(Polygon) Creates a series of edges from a polygon. Declaration public Edge[] AddEdges(Polygon p) Parameters Type Name Description Polygon p Returns Type Description Edge [] AddFace(Polygon, Polygon[]) Add a Face to the Solid. Declaration public Face AddFace(Polygon outer, Polygon[] inner = null) Parameters Type Name Description Polygon outer A polygon representing the perimeter of the face. Polygon [] inner An array of polygons representing the holes in the face. Returns Type Description Face The newly added face. AddFace(Loop, Loop[]) Add a face to the solid. Provided edges are expected to be wound CCW for outer, and CW for inner. The face will be linked to the edges. Declaration public Face AddFace(Loop outer, Loop[] inner = null) Parameters Type Name Description Loop outer The outer Loop of the Face. Loop [] inner The inner Loops of the Face. Returns Type Description Face The newly added Face. AddVertex(Vector3) Add a Vertex to the Solid. Declaration public Vertex AddVertex(Vector3 position) Parameters Type Name Description Vector3 position Returns Type Description Vertex The newly added vertex. Cap(Edge[][], Boolean) Create a face from edges. The first edge array is treated as the outer edge. Additional edge arrays are treated as holes. Declaration protected void Cap(Edge[][] edges, bool reverse = true) Parameters Type Name Description Edge [][] edges System.Boolean reverse CreateLamina(Vector3[]) Construct a lamina solid. Declaration public static Solid CreateLamina(Vector3[] perimeter) Parameters Type Name Description Vector3 [] perimeter The perimeter of the lamina's faces. Returns Type Description Solid LoopFromPolygon(Polygon) Declaration protected Loop LoopFromPolygon(Polygon p) Parameters Type Name Description Polygon p Returns Type Description Loop SweepFace(Polygon, Polygon[], Vector3, Double, Boolean) Construct a solid by sweeping a face in a direction. Declaration public static Solid SweepFace(Polygon perimeter, Polygon[] holes, Vector3 direction, double distance, bool bothSides = false) Parameters Type Name Description Polygon perimeter The perimeter of the face to sweep. Polygon [] holes The holes of the face to sweep. Vector3 direction The direction in which to sweep. System.Double distance The distance to sweep. System.Boolean bothSides Should the sweep start offset by direction distance/2? Returns Type Description Solid A solid. SweepFace(Polygon, Polygon[], Double, Boolean) Construct a solid by sweeping a face. Declaration public static Solid SweepFace(Polygon perimeter, Polygon[] holes, double distance, bool bothSides = false) Parameters Type Name Description Polygon perimeter The perimeter of the face to sweep. Polygon [] holes The holes of the face to sweep. System.Double distance The distance to sweep. System.Boolean bothSides Should the sweep start offset by direction distance/2? Returns Type Description Solid A solid. SweepFaceAlongCurve(Polygon, Polygon[], ICurve, Double, Double) Construct a solid by sweeping a face along a curve. Declaration public static Solid SweepFaceAlongCurve(Polygon perimeter, Polygon[] holes, ICurve curve, double startSetback = 0, double endSetback = 0) Parameters Type Name Description Polygon perimeter The perimeter of the face to sweep. Polygon [] holes The holes of the face to sweep. ICurve curve The curve along which to sweep. System.Double startSetback The setback of the sweep from the start of the curve. System.Double endSetback The setback of the sweep from the end of the curve. Returns Type Description Solid A solid. Tessellate(ref Mesh) Triangulate this solid. Declaration public void Tessellate(ref Mesh mesh) Parameters Type Name Description Mesh mesh The mesh to which the solid's tessellated data will be added. ToString() Get the string representation of the solid. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements ITessellate"
  },
  "api/Elements.Geometry.Profiles.WideFlangeProfileServer.html": {
    "href": "api/Elements.Geometry.Profiles.WideFlangeProfileServer.html",
    "title": "Class WideFlangeProfileServer | Hypar Docs",
    "keywords": "Class WideFlangeProfileServer A singleton class which serves every Wide Flange section as defined by AISC. Inheritance System.Object ProfileServer WideFlangeProfileServer Inherited Members ProfileServer.InchesToMeters ProfileServer._profiles ProfileServer.GetProfileByName(String) ProfileServer.AllProfiles() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Geometry.Profiles Assembly : Hypar.Elements.dll Syntax public sealed class WideFlangeProfileServer : ProfileServer Properties Instance The WideFlangeProfileServer singleton. Declaration public static WideFlangeProfileServer Instance { get; } Property Value Type Description WideFlangeProfileServer"
  },
  "api/Elements.Geometry.Matrix.html": {
    "href": "api/Elements.Geometry.Matrix.html",
    "title": "Class Matrix | Hypar Docs",
    "keywords": "Class Matrix A column-ordered 4x4 matrix. Inheritance System.Object Matrix Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Matrix Constructors Matrix() Construct a 4X3 matrix. Declaration public Matrix() Matrix(Vector3, Vector3, Vector3, Vector3) Construct a matrix from axes. Declaration [JsonConstructor] public Matrix(Vector3 xAxis, Vector3 yAxis, Vector3 zAxis, Vector3 translation) Parameters Type Name Description Vector3 xAxis The X axis. Vector3 yAxis The Y axis. Vector3 zAxis The Z axis. Vector3 translation The translation. Properties Translation The translation component of the Matrix. Declaration public Vector3 Translation { get; } Property Value Type Description Vector3 XAxis The X axis of the Matrix. Declaration public Vector3 XAxis { get; } Property Value Type Description Vector3 YAxis The Y axis of the Matrix. Declaration public Vector3 YAxis { get; } Property Value Type Description Vector3 ZAxis The Z axis of the Matrix. Declaration public Vector3 ZAxis { get; } Property Value Type Description Vector3 Methods Determinant() Compute the determinant of the 3x3 portion of the matrix. Declaration public double Determinant() Returns Type Description System.Double Inverse() Compute the inverse of the matrix. Declaration public Matrix Inverse() Returns Type Description Matrix SetIdentity() Set the matrix to identity. Declaration public void SetIdentity() SetTranslation(Vector3) Set the translation of the matrix. Declaration public void SetTranslation(Vector3 v) Parameters Type Name Description Vector3 v The translation vector. SetupProject(Plane) Setup the matrix to project. Declaration public void SetupProject(Plane p) Parameters Type Name Description Plane p The plane on which to project. Exceptions Type Condition System.Exception Thrown when provided Plane's normal is not unit length. SetupRotate(Vector3, Double) Setup the matrix to perform rotation. Declaration public void SetupRotate(Vector3 axis, double theta) Parameters Type Name Description Vector3 axis The axis of rotation. System.Double theta The angle of rotation in radians. SetupRotate(Int32, Double) Setup the matrix to rotate. Declaration public void SetupRotate(int axis, double theta) Parameters Type Name Description System.Int32 axis The axis of rotation. 1-x, 2-y, 3-z System.Double theta The angle of rotation in radians. Exceptions Type Condition System.ArgumentException Thrown when the provided axis is not 1-3. SetupScale(Vector3) Setup the matrix to scale. Declaration public void SetupScale(Vector3 s) Parameters Type Name Description Vector3 s The scale value. SetupTranslation(Vector3) Setup the matrix to translate. Declaration public void SetupTranslation(Vector3 v) Parameters Type Name Description Vector3 v The translation. ToString() Return the string representation of the matrix. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Transpose() Transpose the matrix. Declaration public Matrix Transpose() Returns Type Description Matrix ZeroTranslation() Set the translation of the matrix to zero. Declaration public void ZeroTranslation() Operators Multiply(Matrix, Matrix) Multiply two matrices. Declaration public static Matrix operator *(Matrix a, Matrix b) Parameters Type Name Description Matrix a Matrix b Returns Type Description Matrix Multiply(Vector3, Matrix) Transform the specified vector. Declaration public static Vector3 operator *(Vector3 p, Matrix m) Parameters Type Name Description Vector3 p The vector to transform. Matrix m The transformation matrix. Returns Type Description Vector3"
  },
  "api/Elements.Geometry.Interfaces.IProfile.html": {
    "href": "api/Elements.Geometry.Interfaces.IProfile.html",
    "title": "Interface IProfile | Hypar Docs",
    "keywords": "Interface IProfile Interface implemented by types which provide a Profile. Namespace : Elements.Geometry.Interfaces Assembly : Hypar.Elements.dll Syntax public interface IProfile Properties Profile A profile. Declaration Profile Profile { get; } Property Value Type Description Profile"
  },
  "api/Elements.Serialization.IFC.IFCExtensions.html": {
    "href": "api/Elements.Serialization.IFC.IFCExtensions.html",
    "title": "Class IFCExtensions | Hypar Docs",
    "keywords": "Class IFCExtensions Extension methods for converting IFC types to Element types. Inheritance System.Object IFCExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Serialization.IFC Assembly : Hypar.Elements.dll Syntax public static class IFCExtensions Methods ToIFC(Model, String) Write the model to IFC. Declaration public static void ToIFC(this Model model, string path) Parameters Type Name Description Model model System.String path The path to the generated IFC STEP file."
  },
  "api/Elements.Interfaces.IProperty.html": {
    "href": "api/Elements.Interfaces.IProperty.html",
    "title": "Interface IProperty | Hypar Docs",
    "keywords": "Interface IProperty Namespace : Elements.Interfaces Assembly : Hypar.Elements.dll Syntax public interface IProperty Properties Description The description of the property. Declaration string Description { get; } Property Value Type Description System.String"
  },
  "api/Elements.GeoJSON.Polygon.html": {
    "href": "api/Elements.GeoJSON.Polygon.html",
    "title": "Class Polygon | Hypar Docs",
    "keywords": "Class Polygon A GeoJSON polygon. Inheritance System.Object Geometry Polygon Inherited Members Geometry.Type System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax public class Polygon : Geometry Constructors Polygon(Position[][]) Construct a Polygon. Declaration public Polygon(Position[][] coordinates) Parameters Type Name Description Position [][] coordinates Properties Coordinates The coordinates of the geometry. Declaration public Position[][] Coordinates { get; } Property Value Type Description Position [][] Methods ToPolygons() Convert the coordinate array to a collection of polylines. The last position of the polygon is dropped. Declaration public Polygon[] ToPolygons() Returns Type Description Polygon []"
  },
  "api/Elements.GeoJSON.Geometry.html": {
    "href": "api/Elements.GeoJSON.Geometry.html",
    "title": "Class Geometry | Hypar Docs",
    "keywords": "Class Geometry The base class for all GeoJSON geometry types. Inheritance System.Object Geometry Line LineString MultiLineString MultiPoint MultiPolygon Point Polygon Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax public abstract class Geometry Properties Type The type of the geometry. Declaration public virtual string Type { get; } Property Value Type Description System.String"
  },
  "api/Elements.Interfaces.ILayeredMaterial.html": {
    "href": "api/Elements.Interfaces.ILayeredMaterial.html",
    "title": "Interface ILayeredMaterial | Hypar Docs",
    "keywords": "Interface ILayeredMaterial A layered material. Namespace : Elements.Interfaces Assembly : Hypar.Elements.dll Syntax public interface ILayeredMaterial Properties MaterialLayers A collection of material layers. Declaration List<MaterialLayer> MaterialLayers { get; } Property Value Type Description System.Collections.Generic.List < MaterialLayer >"
  },
  "api/Elements.Interfaces.IIdentifiable.html": {
    "href": "api/Elements.Interfaces.IIdentifiable.html",
    "title": "Interface IIdentifiable | Hypar Docs",
    "keywords": "Interface IIdentifiable The interface for all elements which can be identified with a unique identifier. Namespace : Elements.Interfaces Assembly : Hypar.Elements.dll Syntax public interface IIdentifiable Properties Id The unique identifier of the Element. Declaration Guid Id { get; } Property Value Type Description System.Guid Name A human-readable name for the Element. Declaration string Name { get; } Property Value Type Description System.String"
  },
  "api/Elements.Geometry.Interfaces.IExtrude.html": {
    "href": "api/Elements.Geometry.Interfaces.IExtrude.html",
    "title": "Interface IExtrude | Hypar Docs",
    "keywords": "Interface IExtrude Extrudes a closed profile in a direction to create a solid. Inherited Members IProfile.Profile ISolid.GetUpdatedSolid() Namespace : Elements.Geometry.Interfaces Assembly : Hypar.Elements.dll Syntax public interface IExtrude : IProfile, ISolid Properties BothSides Extrude to both sides? Declaration bool BothSides { get; } Property Value Type Description System.Boolean ExtrudeDepth The depth of the extrusion. Declaration double ExtrudeDepth { get; } Property Value Type Description System.Double ExtrudeDirection The direction of the extrusion. Declaration Vector3 ExtrudeDirection { get; } Property Value Type Description Vector3"
  },
  "api/Elements.Geometry.Interfaces.html": {
    "href": "api/Elements.Geometry.Interfaces.html",
    "title": "Namespace Elements.Geometry.Interfaces | Hypar Docs",
    "keywords": "Namespace Elements.Geometry.Interfaces Interfaces ICurve ICurve is implemented by all curve types. IExtrude Extrudes a closed profile in a direction to create a solid. ILamina Creates a lamina (zero-thickness) solid. IProfile Interface implemented by types which provide a Profile. ISolid ISweepAlongCurve Sweeps an area along a directrix. ITessellate ITransformable"
  },
  "api/Elements.Geometry.Interfaces.ICurve.html": {
    "href": "api/Elements.Geometry.Interfaces.ICurve.html",
    "title": "Interface ICurve | Hypar Docs",
    "keywords": "Interface ICurve ICurve is implemented by all curve types. Namespace : Elements.Geometry.Interfaces Assembly : Hypar.Elements.dll Syntax public interface ICurve Properties End The end of the curve. Declaration Vector3 End { get; } Property Value Type Description Vector3 Start The start of the curve. Declaration Vector3 Start { get; } Property Value Type Description Vector3 Type A type descriptor for use in deserialization. Declaration string Type { get; } Property Value Type Description System.String Methods Bounds() Get the bounding box of this curve. Declaration BBox3 Bounds() Returns Type Description BBox3 Frames(Double, Double) Get a collection of Transforms which represent frames along this ICurve. Declaration Transform[] Frames(double startSetback = 0, double endSetback = 0) Parameters Type Name Description System.Double startSetback The offset from the start of the ICurve. System.Double endSetback The offset from the end of the ICurve. Returns Type Description Transform [] A collection of Transforms. Length() Calculate the length of the curve. Declaration double Length() Returns Type Description System.Double PointAt(Double) Get a point along the curve at parameter u. Declaration Vector3 PointAt(double u) Parameters Type Name Description System.Double u A parameter on the curve between 0.0 and 1.0. Returns Type Description Vector3 The point on the curve. Reversed() Get an ICurve which is the reverse of this curve. Declaration ICurve Reversed() Returns Type Description ICurve TransformAt(Double) Get the frame from the curve at parameter u. Declaration Transform TransformAt(double u) Parameters Type Name Description System.Double u A parameter on the curve between 0.0 and 1.0. Returns Type Description Transform The transform of the curve at parameter u, with the transform's Z axis tangent to the curve."
  },
  "api/Elements.Column.html": {
    "href": "api/Elements.Column.html",
    "title": "Class Column | Hypar Docs",
    "keywords": "Class Column A vertical structural framing element. var scene = new THREE.Scene(); var div = document.getElementById(\"model\") var camera = new THREE.PerspectiveCamera( 75, div.clientWidth/div.clientHeight, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true }); renderer.setSize( div.clientWidth, div.clientHeight ); renderer.setClearColor( 0x000000, 0 ); div.appendChild( renderer.domElement ); var controls = new THREE.OrbitControls( camera, renderer.domElement ); var light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 ); scene.add( light ); var axesHelper = new THREE.AxesHelper( 2 ); scene.add( axesHelper ); var size = 100; var divisions = 100; var colorCenterLine = new THREE.Color( 0xa0a0a0 ); var colorGrid = new THREE.Color( 0xdbdbdb ); var gridHelper = new THREE.GridHelper( size, divisions, colorCenterLine, colorGrid); scene.add( gridHelper ); window.addEventListener( 'resize', onWindowResize, false ); camera.position.z = 5; // Instantiate a loader var loader = new THREE.GLTFLoader(); // Load a glTF resource loader.load( // resource URL '../models/Elements_Column.glb', // called when the resource is loaded function ( gltf ) { scene.add( gltf.scene ); gltf.animations; // Array<THREE.AnimationClip> gltf.scene; // THREE.Scene gltf.scenes; // Array<THREE.Scene> gltf.cameras; // Array<THREE.Camera> gltf.asset; // Object fitCameraToObject(gltf.scene, 2.0, controls) }, // called while loading is progressing function ( xhr ) { console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' ); }, // called when loading has errors function ( error ) { console.log( 'An error happened' ); } ); var animate = function () { requestAnimationFrame( animate ); // cube.rotation.x += 0.01; // cube.rotation.y += 0.01; renderer.render( scene, camera ); }; function onWindowResize(){ var div = document.getElementById(\"model\"); camera.aspect = div.clientWidth / div.clientHeight; camera.updateProjectionMatrix(); renderer.setSize( div.clientWidth, div.clientHeight ); }; const fitCameraToObject = function ( object, offset, orbitControls ) { const boundingBox = new THREE.Box3(); boundingBox.setFromObject( object ); const center = boundingBox.getCenter(); const size = boundingBox.getSize(); // get the max side of the bounding box const maxDim = Math.max( size.x, size.y, size.z ) * 3; const fov = this.camera.fov * ( Math.PI / 180 ); let cameraZ = Math.abs( maxDim / 4 * Math.tan( fov * 2 ) ); // offset the camera as desired - usually a value of ~ 1.25 is good to prevent // object filling the whole canvas if( offset !== undefined && offset !== 0 ) cameraZ *= offset; camera.position.set( center.x, center.y, cameraZ ); // set the far plane of the camera so that it easily encompasses the whole object const minZ = boundingBox.min.z; const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ; this.camera.far = cameraToFarEdge * 3; this.camera.updateProjectionMatrix(); if ( orbitControls !== undefined ) { // set camera to rotate around center of loaded object orbitControls.target = center; // prevent camera from zooming out far enough to create far plane cutoff orbitControls.maxDistance = cameraToFarEdge * 2; } }; animate(); Examples // Create a framing type. var profile = WideFlangeProfileServer.Instance.GetProfileByName(\"W44x335\"); var framingType = new StructuralFramingType(profile.Name, profile, BuiltInMaterials.Steel); // Create a column. var column = new Column(Vector3.Origin, 3.0, framingType); Inheritance System.Object Element StructuralFraming Column Implements IElement IIdentifiable ITransformable IPropertySet IElementType < StructuralFramingType > ISweepAlongCurve IProfile ISolid Inherited Members StructuralFraming.Curve StructuralFraming.StartSetback StructuralFraming.EndSetback StructuralFraming.ElementType StructuralFraming.Profile StructuralFraming.Volume() StructuralFraming.ProfileTransformed() StructuralFraming.GetUpdatedSolid() Element.Id Element.Type Element.Properties Element.Transform Element.Name Element.AddProperty(String, IProperty) Element.RemoveProperty(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Column : StructuralFraming, IElement, IIdentifiable, ITransformable, IPropertySet, IElementType<StructuralFramingType>, ISweepAlongCurve, IProfile, ISolid Constructors Column(Vector3, Double, StructuralFramingType, Transform, Double, Double) Construct a Column. Declaration [JsonConstructor] public Column(Vector3 location, double height, StructuralFramingType elementType, Transform transform = null, double startSetback = 0, double endSetback = 0) Parameters Type Name Description Vector3 location The location of the base of the column. System.Double height The column's height. StructuralFramingType elementType The column's structural framing type. Transform transform The column's transform. System.Double startSetback The setback of the column's extrusion from the base of the column. System.Double endSetback The setback of the column's extrusion from the top of the column. Properties Height The height of the column. Declaration public double Height { get; } Property Value Type Description System.Double Location The location of the base of the column. Declaration public Vector3 Location { get; } Property Value Type Description Vector3 Implements IElement IIdentifiable ITransformable IPropertySet IElementType<TElementType> ISweepAlongCurve IProfile ISolid"
  },
  "api/Elements.Serialization.glTF.GltfExtensions.html": {
    "href": "api/Elements.Serialization.glTF.GltfExtensions.html",
    "title": "Class GltfExtensions | Hypar Docs",
    "keywords": "Class GltfExtensions Extensions for glTF serialization. Inheritance System.Object GltfExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Serialization.glTF Assembly : Hypar.Elements.dll Syntax public static class GltfExtensions Methods ToBase64String(Model) Convert the Model to a base64 encoded string. Declaration public static string ToBase64String(this Model model) Parameters Type Name Description Model model Returns Type Description System.String A Base64 string representing the Model. ToGlTF(Model, String, Boolean) Save a model to gltf. Declaration public static void ToGlTF(this Model model, string path, bool useBinarySerialization = true) Parameters Type Name Description Model model The model to serialize. System.String path The output path. System.Boolean useBinarySerialization Should binary serialization be used?"
  },
  "api/Elements.Truss.html": {
    "href": "api/Elements.Truss.html",
    "title": "Class Truss | Hypar Docs",
    "keywords": "Class Truss An aggregation of structural framing elements. var scene = new THREE.Scene(); var div = document.getElementById(\"model\") var camera = new THREE.PerspectiveCamera( 75, div.clientWidth/div.clientHeight, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true }); renderer.setSize( div.clientWidth, div.clientHeight ); renderer.setClearColor( 0x000000, 0 ); div.appendChild( renderer.domElement ); var controls = new THREE.OrbitControls( camera, renderer.domElement ); var light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 ); scene.add( light ); var axesHelper = new THREE.AxesHelper( 2 ); scene.add( axesHelper ); var size = 100; var divisions = 100; var colorCenterLine = new THREE.Color( 0xa0a0a0 ); var colorGrid = new THREE.Color( 0xdbdbdb ); var gridHelper = new THREE.GridHelper( size, divisions, colorCenterLine, colorGrid); scene.add( gridHelper ); window.addEventListener( 'resize', onWindowResize, false ); camera.position.z = 5; // Instantiate a loader var loader = new THREE.GLTFLoader(); // Load a glTF resource loader.load( // resource URL '../models/Elements_Truss.glb', // called when the resource is loaded function ( gltf ) { scene.add( gltf.scene ); gltf.animations; // Array<THREE.AnimationClip> gltf.scene; // THREE.Scene gltf.scenes; // Array<THREE.Scene> gltf.cameras; // Array<THREE.Camera> gltf.asset; // Object fitCameraToObject(gltf.scene, 2.0, controls) }, // called while loading is progressing function ( xhr ) { console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' ); }, // called when loading has errors function ( error ) { console.log( 'An error happened' ); } ); var animate = function () { requestAnimationFrame( animate ); // cube.rotation.x += 0.01; // cube.rotation.y += 0.01; renderer.render( scene, camera ); }; function onWindowResize(){ var div = document.getElementById(\"model\"); camera.aspect = div.clientWidth / div.clientHeight; camera.updateProjectionMatrix(); renderer.setSize( div.clientWidth, div.clientHeight ); }; const fitCameraToObject = function ( object, offset, orbitControls ) { const boundingBox = new THREE.Box3(); boundingBox.setFromObject( object ); const center = boundingBox.getCenter(); const size = boundingBox.getSize(); // get the max side of the bounding box const maxDim = Math.max( size.x, size.y, size.z ) * 3; const fov = this.camera.fov * ( Math.PI / 180 ); let cameraZ = Math.abs( maxDim / 4 * Math.tan( fov * 2 ) ); // offset the camera as desired - usually a value of ~ 1.25 is good to prevent // object filling the whole canvas if( offset !== undefined && offset !== 0 ) cameraZ *= offset; camera.position.set( center.x, center.y, cameraZ ); // set the far plane of the camera so that it easily encompasses the whole object const minZ = boundingBox.min.z; const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ; this.camera.far = cameraToFarEdge * 3; this.camera.updateProjectionMatrix(); if ( orbitControls !== undefined ) { // set camera to rotate around center of loaded object orbitControls.target = center; // prevent camera from zooming out far enough to create far plane cutoff orbitControls.maxDistance = cameraToFarEdge * 2; } }; animate(); Examples // Create a framing type. var profile = WideFlangeProfileServer.Instance.GetProfileByName(\"W33x387\"); var framingType = new StructuralFramingType(\"W33x387\", profile, BuiltInMaterials.Steel); // Create a truss. var truss = new Truss(new Vector3(0, 0, 0), new Vector3(0,30,10), 3.0, 10, framingType, framingType, framingType, BuiltInMaterials.Steel, 0.1, 0.1); Inheritance System.Object Element Truss Implements IElement IIdentifiable ITransformable IPropertySet IAggregateElements Inherited Members Element.Id Element.Type Element.Properties Element.Transform Element.Name Element.AddProperty(String, IProperty) Element.RemoveProperty(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Truss : Element, IElement, IIdentifiable, ITransformable, IPropertySet, IAggregateElements Constructors Truss(Vector3, Vector3, Double, Int32, StructuralFramingType, StructuralFramingType, StructuralFramingType, Material, Double, Double) Construct a truss. Declaration [JsonConstructor] public Truss(Vector3 start, Vector3 end, double depth, int divisions, StructuralFramingType topChordType, StructuralFramingType bottomChordType, StructuralFramingType webType, Material material, double startSetback = 0, double endSetback = 0) Parameters Type Name Description Vector3 start The start of the truss. Vector3 end The end of the truss. System.Double depth The depth of the truss. System.Int32 divisions The number of panels in the truss. StructuralFramingType topChordType The structural framing type to be used for the top chord. StructuralFramingType bottomChordType The structural framing type to be used for the bottom chord. StructuralFramingType webType The structural framing type to be used for the web. Material material The truss' material. System.Double startSetback A setback to apply to the start of all members of the truss. System.Double endSetback A setback to apply to the end of all members of the truss. Properties BottomChordType The Profile used for members in the bottom chord of the truss. Declaration public StructuralFramingType BottomChordType { get; } Property Value Type Description StructuralFramingType Depth The depth of the truss. Declaration public double Depth { get; } Property Value Type Description System.Double Divisions The number of divisions in the truss. Declaration public int Divisions { get; } Property Value Type Description System.Int32 Elements The elements aggregated by this element. Declaration public List<Element> Elements { get; } Property Value Type Description System.Collections.Generic.List < Element > End The end of the truss. Declaration public Vector3 End { get; } Property Value Type Description Vector3 Start The start of the truss. Declaration public Vector3 Start { get; } Property Value Type Description Vector3 TopChordType The Profile used for members in the top chord of the truss. Declaration public StructuralFramingType TopChordType { get; } Property Value Type Description StructuralFramingType WebType The Profile used for members in the web of the truss. Declaration public StructuralFramingType WebType { get; } Property Value Type Description StructuralFramingType Implements IElement IIdentifiable ITransformable IPropertySet IAggregateElements"
  },
  "api/Elements.Topography.html": {
    "href": "api/Elements.Topography.html",
    "title": "Class Topography | Hypar Docs",
    "keywords": "Class Topography A topographic mesh defined by an array of elevation values. var scene = new THREE.Scene(); var div = document.getElementById(\"model\") var camera = new THREE.PerspectiveCamera( 75, div.clientWidth/div.clientHeight, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true }); renderer.setSize( div.clientWidth, div.clientHeight ); renderer.setClearColor( 0x000000, 0 ); div.appendChild( renderer.domElement ); var controls = new THREE.OrbitControls( camera, renderer.domElement ); var light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 ); scene.add( light ); var axesHelper = new THREE.AxesHelper( 2 ); scene.add( axesHelper ); var size = 100; var divisions = 100; var colorCenterLine = new THREE.Color( 0xa0a0a0 ); var colorGrid = new THREE.Color( 0xdbdbdb ); var gridHelper = new THREE.GridHelper( size, divisions, colorCenterLine, colorGrid); scene.add( gridHelper ); window.addEventListener( 'resize', onWindowResize, false ); camera.position.z = 5; // Instantiate a loader var loader = new THREE.GLTFLoader(); // Load a glTF resource loader.load( // resource URL '../models/Elements_Topography.glb', // called when the resource is loaded function ( gltf ) { scene.add( gltf.scene ); gltf.animations; // Array<THREE.AnimationClip> gltf.scene; // THREE.Scene gltf.scenes; // Array<THREE.Scene> gltf.cameras; // Array<THREE.Camera> gltf.asset; // Object fitCameraToObject(gltf.scene, 2.0, controls) }, // called while loading is progressing function ( xhr ) { console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' ); }, // called when loading has errors function ( error ) { console.log( 'An error happened' ); } ); var animate = function () { requestAnimationFrame( animate ); // cube.rotation.x += 0.01; // cube.rotation.y += 0.01; renderer.render( scene, camera ); }; function onWindowResize(){ var div = document.getElementById(\"model\"); camera.aspect = div.clientWidth / div.clientHeight; camera.updateProjectionMatrix(); renderer.setSize( div.clientWidth, div.clientHeight ); }; const fitCameraToObject = function ( object, offset, orbitControls ) { const boundingBox = new THREE.Box3(); boundingBox.setFromObject( object ); const center = boundingBox.getCenter(); const size = boundingBox.getSize(); // get the max side of the bounding box const maxDim = Math.max( size.x, size.y, size.z ) * 3; const fov = this.camera.fov * ( Math.PI / 180 ); let cameraZ = Math.abs( maxDim / 4 * Math.tan( fov * 2 ) ); // offset the camera as desired - usually a value of ~ 1.25 is good to prevent // object filling the whole canvas if( offset !== undefined && offset !== 0 ) cameraZ *= offset; camera.position.set( center.x, center.y, cameraZ ); // set the far plane of the camera so that it easily encompasses the whole object const minZ = boundingBox.min.z; const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ; this.camera.far = cameraToFarEdge * 3; this.camera.updateProjectionMatrix(); if ( orbitControls !== undefined ) { // set camera to rotate around center of loaded object orbitControls.target = center; // prevent camera from zooming out far enough to create far plane cutoff orbitControls.maxDistance = cameraToFarEdge * 2; } }; animate(); Examples // Read topo elevations from a file. var w = 512/8 - 1; var data = JsonConvert.DeserializeObject<Dictionary<string,double[]>>(File.ReadAllText(\"./elevations.json\")); var elevations = data[\"points\"]; // Compute the mapbox tile size. var cellSize = (40075016.685578 / Math.Pow(2, 15))/w; // Create a colorizer which colors a triangle // according to its slope. Func<Triangle,Color> colorizer = (tri) => { var slope = tri.Normal.AngleTo(Vector3.ZAxis); if(slope >=0.0 && slope < 15.0) { return Colors.Green; } else if(slope >= 15.0 && slope < 30.0) { return Colors.Yellow; } else if(slope >= 30.0 && slope < 45.0) { return Colors.Orange; } else if(slope >= 45.0) { return Colors.Red; } return Colors.Red; }; // Create a topography. var topo = new Topography(Vector3.Origin, cellSize, cellSize, elevations, w, colorizer); Inheritance System.Object Element Topography Implements IElement IIdentifiable ITransformable IPropertySet ITessellate IMaterial Inherited Members Element.Id Element.Type Element.Properties Element.Transform Element.Name Element.AddProperty(String, IProperty) Element.RemoveProperty(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Topography : Element, IElement, IIdentifiable, ITransformable, IPropertySet, ITessellate, IMaterial Constructors Topography(Vector3, Double, Double, Double[], Int32, Func<Triangle, Color>) Create a topography. Declaration public Topography(Vector3 origin, double cellWidth, double cellHeight, double[] elevations, int width, Func<Triangle, Color> colorizer) Parameters Type Name Description Vector3 origin The origin of the topography. System.Double cellWidth The width of each square \"cell\" of the topography. System.Double cellHeight The height of each square \"cell\" of the topography. System.Double [] elevations An array of elevation samples which will be converted to a square array of width. System.Int32 width System.Func < Triangle , Color > colorizer A function which produces a color for a triangle. Properties Material The material of the topography. Declaration public Material Material { get; } Property Value Type Description Material MaxElevation The maximum elevation of the topography. Declaration public double MaxElevation { get; } Property Value Type Description System.Double Mesh The topography's mesh. Declaration [JsonIgnore] public Mesh Mesh { get; } Property Value Type Description Mesh MinElevation The minimum elevation of the topography. Declaration public double MinElevation { get; } Property Value Type Description System.Double Methods Tessellate(ref Mesh) Tessellate the topography. Declaration public void Tessellate(ref Mesh mesh) Parameters Type Name Description Mesh mesh The mesh into which the topography's facets will be added. Implements IElement IIdentifiable ITransformable IPropertySet ITessellate IMaterial"
  },
  "api/Elements.Geometry.Profiles.WideFlangeProfile.html": {
    "href": "api/Elements.Geometry.Profiles.WideFlangeProfile.html",
    "title": "Class WideFlangeProfile | Hypar Docs",
    "keywords": "Class WideFlangeProfile Inheritance System.Object Profile WideFlangeProfile Implements IIdentifiable Inherited Members Profile.Id Profile.Name Profile.Perimeter Profile.Voids Profile.Reversed() Profile.Area() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Geometry.Profiles Assembly : Hypar.Elements.dll Syntax public class WideFlangeProfile : Profile, IIdentifiable Constructors WideFlangeProfile(String) Declaration public WideFlangeProfile(string name) Parameters Type Name Description System.String name WideFlangeProfile(String, Double, Double, Double, Double, VerticalAlignment, HorizontalAlignment, Double, Double) Declaration public WideFlangeProfile(string name, double bf = 0.1, double d = 0.05, double tf = 0.005, double tw = 0.005, VerticalAlignment verticalAlignment = VerticalAlignment.Center, HorizontalAlignment horizontalAlignment = HorizontalAlignment.Center, double verticalOffset = 0, double horizontalOffset = 0) Parameters Type Name Description System.String name System.Double bf System.Double d System.Double tf System.Double tw VerticalAlignment verticalAlignment HorizontalAlignment horizontalAlignment System.Double verticalOffset System.Double horizontalOffset Properties A Declaration [JsonIgnore] public double A { get; } Property Value Type Description System.Double bf Declaration [JsonIgnore] public double bf { get; } Property Value Type Description System.Double Cw Declaration [JsonIgnore] public double Cw { get; } Property Value Type Description System.Double d Declaration [JsonIgnore] public double d { get; } Property Value Type Description System.Double dAf Declaration [JsonIgnore] public double dAf { get; } Property Value Type Description System.Double gage Declaration [JsonIgnore] public string gage { get; } Property Value Type Description System.String Ix Declaration [JsonIgnore] public double Ix { get; } Property Value Type Description System.Double Iy Declaration [JsonIgnore] public double Iy { get; } Property Value Type Description System.Double J Declaration [JsonIgnore] public double J { get; } Property Value Type Description System.Double k Declaration [JsonIgnore] public double k { get; } Property Value Type Description System.Double k1 Declaration [JsonIgnore] public double k1 { get; } Property Value Type Description System.Double Qf Declaration [JsonIgnore] public double Qf { get; } Property Value Type Description System.Double Qw Declaration [JsonIgnore] public double Qw { get; } Property Value Type Description System.Double rt Declaration [JsonIgnore] public double rt { get; } Property Value Type Description System.Double rx Declaration [JsonIgnore] public double rx { get; } Property Value Type Description System.Double ry Declaration [JsonIgnore] public double ry { get; } Property Value Type Description System.Double Sw Declaration [JsonIgnore] public double Sw { get; } Property Value Type Description System.Double Sx Declaration [JsonIgnore] public double Sx { get; } Property Value Type Description System.Double Sy Declaration [JsonIgnore] public double Sy { get; } Property Value Type Description System.Double T Declaration [JsonIgnore] public string T { get; } Property Value Type Description System.String tf Declaration [JsonIgnore] public double tf { get; } Property Value Type Description System.Double tw Declaration [JsonIgnore] public double tw { get; } Property Value Type Description System.Double Wno Declaration [JsonIgnore] public double Wno { get; } Property Value Type Description System.Double Zx Declaration [JsonIgnore] public double Zx { get; } Property Value Type Description System.Double Zy Declaration [JsonIgnore] public double Zy { get; } Property Value Type Description System.Double Implements IIdentifiable"
  },
  "api/Elements.Geometry.Solids.Loop.html": {
    "href": "api/Elements.Geometry.Solids.Loop.html",
    "title": "Class Loop | Hypar Docs",
    "keywords": "Class Loop A Loop of HalfEdges which bound a Face. Inheritance System.Object Loop Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Geometry.Solids Assembly : Hypar.Elements.dll Syntax public class Loop Constructors Loop() Construct a Loop. Declaration public Loop() Loop(HalfEdge[]) Construct a Loop from an array of HalfEdges. Declaration public Loop(HalfEdge[] edges) Parameters Type Name Description HalfEdge [] edges Properties Edges A collection of HalfEdges which comprise the Loop. Declaration public List<HalfEdge> Edges { get; } Property Value Type Description System.Collections.Generic.List < HalfEdge > Face The Face to which this Loop corresponds. Declaration public Face Face { get; set; } Property Value Type Description Face Methods AddEdgeToEnd(HalfEdge) Add a HalfEdge to the end of the Loop. Declaration public void AddEdgeToEnd(HalfEdge he) Parameters Type Name Description HalfEdge he AddEdgeToStart(HalfEdge) Add a HalfEdge ot the start of the Loop. Declaration public void AddEdgeToStart(HalfEdge he) Parameters Type Name Description HalfEdge he InsertEdgeAfter(HalfEdge, HalfEdge) Insert the provided half edge after the target half edge. Declaration public void InsertEdgeAfter(HalfEdge target, HalfEdge newEdge) Parameters Type Name Description HalfEdge target The half after which the new edge will be inserted. HalfEdge newEdge The half edge to be inserted. InsertEdgeBefore(HalfEdge, HalfEdge) Insert the provided half edge before the target half edge. Declaration public void InsertEdgeBefore(HalfEdge target, HalfEdge newEdge) Parameters Type Name Description HalfEdge target The half before which the new edge will be inserted. HalfEdge newEdge The half edge to be inserted."
  },
  "api/Elements.Geometry.Line.html": {
    "href": "api/Elements.Geometry.Line.html",
    "title": "Class Line | Hypar Docs",
    "keywords": "Class Line A linear curve between two points. Inheritance System.Object Line Implements ICurve Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Line : ICurve Constructors Line(Vector3, Vector3) Construct a line from start and end points. Declaration [JsonConstructor] public Line(Vector3 start, Vector3 end) Parameters Type Name Description Vector3 start The start of the line. Vector3 end The end of the line. Exceptions Type Condition System.ArgumentException Thrown when the start and end points are the same. Line(Vector3, Vector3, Double) Construct a line of length from a start along direction. Declaration public Line(Vector3 start, Vector3 direction, double length) Parameters Type Name Description Vector3 start Vector3 direction System.Double length Properties End The end of the line. Declaration public Vector3 End { get; } Property Value Type Description Vector3 Start The start of the line. Declaration public Vector3 Start { get; } Property Value Type Description Vector3 Type The type of the curve. Used during deserialization to disambiguate derived types. Declaration [JsonProperty(Order = -100)] public string Type { get; } Property Value Type Description System.String Methods Bounds() Get the bounding box for this line. Declaration public BBox3 Bounds() Returns Type Description BBox3 A bounding box for this line. Direction() A normalized vector representing the direction of the line. Declaration public Vector3 Direction() Returns Type Description Vector3 Equals(Object) Does this line equal the provided line? Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The target line. Returns Type Description System.Boolean True if the start and end points of the lines are equal, otherwise false. Overrides System.Object.Equals(System.Object) Frames(Double, Double) Get a collection of transforms which represent frames along this line. Declaration public Transform[] Frames(double startSetback, double endSetback) Parameters Type Name Description System.Double startSetback The offset from the start of the line. System.Double endSetback The offset from the end of the line. Returns Type Description Transform [] A collection of transforms. GetHashCode() Get the hash code for the line. Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Intersect(Plane) Intersect this line with the specified plane Declaration public Vector3 Intersect(Plane p) Parameters Type Name Description Plane p The plane. Returns Type Description Vector3 The point of intersection or null if no intersection occurs. Length() Calculate the length of the line. Declaration public double Length() Returns Type Description System.Double PointAt(Double) Get a point along the line at parameter u. Declaration public Vector3 PointAt(double u) Parameters Type Name Description System.Double u Returns Type Description Vector3 A point on the curve at parameter u. Reversed() Get a new line that is the reverse of the original line. Declaration public ICurve Reversed() Returns Type Description ICurve Thicken(Double) Thicken a line by the specified amount. Declaration public Polygon Thicken(double amount) Parameters Type Name Description System.Double amount The amount to thicken the line. Returns Type Description Polygon TransformAt(Double) Get a transform whose XY plane is perpendicular to the curve, and whose positive Z axis points along the curve. Declaration public Transform TransformAt(double u) Parameters Type Name Description System.Double u The parameter along the Line, between 0.0 and 1.0, at which to calculate the Transform. Returns Type Description Transform A transform. Implements ICurve"
  },
  "api/Elements.Serialization.JSON.IProfileConverter.html": {
    "href": "api/Elements.Serialization.JSON.IProfileConverter.html",
    "title": "Class IProfileConverter | Hypar Docs",
    "keywords": "Class IProfileConverter Inheritance System.Object Newtonsoft.Json.JsonConverter IProfileConverter Inherited Members Newtonsoft.Json.JsonConverter.CanRead System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Serialization.JSON Assembly : Hypar.Elements.dll Syntax public class IProfileConverter : JsonConverter Properties CanWrite Declaration public override bool CanWrite { get; } Property Value Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanWrite Methods CanConvert(Type) Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType Returns Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanConvert(System.Type) ReadJson(JsonReader, Type, Object, JsonSerializer) Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader System.Type objectType System.Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description System.Object Overrides Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) WriteJson(JsonWriter, Object, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer System.Object value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)"
  },
  "api/Elements.Mass.html": {
    "href": "api/Elements.Mass.html",
    "title": "Class Mass | Hypar Docs",
    "keywords": "Class Mass An extruded volume. var scene = new THREE.Scene(); var div = document.getElementById(\"model\") var camera = new THREE.PerspectiveCamera( 75, div.clientWidth/div.clientHeight, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true }); renderer.setSize( div.clientWidth, div.clientHeight ); renderer.setClearColor( 0x000000, 0 ); div.appendChild( renderer.domElement ); var controls = new THREE.OrbitControls( camera, renderer.domElement ); var light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 ); scene.add( light ); var axesHelper = new THREE.AxesHelper( 2 ); scene.add( axesHelper ); var size = 100; var divisions = 100; var colorCenterLine = new THREE.Color( 0xa0a0a0 ); var colorGrid = new THREE.Color( 0xdbdbdb ); var gridHelper = new THREE.GridHelper( size, divisions, colorCenterLine, colorGrid); scene.add( gridHelper ); window.addEventListener( 'resize', onWindowResize, false ); camera.position.z = 5; // Instantiate a loader var loader = new THREE.GLTFLoader(); // Load a glTF resource loader.load( // resource URL '../models/Elements_Mass.glb', // called when the resource is loaded function ( gltf ) { scene.add( gltf.scene ); gltf.animations; // Array<THREE.AnimationClip> gltf.scene; // THREE.Scene gltf.scenes; // Array<THREE.Scene> gltf.cameras; // Array<THREE.Camera> gltf.asset; // Object fitCameraToObject(gltf.scene, 2.0, controls) }, // called while loading is progressing function ( xhr ) { console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' ); }, // called when loading has errors function ( error ) { console.log( 'An error happened' ); } ); var animate = function () { requestAnimationFrame( animate ); // cube.rotation.x += 0.01; // cube.rotation.y += 0.01; renderer.render( scene, camera ); }; function onWindowResize(){ var div = document.getElementById(\"model\"); camera.aspect = div.clientWidth / div.clientHeight; camera.updateProjectionMatrix(); renderer.setSize( div.clientWidth, div.clientHeight ); }; const fitCameraToObject = function ( object, offset, orbitControls ) { const boundingBox = new THREE.Box3(); boundingBox.setFromObject( object ); const center = boundingBox.getCenter(); const size = boundingBox.getSize(); // get the max side of the bounding box const maxDim = Math.max( size.x, size.y, size.z ) * 3; const fov = this.camera.fov * ( Math.PI / 180 ); let cameraZ = Math.abs( maxDim / 4 * Math.tan( fov * 2 ) ); // offset the camera as desired - usually a value of ~ 1.25 is good to prevent // object filling the whole canvas if( offset !== undefined && offset !== 0 ) cameraZ *= offset; camera.position.set( center.x, center.y, cameraZ ); // set the far plane of the camera so that it easily encompasses the whole object const minZ = boundingBox.min.z; const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ; this.camera.far = cameraToFarEdge * 3; this.camera.updateProjectionMatrix(); if ( orbitControls !== undefined ) { // set camera to rotate around center of loaded object orbitControls.target = center; // prevent camera from zooming out far enough to create far plane cutoff orbitControls.maxDistance = cameraToFarEdge * 2; } }; animate(); Examples var a = new Vector3(); var b = new Vector3(30, 10); var c = new Vector3(20, 50); var d = new Vector3(-10, 5); var poly = new Polygon(new[] { a, b, c, d }); // Create a mass. var mass = new Mass(poly, 5.0); Inheritance System.Object Element Mass Implements IElement IIdentifiable ITransformable IPropertySet IExtrude IProfile ISolid IMaterial Inherited Members Element.Id Element.Type Element.Properties Element.Transform Element.Name Element.AddProperty(String, IProperty) Element.RemoveProperty(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Mass : Element, IElement, IIdentifiable, ITransformable, IPropertySet, IExtrude, IProfile, ISolid, IMaterial Constructors Mass(Polygon, Double, Material, Transform) Construct a Mass. Declaration public Mass(Polygon profile, double height = 1, Material material = null, Transform transform = null) Parameters Type Name Description Polygon profile The profile of the mass. System.Double height The height of the mass from the bottom elevation. Material material The mass' material. The default is the built in mass material. Transform transform The mass's transform. Mass(Profile, Double, Material, Transform) Construct a Mass. Declaration [JsonConstructor] public Mass(Profile profile, double height = 1, Material material = null, Transform transform = null) Parameters Type Name Description Profile profile The profile of the mass. System.Double height The height of the mass from the bottom elevation. Material material The mass' material. The default is the built in mass material. Transform transform The mass' transform. Properties BothSides Should the mass extrude to both sides of the profile? Declaration public bool BothSides { get; } Property Value Type Description System.Boolean ExtrudeDepth The depth of the mass' extrusion. Declaration public double ExtrudeDepth { get; } Property Value Type Description System.Double ExtrudeDirection The direction of the mass's extrusion. Declaration public Vector3 ExtrudeDirection { get; } Property Value Type Description Vector3 Geometry The mass' geometry. Declaration public Solid Geometry { get; } Property Value Type Description Solid Height The height of the mass. Declaration public double Height { get; } Property Value Type Description System.Double Material The mass' material. Declaration public Material Material { get; } Property Value Type Description Material Profile The Profile of the mass. Declaration public Profile Profile { get; } Property Value Type Description Profile Thickness The thickness of the mass' extrusion. Declaration [JsonIgnore] public double Thickness { get; } Property Value Type Description System.Double Methods GetUpdatedSolid() Get the updated solid representation of the Mass. Declaration public Solid GetUpdatedSolid() Returns Type Description Solid ProfileTransformed() Get the profile of the mass transformed by the mass' transform. Declaration public Profile ProfileTransformed() Returns Type Description Profile Volume() The volume of the mass. Declaration public double Volume() Returns Type Description System.Double Implements IElement IIdentifiable ITransformable IPropertySet IExtrude IProfile ISolid IMaterial"
  },
  "api/Elements.Interfaces.html": {
    "href": "api/Elements.Interfaces.html",
    "title": "Namespace Elements.Interfaces | Hypar Docs",
    "keywords": "Namespace Elements.Interfaces Interfaces IAggregateElements IElement IElementType<TElementType> Interface implemented by classes which provide and ElementType. IHasOpenings Has a collection of opening. IIdentifiable The interface for all elements which can be identified with a unique identifier. ILayeredMaterial A layered material. IMaterial A material. IProperty IPropertySet IPropertySingleValue<TValue>"
  },
  "api/Elements.Geometry.Vector3Extensions.html": {
    "href": "api/Elements.Geometry.Vector3Extensions.html",
    "title": "Class Vector3Extensions | Hypar Docs",
    "keywords": "Class Vector3Extensions Extension methods for Vector3. Inheritance System.Object Vector3Extensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public static class Vector3Extensions Methods AreCoplanar(IList<Vector3>) Are the provided points on the same plane? Declaration public static bool AreCoplanar(this IList<Vector3> points) Parameters Type Name Description System.Collections.Generic.IList < Vector3 > points Returns Type Description System.Boolean Average(IList<Vector3>) Find the average of a collection of Vector3. Declaration public static Vector3 Average(this IList<Vector3> points) Parameters Type Name Description System.Collections.Generic.IList < Vector3 > points The Vector3 collection to average. Returns Type Description Vector3 A Vector3 representing the average. Shrink(Vector3[], Double) Shrink a collection of Vector3 towards their average. Declaration public static Vector3[] Shrink(this Vector3[] points, double distance) Parameters Type Name Description Vector3 [] points The collection of Vector3 to shrink. System.Double distance The distance to shrink along the vector to average. Returns Type Description Vector3 [] ToArray(IList<Vector3>) Convert a collection of Vector3 to a flat array of double. Declaration public static double[] ToArray(this IList<Vector3> points) Parameters Type Name Description System.Collections.Generic.IList < Vector3 > points The collection of Vector3 to convert. Returns Type Description System.Double [] An array containing x,y,z,x1,y1,z1,x2,y2,z2,..."
  },
  "api/Elements.Interfaces.IAggregateElements.html": {
    "href": "api/Elements.Interfaces.IAggregateElements.html",
    "title": "Interface IAggregateElements | Hypar Docs",
    "keywords": "Interface IAggregateElements Namespace : Elements.Interfaces Assembly : Hypar.Elements.dll Syntax public interface IAggregateElements Properties Elements Declaration List<Element> Elements { get; } Property Value Type Description System.Collections.Generic.List < Element >"
  },
  "api/Elements.Geometry.Solids.Face.html": {
    "href": "api/Elements.Geometry.Solids.Face.html",
    "title": "Class Face | Hypar Docs",
    "keywords": "Class Face A Solid Face. Inheritance System.Object Face Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Elements.Geometry.Solids Assembly : Hypar.Elements.dll Syntax public class Face Properties Id The Id of the Face. Declaration public long Id { get; } Property Value Type Description System.Int64 Inner A collection of CW wound Edges. Declaration public Loop[] Inner { get; } Property Value Type Description Loop [] Outer A CCW wound list of Edges. Declaration public Loop Outer { get; } Property Value Type Description Loop Methods ToString() The string representation of the Face. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Elements.Geometry.Profiles.HSSPipeProfile.html": {
    "href": "api/Elements.Geometry.Profiles.HSSPipeProfile.html",
    "title": "Class HSSPipeProfile | Hypar Docs",
    "keywords": "Class HSSPipeProfile Inheritance System.Object Profile HSSPipeProfile Implements IIdentifiable Inherited Members Profile.Id Profile.Name Profile.Perimeter Profile.Voids Profile.Reversed() Profile.Area() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Geometry.Profiles Assembly : Hypar.Elements.dll Syntax public class HSSPipeProfile : Profile, IIdentifiable Constructors HSSPipeProfile(String, Double, Double, Double) Declaration public HSSPipeProfile(string name, double outerDiam, double innerDiam, double t) Parameters Type Name Description System.String name System.Double outerDiam System.Double innerDiam System.Double t Properties A Declaration public double A { get; } Property Value Type Description System.Double I Declaration public double I { get; } Property Value Type Description System.Double InnerDiam Declaration public double InnerDiam { get; } Property Value Type Description System.Double J Declaration public double J { get; } Property Value Type Description System.Double OuterDiam Declaration public double OuterDiam { get; } Property Value Type Description System.Double r Declaration public double r { get; } Property Value Type Description System.Double S Declaration public double S { get; } Property Value Type Description System.Double t Declaration public double t { get; } Property Value Type Description System.Double wt Declaration public double wt { get; } Property Value Type Description System.Double Implements IIdentifiable"
  },
  "api/Elements.GeoJSON.MultiPolygon.html": {
    "href": "api/Elements.GeoJSON.MultiPolygon.html",
    "title": "Class MultiPolygon | Hypar Docs",
    "keywords": "Class MultiPolygon A GeoJSON multi polygon. Inheritance System.Object Geometry MultiPolygon Inherited Members Geometry.Type System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax public class MultiPolygon : Geometry Constructors MultiPolygon(Position[][]) Construct a MultiPolygon. Declaration public MultiPolygon(Position[][] coordinates) Parameters Type Name Description Position [][] coordinates Properties Coordinates The coordinates of the geometry. Declaration public Position[][] Coordinates { get; } Property Value Type Description Position [][]"
  },
  "api/Elements.Serialization.JSON.ProfileToIdConverter.html": {
    "href": "api/Elements.Serialization.JSON.ProfileToIdConverter.html",
    "title": "Class ProfileToIdConverter | Hypar Docs",
    "keywords": "Class ProfileToIdConverter Inheritance System.Object Newtonsoft.Json.JsonConverter ProfileToIdConverter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Serialization.JSON Assembly : Hypar.Elements.dll Syntax public class ProfileToIdConverter : JsonConverter Constructors ProfileToIdConverter(Dictionary<Guid, Profile>) Declaration public ProfileToIdConverter(Dictionary<Guid, Profile> profiles) Parameters Type Name Description System.Collections.Generic.Dictionary < System.Guid , Profile > profiles Properties CanRead Declaration public override bool CanRead { get; } Property Value Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanRead CanWrite Declaration public override bool CanWrite { get; } Property Value Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanWrite Methods CanConvert(Type) Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType Returns Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanConvert(System.Type) ReadJson(JsonReader, Type, Object, JsonSerializer) Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader System.Type objectType System.Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description System.Object Overrides Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) WriteJson(JsonWriter, Object, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer System.Object value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)"
  },
  "api/Elements.Serialization.JSON.PolygonConverter.html": {
    "href": "api/Elements.Serialization.JSON.PolygonConverter.html",
    "title": "Class PolygonConverter | Hypar Docs",
    "keywords": "Class PolygonConverter Inheritance System.Object Newtonsoft.Json.JsonConverter PolygonConverter Inherited Members Newtonsoft.Json.JsonConverter.CanWrite System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Serialization.JSON Assembly : Hypar.Elements.dll Syntax public class PolygonConverter : JsonConverter Properties CanRead Declaration public override bool CanRead { get; } Property Value Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanRead Methods CanConvert(Type) Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType Returns Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanConvert(System.Type) ReadJson(JsonReader, Type, Object, JsonSerializer) Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader System.Type objectType System.Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description System.Object Overrides Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) WriteJson(JsonWriter, Object, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer System.Object value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)"
  },
  "api/Elements.Geometry.Profiles.ProfileServer.html": {
    "href": "api/Elements.Geometry.Profiles.ProfileServer.html",
    "title": "Class ProfileServer | Hypar Docs",
    "keywords": "Class ProfileServer Base class for types which serve Profiles. Inheritance System.Object ProfileServer HSSPipeProfileServer WideFlangeProfileServer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Geometry.Profiles Assembly : Hypar.Elements.dll Syntax public abstract class ProfileServer Fields _profiles The map of Profiles. Declaration protected Dictionary<string, Profile> _profiles Field Value Type Description System.Collections.Generic.Dictionary < System.String , Profile > InchesToMeters A conversion factor from inches to meters. Declaration protected const double InchesToMeters = 0.0254 Field Value Type Description System.Double Methods AllProfiles() Get all Profiles available in the WideFlangeProfileServer. Declaration public IEnumerable<Profile> AllProfiles() Returns Type Description System.Collections.Generic.IEnumerable < Profile > GetProfileByName(String) Get a profile by name from the server. Declaration public Profile GetProfileByName(string name) Parameters Type Name Description System.String name Returns Type Description Profile A Profile. Throws an exception if a profile with the specified name cannot be found. Exceptions Type Condition System.Exception Thrown when a Profile with the specfied name cannot be found."
  },
  "api/Elements.Geometry.Plane.html": {
    "href": "api/Elements.Geometry.Plane.html",
    "title": "Class Plane | Hypar Docs",
    "keywords": "Class Plane A cartesian plane. Inheritance System.Object Plane Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Plane Constructors Plane(Vector3, Vector3) Construct a plane. Declaration [JsonConstructor] public Plane(Vector3 origin, Vector3 normal) Parameters Type Name Description Vector3 origin The origin of the plane. Vector3 normal The normal of the plane. Plane(Vector3, Vector3, Vector3) Construct a plane by three points. The plane is constructed as a->b * b->c. Declaration public Plane(Vector3 a, Vector3 b, Vector3 c) Parameters Type Name Description Vector3 a Vector3 b Vector3 c Exceptions Type Condition System.ArgumentNullException Thrown when any of a, b, or c are null. Plane(Vector3, IList<Vector3>) Construct a plane. Only the first three points of the points array will be used. Declaration public Plane(Vector3 origin, IList<Vector3> points) Parameters Type Name Description Vector3 origin The origin of the plane. System.Collections.Generic.IList < Vector3 > points An array of vectors to be used to determine the normal of the plane. Exceptions Type Condition System.ArgumentException Thrown when less than three points are provided. System.ArgumentException Thrown when coincident points are provided. Properties Normal The normal of the plane. Declaration public Vector3 Normal { get; } Property Value Type Description Vector3 Origin The origin of the plane. Declaration public Vector3 Origin { get; } Property Value Type Description Vector3"
  },
  "api/Elements.Brace.html": {
    "href": "api/Elements.Brace.html",
    "title": "Class Brace | Hypar Docs",
    "keywords": "Class Brace A Brace is a structural framing element which is often diagonal. Inheritance System.Object Element StructuralFraming Brace Implements IElement IIdentifiable ITransformable IPropertySet IElementType < StructuralFramingType > ISweepAlongCurve IProfile ISolid Inherited Members StructuralFraming.Curve StructuralFraming.StartSetback StructuralFraming.EndSetback StructuralFraming.ElementType StructuralFraming.Profile StructuralFraming.Volume() StructuralFraming.ProfileTransformed() StructuralFraming.GetUpdatedSolid() Element.Id Element.Type Element.Properties Element.Transform Element.Name Element.AddProperty(String, IProperty) Element.RemoveProperty(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Brace : StructuralFraming, IElement, IIdentifiable, ITransformable, IPropertySet, IElementType<StructuralFramingType>, ISweepAlongCurve, IProfile, ISolid Constructors Brace(ICurve, StructuralFramingType, Double, Double) Construct a Brace. Declaration public Brace(ICurve curve, StructuralFramingType elementType, double startSetback = 0, double endSetback = 0) Parameters Type Name Description ICurve curve The brace's center line. StructuralFramingType elementType The structural framing type of the brace. System.Double startSetback The setback of the brace's geometry at the start. System.Double endSetback The setback of the brace's geometry at the end. Implements IElement IIdentifiable ITransformable IPropertySet IElementType<TElementType> ISweepAlongCurve IProfile ISolid"
  },
  "api/Elements.Serialization.glTF.html": {
    "href": "api/Elements.Serialization.glTF.html",
    "title": "Namespace Elements.Serialization.glTF | Hypar Docs",
    "keywords": "Namespace Elements.Serialization.glTF Classes GltfExtensions Extensions for glTF serialization."
  },
  "api/Elements.GeoJSON.Position.html": {
    "href": "api/Elements.GeoJSON.Position.html",
    "title": "Class Position | Hypar Docs",
    "keywords": "Class Position A GeoJSON position specified by longitude and latitude. Inheritance System.Object Position Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax [JsonConverter(typeof(PositionConverter))] public class Position Constructors Position(Double, Double) Construct a Position. Declaration public Position(double lon, double lat) Parameters Type Name Description System.Double lon System.Double lat Properties Latitude The latitude in decimal degrees. Declaration public double Latitude { get; } Property Value Type Description System.Double Longitude The longitude in decimal degrees. Declaration public double Longitude { get; } Property Value Type Description System.Double Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() ToVectorMeters() Convert the position to a vector. Declaration public Vector3 ToVectorMeters() Returns Type Description Vector3"
  },
  "api/Elements.Opening.html": {
    "href": "api/Elements.Opening.html",
    "title": "Class Opening | Hypar Docs",
    "keywords": "Class Opening A rectangular opening in a wall or floor. Inheritance System.Object Element Opening Implements IElement IIdentifiable ITransformable IPropertySet IExtrude IProfile ISolid Inherited Members Element.Id Element.Type Element.Properties Element.Transform Element.Name Element.AddProperty(String, IProperty) Element.RemoveProperty(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Opening : Element, IElement, IIdentifiable, ITransformable, IPropertySet, IExtrude, IProfile, ISolid Constructors Opening(Polygon, Double, Transform) Create an opening. Declaration public Opening(Polygon profile, double depth, Transform transform = null) Parameters Type Name Description Polygon profile A polygon representing the profile of the opening. System.Double depth The depth of the opening's extrusion. Transform transform An additional transform applied to the opening. Opening(Polygon, Double, Double, Double) Create a polygonal opening. Declaration public Opening(Polygon profile, double x = 0, double y = 0, double depth = 5) Parameters Type Name Description Polygon profile A polygon representing the profile of the opening. System.Double x The distance along the X axis of the transform of the host element to transform the profile. System.Double y The distance along the Y axis of the transform of the host element to transform the profile. System.Double depth The depth of the opening's extrusion. Opening(Double, Double, Double, Double, Double) Create a rectangular opening. Declaration public Opening(double x, double y, double width, double height, double depth = 5) Parameters Type Name Description System.Double x The distance along the X axis of the transform of the host element to the center of the opening. System.Double y The distance along the Y axis of the transform of the host element to the center of the opening. System.Double width The width of the opening. System.Double height The height of the opening. System.Double depth The depth of the opening's extrusion. Properties BothSides Extrude to both sides? Declaration public bool BothSides { get; } Property Value Type Description System.Boolean ExtrudeDepth The depth of the opening's extrusion. Declaration public double ExtrudeDepth { get; } Property Value Type Description System.Double ExtrudeDirection The extrude direction of the opening. Declaration public Vector3 ExtrudeDirection { get; } Property Value Type Description Vector3 Profile The perimeter of the opening. Declaration public Profile Profile { get; } Property Value Type Description Profile A polygon of Width and Height translated by X and Y. Methods GetUpdatedSolid() Get the updated solid representation of the opening. Declaration public Solid GetUpdatedSolid() Returns Type Description Solid Implements IElement IIdentifiable ITransformable IPropertySet IExtrude IProfile ISolid"
  },
  "api/Elements.Interfaces.IHasOpenings.html": {
    "href": "api/Elements.Interfaces.IHasOpenings.html",
    "title": "Interface IHasOpenings | Hypar Docs",
    "keywords": "Interface IHasOpenings Has a collection of opening. Namespace : Elements.Interfaces Assembly : Hypar.Elements.dll Syntax public interface IHasOpenings Properties Openings A collection of openings which are transformed in the coordinate system of their host element. Declaration List<Opening> Openings { get; } Property Value Type Description System.Collections.Generic.List < Opening >"
  },
  "api/Elements.Interfaces.IElementType-1.html": {
    "href": "api/Elements.Interfaces.IElementType-1.html",
    "title": "Interface IElementType<TElementType> | Hypar Docs",
    "keywords": "Interface IElementType<TElementType> Interface implemented by classes which provide and ElementType. Namespace : Elements.Interfaces Assembly : Hypar.Elements.dll Syntax public interface IElementType<TElementType> Type Parameters Name Description TElementType Properties ElementType The ElementType provided by this instance. Declaration TElementType ElementType { get; } Property Value Type Description TElementType"
  },
  "api/Elements.Geometry.Solids.Vertex.html": {
    "href": "api/Elements.Geometry.Solids.Vertex.html",
    "title": "Class Vertex | Hypar Docs",
    "keywords": "Class Vertex A Solid Vertex. Inheritance System.Object Vertex Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Elements.Geometry.Solids Assembly : Hypar.Elements.dll Syntax public class Vertex Properties HalfEdge The HalfEdge which has this Vertex as its start. Declaration public HalfEdge HalfEdge { get; set; } Property Value Type Description HalfEdge Id The Id of the Vertex. Declaration public long Id { get; } Property Value Type Description System.Int64 Point The location of the Vertex. Declaration public Vector3 Point { get; } Property Value Type Description Vector3 Methods ToString() Get the string representation of the Vertex. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Elements.NumericProperty.html": {
    "href": "api/Elements.NumericProperty.html",
    "title": "Class NumericProperty | Hypar Docs",
    "keywords": "Class NumericProperty A property with a numeric value. Inheritance System.Object NumericProperty Implements IPropertySingleValue < System.Double > IProperty Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class NumericProperty : IPropertySingleValue<double>, IProperty Constructors NumericProperty(Double, UnitType, String) Construct a Property. Declaration [JsonConstructor] public NumericProperty(double value, UnitType unitType, string description = null) Parameters Type Name Description System.Double value The value of the Property. UnitType unitType The unit type of the Property. System.String description The description of the Property. Properties Description The description of the Property. Declaration public string Description { get; } Property Value Type Description System.String UnitType The UnitType of the Property. Declaration [JsonConverter(typeof(StringEnumConverter))] public UnitType UnitType { get; } Property Value Type Description UnitType Value The value of the Property. Declaration public double Value { get; } Property Value Type Description System.Double Implements IPropertySingleValue<TValue> IProperty"
  },
  "api/Elements.Model.html": {
    "href": "api/Elements.Model.html",
    "title": "Class Model | Hypar Docs",
    "keywords": "Class Model A container for elements, element types, materials, and profiles. Inheritance System.Object Model Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Model Constructors Model() Construct an empty model. Declaration public Model() Properties Elements All elements in the Model. Declaration public Dictionary<Guid, Element> Elements { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.Guid , Element > ElementTypes All element types in the Model. Declaration public Dictionary<Guid, ElementType> ElementTypes { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.Guid , ElementType > Extensions A collection of extension identifiers which representing extensions which must be available at the time of serialization or deserialization. Declaration public IEnumerable<string> Extensions { get; } Property Value Type Description System.Collections.Generic.IEnumerable < System.String > Materials All Materials in the Model. Declaration public Dictionary<Guid, Material> Materials { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.Guid , Material > Origin The origin of the model. Declaration public Position Origin { get; set; } Property Value Type Description Position Profiles All profiles in the model. Declaration public Dictionary<Guid, Profile> Profiles { get; } Property Value Type Description System.Collections.Generic.Dictionary < System.Guid , Profile > Version The version of the assembly. Declaration public string Version { get; } Property Value Type Description System.String Methods AddElement(Element) Add an element to the model. Declaration public void AddElement(Element element) Parameters Type Name Description Element element The element to add to the model. Exceptions Type Condition System.ArgumentException Thrown when an element with the same Id already exists in the model. AddElements(IEnumerable<Element>) Add a collection of elements to the model. Declaration public void AddElements(IEnumerable<Element> elements) Parameters Type Name Description System.Collections.Generic.IEnumerable < Element > elements The elements to add to the model. ElementsOfType<T>() Get all elements of the specified Type. Declaration public IEnumerable<T> ElementsOfType<T>() Returns Type Description System.Collections.Generic.IEnumerable <T> A collection of elements of the specified type. Type Parameters Name Description T The Type of element to return. FromIFC(String, String[]) Create a model from IFC. Declaration public static Model FromIFC(string path, string[] idsToConvert = null) Parameters Type Name Description System.String path The path to the IFC STEP file. System.String [] idsToConvert An optional array of string identifiers of IFC entities to convert. Returns Type Description Model A model. FromJson(String) Create a model from JSON. Declaration public static Model FromJson(string json) Parameters Type Name Description System.String json The JSON. Returns Type Description Model A model. GetElementById(Guid) Get an element by id from the Model. Declaration public Element GetElementById(Guid id) Parameters Type Name Description System.Guid id The identifier of the element. Returns Type Description Element An element or null if no element can be found with the provided id. GetElementByName(String) Get the first element with the specified name. Declaration public Element GetElementByName(string name) Parameters Type Name Description System.String name Returns Type Description Element An element or null if no element can be found with the provided name. GetElementTypeByName(String) Get an element type by name. Declaration public ElementType GetElementTypeByName(string name) Parameters Type Name Description System.String name The name of the element type. Returns Type Description ElementType An element type or null if no element type with the specified name can be found. GetMaterialByName(String) Get a Material by name. Declaration public Material GetMaterialByName(string name) Parameters Type Name Description System.String name The name of the Material. Returns Type Description Material A Material or null if no Material with the specified id can be found. GetProfileByName(String) Get a Profile by name. Declaration public Profile GetProfileByName(string name) Parameters Type Name Description System.String name The name of the Profile. Returns Type Description Profile A Profile or null if no Profile with the specified name can be found. UpdateElement(Element) Update an element existing in the model. Declaration public void UpdateElement(Element element) Parameters Type Name Description Element element The element to update in the model. Exceptions Type Condition System.ArgumentException Thrown when no element with the same Id exists in the model. UpdateElements(IEnumerable<Element>) Update a collection of elements in the model. Declaration public void UpdateElements(IEnumerable<Element> elements) Parameters Type Name Description System.Collections.Generic.IEnumerable < Element > elements The elements to be updated in the model. Extension Methods GltfExtensions.ToGlTF(Model, String, Boolean) GltfExtensions.ToBase64String(Model) IFCExtensions.ToIFC(Model, String) JsonExtensions.ToJson(Model, Boolean)"
  },
  "api/Elements.Material.html": {
    "href": "api/Elements.Material.html",
    "title": "Class Material | Hypar Docs",
    "keywords": "Class Material A material with red, green, blue, alpha, and metallic factor components. Inheritance System.Object Material Implements IIdentifiable Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Material : IIdentifiable Constructors Material(Guid, String, Color, Single, Single, Boolean) Construct a material. Declaration [JsonConstructor] public Material(Guid id, string name, Color color, float specularFactor = 0.1F, float glossinessFactor = 0.1F, bool doubleSided = false) Parameters Type Name Description System.Guid id The unique identifier of the material. System.String name The identifier of the material. Identifiers should be unique within a model. Color color The RGBA color of the material. System.Single specularFactor The specular component of the color. Between 0.0 and 1.0. System.Single glossinessFactor The glossiness component of the color. Between 0.0 and 1.0. System.Boolean doubleSided Is the material double sided? Exceptions Type Condition System.ArgumentOutOfRangeException Thrown when the specular or glossiness value is less than 0.0. System.ArgumentOutOfRangeException Thrown when the specular or glossiness value is greater than 1.0. Material(String) Construct a material. Declaration public Material(string name) Parameters Type Name Description System.String name Material(String, Color, Single, Single, Boolean) Construct a material. Declaration public Material(string name, Color color, float specularFactor = 0.1F, float glossinessFactor = 0.1F, bool doubleSided = false) Parameters Type Name Description System.String name The identifier of the material. Identifiers should be unique within a model. Color color The RGBA color of the material. System.Single specularFactor The specular component of the color. Between 0.0 and 1.0. System.Single glossinessFactor The glossiness component of the color. Between 0.0 and 1.0. System.Boolean doubleSided Is the material double sided? Exceptions Type Condition System.ArgumentOutOfRangeException Thrown when the specular or glossiness value is less than 0.0. System.ArgumentOutOfRangeException Thrown when the specular or glossiness value is greater than 1.0. Properties Color The RGBA color of the material. Declaration public Color Color { get; } Property Value Type Description Color DoubleSided Is the material double sided? Declaration public bool DoubleSided { get; } Property Value Type Description System.Boolean GlossinessFactor The glossiness factor. Declaration public float GlossinessFactor { get; } Property Value Type Description System.Single Id The unique identifier of the material. Declaration public Guid Id { get; } Property Value Type Description System.Guid Name The name of the material. Declaration public string Name { get; } Property Value Type Description System.String SpecularFactor The specular factor. Declaration public float SpecularFactor { get; } Property Value Type Description System.Single Methods Equals(Object) Is this material equal to the provided material? Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) GetHashCode() Get the hash code for the material. Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Implements IIdentifiable"
  },
  "api/Elements.Geometry.Vertex.html": {
    "href": "api/Elements.Geometry.Vertex.html",
    "title": "Class Vertex | Hypar Docs",
    "keywords": "Class Vertex A mesh vertex. Inheritance System.Object Vertex Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Vertex Constructors Vertex(Vector3, Vector3, Color) Create a vertex. Declaration public Vertex(Vector3 position, Vector3 normal = null, Color color = null) Parameters Type Name Description Vector3 position The position of the vertex. Vector3 normal The vertex's normal. Color color The vertex's color. Properties Color The vertex's color. Declaration public Color Color { get; } Property Value Type Description Color Index The index of the vertex within a mesh. Declaration public int Index { get; } Property Value Type Description System.Int32 Normal The vertex's normal. Declaration [JsonIgnore] public Vector3 Normal { get; } Property Value Type Description Vector3 Position The position of the vertex. Declaration public Vector3 Position { get; } Property Value Type Description Vector3"
  },
  "api/Elements.Geometry.Solids.html": {
    "href": "api/Elements.Geometry.Solids.html",
    "title": "Namespace Elements.Geometry.Solids | Hypar Docs",
    "keywords": "Namespace Elements.Geometry.Solids Classes Edge A Solid Edge. Face A Solid Face. HalfEdge One half of the directional components of an Edge. Loop A Loop of HalfEdges which bound a Face. Solid A boundary representation of a solid. Vertex A Solid Vertex."
  },
  "api/Elements.GeoJSON.MercatorProjection.html": {
    "href": "api/Elements.GeoJSON.MercatorProjection.html",
    "title": "Class MercatorProjection | Hypar Docs",
    "keywords": "Class MercatorProjection Methods for computing geographic coordinates using the Mercator projection. Inheritance System.Object MercatorProjection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax public static class MercatorProjection Methods latToY(Double) Get the y coordinate, in meters, of the specified latitude. Declaration public static double latToY(double lat) Parameters Type Name Description System.Double lat Returns Type Description System.Double lonToX(Double) Get the x coordinate, in meters, of the specified longitude. Declaration public static double lonToX(double lon) Parameters Type Name Description System.Double lon Returns Type Description System.Double toGeoCoord(Double, Double) Get the latitude and longitude of the specified x and y coordinates. Declaration public static double[] toGeoCoord(double x, double y) Parameters Type Name Description System.Double x System.Double y Returns Type Description System.Double [] An array of doubles containing the longitude and latitude in degrees. toPixel(Double, Double) Get the coordinates of the longitude and latitude. Declaration public static double[] toPixel(double lon, double lat) Parameters Type Name Description System.Double lon System.Double lat Returns Type Description System.Double [] An array of doubles containing the x, and y coordintes, in meters. xToLon(Double) Get the longitude of the specified x coordinate. Declaration public static double xToLon(double x) Parameters Type Name Description System.Double x The x coordinate. Returns Type Description System.Double The longitude in degrees. yToLat(Double) Get the latitude of the specified y coordinate. Declaration public static double yToLat(double y) Parameters Type Name Description System.Double y The y coordinate. Returns Type Description System.Double The latitude in degrees."
  },
  "api/Elements.Geometry.Color.html": {
    "href": "api/Elements.Geometry.Color.html",
    "title": "Class Color | Hypar Docs",
    "keywords": "Class Color An RGBA color. Inheritance System.Object Color Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Color Constructors Color(Single, Single, Single, Single) Construct a color from its components. Declaration public Color(float red, float green, float blue, float alpha) Parameters Type Name Description System.Single red The red component between 0.0 and 1.0. System.Single green The green component between 0.0 and 1.0. System.Single blue The blue component between 0.0 and 1.0. System.Single alpha The alpha component between 0.0 and 1.0. Exceptions Type Condition System.ArgumentOutOfRangeException Thrown when any color component is less than 0.0. System.ArgumentOutOfRangeException Thrown when any color component is greater than 1.0. Properties Alpha The alpha component of the color. Declaration public float Alpha { get; } Property Value Type Description System.Single Blue The blue component of the color. Declaration public float Blue { get; } Property Value Type Description System.Single Green The green component of the color. Declaration public float Green { get; } Property Value Type Description System.Single Red The red component of the color. Declaration public float Red { get; } Property Value Type Description System.Single Methods Equals(Object) Is this color equal to the provided color? Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) GetHashCode() Get the hash code for this color. Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() ToArray() Get the color's components as an array. Declaration public float[] ToArray() Returns Type Description System.Single [] An array containing the color's components."
  },
  "api/Elements.BuiltInMaterials.html": {
    "href": "api/Elements.BuiltInMaterials.html",
    "title": "Class BuiltInMaterials | Hypar Docs",
    "keywords": "Class BuiltInMaterials Built in materials. Inheritance System.Object BuiltInMaterials Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public static class BuiltInMaterials Fields Concrete Concrete. Declaration public static Material Concrete Field Value Type Description Material Properties Black Black Declaration public static Material Black { get; } Property Value Type Description Material Default The default material. Declaration public static Material Default { get; } Property Value Type Description Material Edges Edges Declaration public static Material Edges { get; } Property Value Type Description Material EdgesHighlighted Edges Highlighted Declaration public static Material EdgesHighlighted { get; } Property Value Type Description Material Glass Glass. Declaration public static Material Glass { get; } Property Value Type Description Material Mass Default material used to represent masses. Declaration public static Material Mass { get; } Property Value Type Description Material Steel Steel. Declaration public static Material Steel { get; } Property Value Type Description Material Topography Topography Declaration public static Material Topography { get; } Property Value Type Description Material Trans Fully transparent material. Declaration public static Material Trans { get; } Property Value Type Description Material Void Void Declaration public static Material Void { get; } Property Value Type Description Material Wood Wood. Declaration public static Material Wood { get; } Property Value Type Description Material XAxis X Axis Declaration public static Material XAxis { get; } Property Value Type Description Material YAxis Y Axis Declaration public static Material YAxis { get; } Property Value Type Description Material ZAxis Z Axis Declaration public static Material ZAxis { get; } Property Value Type Description Material"
  },
  "api/Elements.Geometry.Vector3.html": {
    "href": "api/Elements.Geometry.Vector3.html",
    "title": "Class Vector3 | Hypar Docs",
    "keywords": "Class Vector3 A 3D vector. Inheritance System.Object Vector3 Implements System.IComparable < Vector3 > System.IEquatable < Vector3 > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Vector3 : IComparable<Vector3>, IEquatable<Vector3> Constructors Vector3() Construct a default vector at the origin. Declaration public Vector3() Vector3(Vector3) Construct a Vector3 by copying the components of another Vector3. Declaration public Vector3(Vector3 v) Parameters Type Name Description Vector3 v The Vector3 to copy. Vector3(Double, Double) Construct a vector from x, and y coordinates. Declaration public Vector3(double x, double y) Parameters Type Name Description System.Double x The x coordinate of the vector. System.Double y Thy y coordinate of the vector. Exceptions Type Condition System.ArgumentOutOfRangeException Thrown if any components of the vector are NaN or Infinity. Vector3(Double, Double, Double) Construct a vector from x, y, and z coordinates. Declaration [JsonConstructor] public Vector3(double x, double y, double z) Parameters Type Name Description System.Double x The x coordinate of the vector. System.Double y The y coordinate of the vector. System.Double z The z coordinate of the vector. Exceptions Type Condition System.ArgumentOutOfRangeException Thrown if any components of the vector are NaN or Infinity. Fields Tolerance A tolerance for comparison operations. Declaration public static double Tolerance Field Value Type Description System.Double Properties Origin Construct a vector at the origin. Declaration public static Vector3 Origin { get; } Property Value Type Description Vector3 X The X component of the vector. Declaration public double X { get; } Property Value Type Description System.Double XAxis Construct a vector along the X axis. Declaration public static Vector3 XAxis { get; } Property Value Type Description Vector3 Y The Y component of the vector. Declaration public double Y { get; } Property Value Type Description System.Double YAxis Construct a vector along the Y axis. Declaration public static Vector3 YAxis { get; } Property Value Type Description Vector3 Z The Z component of the vector. Declaration public double Z { get; } Property Value Type Description System.Double ZAxis Construct a vector along the Z axis. Declaration public static Vector3 ZAxis { get; } Property Value Type Description Vector3 Methods AngleTo(Vector3) The angle in degrees from this vector to the provided vector. Declaration public double AngleTo(Vector3 v) Parameters Type Name Description Vector3 v The vector with which to measure the angle. Returns Type Description System.Double AtNEqualSpacesAlongLine(Line, Int32, Boolean) Construct vectors at n equal spaces along the provided line. Declaration public static IList<Vector3> AtNEqualSpacesAlongLine(Line line, int n, bool includeEnds = false) Parameters Type Name Description Line line The line. System.Int32 n The number of samples along the line. System.Boolean includeEnds A flag indicating whether or not to include points for the start and end of the line. Returns Type Description System.Collections.Generic.IList < Vector3 > Average(Vector3) Compute the average of this Vector3 and v. Declaration public Vector3 Average(Vector3 v) Parameters Type Name Description Vector3 v The vector with which to compute the average. Returns Type Description Vector3 A vector which is the average of this and v. CompareTo(Vector3) Implement IComparable interface. Declaration public int CompareTo(Vector3 v) Parameters Type Name Description Vector3 v Returns Type Description System.Int32 Cross(Vector3) Compute the cross product of this vector and v. Declaration public Vector3 Cross(Vector3 v) Parameters Type Name Description Vector3 v The vector with which to compute the cross product. Returns Type Description Vector3 DistanceTo(Plane) The distance from this vector to p. The distance will be negative when this vector lies \"behind\" the plane. Declaration public double DistanceTo(Plane p) Parameters Type Name Description Plane p The plane. Returns Type Description System.Double DistanceTo(Vector3) The distance from this point to b. Declaration public double DistanceTo(Vector3 v) Parameters Type Name Description Vector3 v The target vector. Returns Type Description System.Double The distance between this vector and the provided vector. Dot(Vector3) Compute the dot product of this vector and v. Declaration public double Dot(Vector3 v) Parameters Type Name Description Vector3 v The vector with which to compute the dot product. Returns Type Description System.Double The dot product. Equals(Vector3) Implement the IEquatable interface. Declaration public bool Equals(Vector3 other) Parameters Type Name Description Vector3 other Returns Type Description System.Boolean True if all the components of this and the provided vector are equal. Equals(Object) Is this vector equal to the provided vector? Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) GetHashCode() Get the hash code for the vector. Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() IsAlmostEqualTo(Vector3) Determine whether this vector's components are equal to those of v, within tolerance. Declaration public bool IsAlmostEqualTo(Vector3 v) Parameters Type Name Description Vector3 v The vector to compare. Returns Type Description System.Boolean True if the difference of this vector and the supplied vector's components are all within Tolerance, otherwise false. IsNaN() Are any components of this vector NaN? Declaration public bool IsNaN() Returns Type Description System.Boolean True if any components are NaN otherwise false. IsParallelTo(Vector3) Determine whether this vector is parallel to v. Declaration public bool IsParallelTo(Vector3 v) Parameters Type Name Description Vector3 v The vector to compare to this vector. Returns Type Description System.Boolean True if the vectors are parallel, otherwise false. Length() Get the length of this vector. Declaration public double Length() Returns Type Description System.Double Negated() Construct a new vector which is the inverse of this vector. Declaration public Vector3 Negated() Returns Type Description Vector3 A new vector which is the inverse of this vector. Normalized() Return a new vector which is the normalized version of this vector. Declaration public Vector3 Normalized() Returns Type Description Vector3 Project(Plane) Project this vector onto the plane. Declaration public Vector3 Project(Plane p) Parameters Type Name Description Plane p The plane on which to project the point. Returns Type Description Vector3 ProjectAlong(Vector3, Plane) Project this vector onto the plane along a vector. Declaration public Vector3 ProjectAlong(Vector3 v, Plane p) Parameters Type Name Description Vector3 v The vector along which t project. Plane p The plane on which to project. Returns Type Description Vector3 A point on the plane. ProjectOnto(Vector3) Project vector a onto this vector. Declaration public Vector3 ProjectOnto(Vector3 a) Parameters Type Name Description Vector3 a The vector to project onto this vector. Returns Type Description Vector3 A new vector which is the projection of a onto this vector. ToArray() Convert a vector's components to an array. Declaration public double[] ToArray() Returns Type Description System.Double [] An array of comprised of the x, y, and z components of this vector. ToString() A string representation of the vector. Declaration public override string ToString() Returns Type Description System.String The string representation of this vector. Overrides System.Object.ToString() Operators Addition(Vector3, Vector3) Add two vectors. Declaration public static Vector3 operator +(Vector3 a, Vector3 b) Parameters Type Name Description Vector3 a The first vector. Vector3 b The second vector. Returns Type Description Vector3 A vector which is the sum of a and b. Division(Vector3, Double) Divide a vector by a scalar. Declaration public static Vector3 operator /(Vector3 v, double a) Parameters Type Name Description Vector3 v The vector to divide. System.Double a The scalar divisor. Returns Type Description Vector3 A vector whose magnitude is mutiplied by a. GreaterThan(Vector3, Vector3) Compute whether all components of vector a are greater than those of vector b. Declaration public static bool operator>(Vector3 a, Vector3 b) Parameters Type Name Description Vector3 a The first vector. Vector3 b The second vector. Returns Type Description System.Boolean True if all of a's components are greater than those of b, otherwise false. LessThan(Vector3, Vector3) Compute whether all components of vector a are less than those of vector b. Declaration public static bool operator <(Vector3 a, Vector3 b) Parameters Type Name Description Vector3 a The first vector. Vector3 b The second vector. Returns Type Description System.Boolean True if all of a's components are less than those of b, otherwise false. Multiply(Vector3, Double) Multiply a vector and a scalar. Declaration public static Vector3 operator *(Vector3 v, double a) Parameters Type Name Description Vector3 v The vector to multiply. System.Double a The scalar value to multiply. Returns Type Description Vector3 A vector whose magnitude is multiplied by a. Multiply(Double, Vector3) Multiply a scalar and a vector. Declaration public static Vector3 operator *(double a, Vector3 v) Parameters Type Name Description System.Double a The scalar value to multiply. Vector3 v The vector to multiply. Returns Type Description Vector3 A vector whose magnitude is mutiplied by a. Subtraction(Vector3, Vector3) Subtract two vectors. Declaration public static Vector3 operator -(Vector3 a, Vector3 b) Parameters Type Name Description Vector3 a The first vector. Vector3 b The second vector. Returns Type Description Vector3 A vector which is the difference between a and b. Implements System.IComparable<T> System.IEquatable<T>"
  },
  "api/Elements.Geometry.Solids.HalfEdge.html": {
    "href": "api/Elements.Geometry.Solids.HalfEdge.html",
    "title": "Class HalfEdge | Hypar Docs",
    "keywords": "Class HalfEdge One half of the directional components of an Edge. Inheritance System.Object HalfEdge Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Elements.Geometry.Solids Assembly : Hypar.Elements.dll Syntax public class HalfEdge Constructors HalfEdge(Edge, Vertex) Construct a HalfEdge. Declaration public HalfEdge(Edge edge, Vertex vertex) Parameters Type Name Description Edge edge The Edge associated with this HalfEdge. Vertex vertex The Vertex at the start of the edge. Properties Edge The Edge of which this is one half. Declaration public Edge Edge { get; } Property Value Type Description Edge Loop The Loop to which this HalfEdge belongs. Declaration public Loop Loop { get; } Property Value Type Description Loop Vertex The Vertex at the start of the edge. Declaration public Vertex Vertex { get; set; } Property Value Type Description Vertex Methods ToString() Get the string representation of this half edge. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Elements.StructuralFramingType.html": {
    "href": "api/Elements.StructuralFramingType.html",
    "title": "Class StructuralFramingType | Hypar Docs",
    "keywords": "Class StructuralFramingType A container for properties common to a type of structural framing. Inheritance System.Object ElementType StructuralFramingType Implements IIdentifiable IProfile IMaterial Inherited Members ElementType.Id ElementType.Name System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class StructuralFramingType : ElementType, IIdentifiable, IProfile, IMaterial Constructors StructuralFramingType(String, Profile, Material) Construct a structural framing type. Declaration public StructuralFramingType(string name, Profile profile, Material material) Parameters Type Name Description System.String name The name of the structural framing type. Profile profile The profile used by the structural framing type. Material material The material used by the structural framing type. Properties Material The material used by the structural framing type. Declaration public Material Material { get; } Property Value Type Description Material Profile The profile used by the structural framing type. Declaration public Profile Profile { get; } Property Value Type Description Profile Type The type of the structural framing type. Declaration public override string Type { get; } Property Value Type Description System.String Overrides ElementType.Type Implements IIdentifiable IProfile IMaterial"
  },
  "api/Elements.Geometry.Kernel.html": {
    "href": "api/Elements.Geometry.Kernel.html",
    "title": "Class Kernel | Hypar Docs",
    "keywords": "Class Kernel Inheritance System.Object Kernel Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Kernel Properties Instance The Kernel singleton. Declaration public static Kernel Instance { get; } Property Value Type Description Kernel Methods CreateExtrude(IExtrude) Create an extrude. Declaration public Solid CreateExtrude(IExtrude extrude) Parameters Type Name Description IExtrude extrude The IExtrude object. Returns Type Description Solid A solid. CreateLamina(ILamina) Create a lamina. Declaration public Solid CreateLamina(ILamina lamina) Parameters Type Name Description ILamina lamina The ILamina object. Returns Type Description Solid A solid. CreateSweepAlongCurve(ISweepAlongCurve) Create a sweep along a curve. Declaration public Solid CreateSweepAlongCurve(ISweepAlongCurve sweep) Parameters Type Name Description ISweepAlongCurve sweep The ISweepAlongCurve object. Returns Type Description Solid A solid."
  },
  "api/Elements.Geometry.Triangle.html": {
    "href": "api/Elements.Geometry.Triangle.html",
    "title": "Class Triangle | Hypar Docs",
    "keywords": "Class Triangle A mesh triangle. Inheritance System.Object Triangle Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Triangle Constructors Triangle(Vertex, Vertex, Vertex) Create a triangle. Declaration public Triangle(Vertex a, Vertex b, Vertex c) Parameters Type Name Description Vertex a The index of the first vertex of the triangle. Vertex b The index of the second vertex of the triangle. Vertex c The index of the third vertex of the triangle. Properties Normal The triangle's normal. Declaration public Vector3 Normal { get; } Property Value Type Description Vector3 Vertices The triangle's vertices. Declaration public Vertex[] Vertices { get; } Property Value Type Description Vertex [] Methods Area() The area of the triangle. Declaration public double Area() Returns Type Description System.Double"
  },
  "api/Elements.Geometry.Quaternion.html": {
    "href": "api/Elements.Geometry.Quaternion.html",
    "title": "Class Quaternion | Hypar Docs",
    "keywords": "Class Quaternion A quaternion. Inheritance System.Object Quaternion Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Quaternion Constructors Quaternion(Vector3, Double) Construct a Quaternion from an axis and an angle in radians. Declaration public Quaternion(Vector3 axis, double angle) Parameters Type Name Description Vector3 axis System.Double angle Properties W The W component. Declaration public double W { get; } Property Value Type Description System.Double X The X component. Declaration public double X { get; } Property Value Type Description System.Double Y The Y component. Declaration public double Y { get; } Property Value Type Description System.Double Z The Z component. Declaration public double Z { get; } Property Value Type Description System.Double"
  },
  "api/Elements.Geometry.Polygon.html": {
    "href": "api/Elements.Geometry.Polygon.html",
    "title": "Class Polygon | Hypar Docs",
    "keywords": "Class Polygon A closed planar polygon. Inheritance System.Object Polyline Polygon Implements ICurve Inherited Members Polyline.Type Polyline._vertices Polyline.Vertices Polyline.Start Polyline.End Polyline.PointAt(Double) Polyline.TransformAt(Double) Polyline.Bounds() Polyline.Plane() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Polygon : Polyline, ICurve Constructors Polygon(Vector3[]) Construct a Polygon from a collection of vertices. Declaration public Polygon(Vector3[] vertices) Parameters Type Name Description Vector3 [] vertices A collection of vertices. Exceptions Type Condition System.ArgumentException Thrown when coincident vertices are provided. Methods Area() Calculate the polygon's area. Declaration public double Area() Returns Type Description System.Double Centroid() Calculate the centroid of the polygon. Declaration public Vector3 Centroid() Returns Type Description Vector3 Circle(Double, Int32) Create a circle. Declaration public static Polygon Circle(double radius = 1, int divisions = 10) Parameters Type Name Description System.Double radius The radius of the circle. System.Int32 divisions The number of divisions of the circle. Returns Type Description Polygon A circle as a Polygon tessellated into the specified number of divisions. Contains(Polygon) Tests if the supplied Polygon is within this Polygon without coincident edges when compared on a shared plane. Declaration public bool Contains(Polygon polygon) Parameters Type Name Description Polygon polygon The Polygon to compare to this Polygon. Returns Type Description System.Boolean Returns true if every vertex of the supplied Polygon is within this Polygon when compared on a shared plane. Returns false if the supplied Polygon is not entirely within this Polygon, or if the supplied Polygon is null. Contains(Vector3) Tests if the supplied Vector3 is within this Polygon without coincidence with an edge when compared on a shared plane. Declaration public bool Contains(Vector3 vector) Parameters Type Name Description Vector3 vector The Vector3 to compare to this Polygon. Returns Type Description System.Boolean Returns true if the supplied Vector3 is within this Polygon when compared on a shared plane. Returns false if the Vector3 is outside this Polygon or if the supplied Vector3 is null. Covers(Polygon) Tests if the supplied Polygon is within this Polygon with or without edge coincident vertices when compared on a shared plane. Declaration public bool Covers(Polygon polygon) Parameters Type Name Description Polygon polygon The Polygon to compare to this Polygon. Returns Type Description System.Boolean Returns true if every vertex of the supplied Polygon is within this Polygon or coincident with an edge when compared on a shared plane. Returns false if any vertex of the supplied Polygon is outside this Polygon, or if the supplied Polygon is null. Covers(Vector3) Tests if the supplied Vector3 is within this Polygon or coincident with an edge when compared on a shared plane. Declaration public bool Covers(Vector3 vector) Parameters Type Name Description Vector3 vector The Vector3 to compare to this Polygon. Returns Type Description System.Boolean Returns true if the supplied Vector3 is within this Polygon or coincident with an edge when compared on a shared plane. Returns false if the supplied Vector3 is outside this Polygon, or if the supplied Vector3 is null. Difference(Polygon) Constructs the geometric difference between this Polygon and the supplied Polygon. Declaration public IList<Polygon> Difference(Polygon polygon) Parameters Type Name Description Polygon polygon The intersecting Polygon. Returns Type Description System.Collections.Generic.IList < Polygon > Returns a list of Polygons representing the subtraction of the supplied Polygon from this Polygon. Returns null if the area of this Polygon is entirely subtracted. Returns a list containing a representation of the perimeter of this Polygon if the two Polygons do not intersect. Difference(IList<Polygon>) Constructs the geometric difference between this Polygon and the supplied Polygons. Declaration public IList<Polygon> Difference(IList<Polygon> difPolys) Parameters Type Name Description System.Collections.Generic.IList < Polygon > difPolys The list of intersecting Polygons. Returns Type Description System.Collections.Generic.IList < Polygon > Returns a list of Polygons representing the subtraction of the supplied Polygons from this Polygon. Returns null if the area of this Polygon is entirely subtracted. Returns a list containing a representation of the perimeter of this Polygon if the two Polygons do not intersect. Disjoint(Polygon) Tests if the supplied Polygon and this Polygon are coincident in any way when compared on a shared plane. Declaration public bool Disjoint(Polygon polygon) Parameters Type Name Description Polygon polygon The Polygon to compare to this Polygon. Returns Type Description System.Boolean Returns true if the supplied Polygon do not intersect or touch this Polygon when compared on a shared plane or if the supplied Polygon is null. Disjoint(Vector3) Tests if the supplied Vector3 is outside this Polygon when compared on a shared plane. Declaration public bool Disjoint(Vector3 vector) Parameters Type Name Description Vector3 vector The Vector3 to compare to this Polygon. Returns Type Description System.Boolean Returns true if the supplied Vector3 is outside this Polygon when compared on a shared plane or if the supplied Vector3 is null. Equals(Object) Is this polygon equal to the provided polygon? Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) Frames(Double, Double) Get the transforms used to transform a Profile extruded along this Polyline. Declaration public override Transform[] Frames(double startSetback, double endSetback) Parameters Type Name Description System.Double startSetback System.Double endSetback Returns Type Description Transform [] Overrides Polyline.Frames(Double, Double) GetHashCode() Get the hash code for the polygon. Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Intersection(Polygon) Constructs the Polygon intersections between this Polygon and the supplied Polygon. Declaration public IList<Polygon> Intersection(Polygon polygon) Parameters Type Name Description Polygon polygon The intersecting Polygon. Returns Type Description System.Collections.Generic.IList < Polygon > Returns a list of Polygons representing the intersection of this Polygon with the supplied Polygon. Returns null if the two Polygons do not intersect. Intersects(Polygon) Tests if the supplied Polygon shares one or more areas with this Polygon when compared on a shared plane. Declaration public bool Intersects(Polygon polygon) Parameters Type Name Description Polygon polygon The Polygon to compare with this Polygon. Returns Type Description System.Boolean Returns true if the supplied Polygon shares one or more areas with this Polygon when compared on a shared plane. Returns false if the supplied Polygon does not share an area with this Polygon or if the supplied Polygon is null. L(Double, Double, Double) Create an L. Declaration public static Polygon L(double width, double length, double thickness) Parameters Type Name Description System.Double width The width of the L. System.Double length The length of the L. System.Double thickness The thickness of the L. Returns Type Description Polygon Length() Calculate the length of the polygon. Declaration public override double Length() Returns Type Description System.Double Overrides Polyline.Length() Ngon(Int32, Double) Create an ngon. Declaration public static Polygon Ngon(int sides, double radius = 0.5) Parameters Type Name Description System.Int32 sides The number of side of the Polygon. System.Double radius The radius of the circle in which the Ngon is inscribed. Returns Type Description Polygon A Polygon with the specified number of sides. Exceptions Type Condition System.ArgumentOutOfRangeException Thrown when the radius is less than or equal to zero. System.ArgumentOutOfRangeException Thrown when the number of sides is less than 3. Offset(Double) Offset this polygon by the specified amount. Declaration public Polygon[] Offset(double offset) Parameters Type Name Description System.Double offset The amount to offset. Returns Type Description Polygon [] A new Polygon offset by offset. Project(Plane) Project the specified vector onto the plane. Declaration public Polygon Project(Plane p) Parameters Type Name Description Plane p Returns Type Description Polygon ProjectAlong(Vector3, Plane) Project this Polygon onto a Plane along a vector. Declaration public Polygon ProjectAlong(Vector3 direction, Plane p) Parameters Type Name Description Vector3 direction The projection vector. Plane p The Plane onto which to project the Polygon. Returns Type Description Polygon A Polygon projected onto the Plane. Rectangle(Vector3, Vector3) Create a rectangle. Declaration public static Polygon Rectangle(Vector3 min, Vector3 max) Parameters Type Name Description Vector3 min The minimum coordinate. Vector3 max The maximum coordinate. Returns Type Description Polygon A rectangular Polygon with its lower left corner at min and its upper right corner at max. Rectangle(Double, Double, Vector3, Double, Double) Create a rectangle. Declaration public static Polygon Rectangle(double width, double height, Vector3 origin = null, double verticalOffset = 0, double horizontalOffset = 0) Parameters Type Name Description System.Double width The width of the rectangle. System.Double height The height of the rectangle. Vector3 origin An optional origin to displace the rectangle. System.Double verticalOffset An optional amount the rectangle should be offset from center in the vertical direction. System.Double horizontalOffset An optional amount the rectangle should be offset from center in the horizontal direction. Returns Type Description Polygon A rectangular Polygon centered around origin. Reversed() Reverse the direction of a polygon. Declaration public Polygon Reversed() Returns Type Description Polygon Returns a new Polygon whose vertices are reversed. Segments() Get a collection a lines representing each segment of this polyline. Declaration public override Line[] Segments() Returns Type Description Line [] A collection of Lines. Overrides Polyline.Segments() ToString() The string representation of the Polygon. Declaration public override string ToString() Returns Type Description System.String A string containing the string representations of this Polygon's vertices. Overrides Polyline.ToString() Touches(Polygon) Tests if at least one point of an edge of the supplied Polygon is shared with an edge of this Polygon without the Polygons interesecting when compared on a shared plane. Declaration public bool Touches(Polygon polygon) Parameters Type Name Description Polygon polygon The Polygon to compare to this Polygon. Returns Type Description System.Boolean Returns true if the supplied Polygon shares at least one edge point with this Polygon without the Polygons intersecting when compared on a shared plane. Returns false if the Polygons intersect, are disjoint, or if the supplied Polygon is null. Touches(Vector3) Tests if the supplied Vector3 is coincident with an edge of this Polygon when compared on a shared plane. Declaration public bool Touches(Vector3 vector) Parameters Type Name Description Vector3 vector The Vector3 to compare to this Polygon. Returns Type Description System.Boolean Returns true if the supplied Vector3 coincides with an edge of this Polygon when compared on a shared plane. Returns false if the supplied Vector3 is not coincident with an edge of this Polygon, or if the supplied Vector3 is null. Union(Polygon) Constructs the geometric union between this Polygon and the supplied Polygon. Declaration public Polygon Union(Polygon polygon) Parameters Type Name Description Polygon polygon The Polygon to be combined with this Polygon. Returns Type Description Polygon Returns a single Polygon from a successful union. Returns null if a union cannot be performed on the two Polygons. Union(IList<Polygon>) Constructs the geometric union between this Polygon and the supplied list of Polygons. Declaration public Polygon Union(IList<Polygon> polygons) Parameters Type Name Description System.Collections.Generic.IList < Polygon > polygons The list of Polygons to be combined with this Polygon. Returns Type Description Polygon Returns a single Polygon from a successful union. Returns null if a union cannot be performed on the complete list of Polygons. XOR(Polygon) Returns Polygons representing the symmetric difference between this Polygon and the supplied Polygon. Declaration public IList<Polygon> XOR(Polygon polygon) Parameters Type Name Description Polygon polygon The intersecting polygon. Returns Type Description System.Collections.Generic.IList < Polygon > Returns a list of Polygons representing the symmetric difference of this Polygon and the supplied Polygon. Returns a representation of this Polygon and the supplied Polygon if the Polygons do not intersect. Implements ICurve"
  },
  "api/Elements.Serialization.JSON.html": {
    "href": "api/Elements.Serialization.JSON.html",
    "title": "Namespace Elements.Serialization.JSON | Hypar Docs",
    "keywords": "Namespace Elements.Serialization.JSON Classes ColorConverter ElementConverter The serialization converter for elements. ElementTypeConverter Converter for objects of type ElementType. ElementTypeToIdConverter Converter for objects of ElementType. ICurveConverter IListVector3Converter IProfileConverter JsonExtensions Extensions for JSON serialization. MaterialToIdConverter Converts a Material to its identifier and back. ModelConverter Convert a Model. PolygonConverter ProfileToIdConverter PropertyConverter PropertyDictionaryConverter SolidConverter The SolidConverter is used to serialize and deserialize a Solid. Solids have a self-referencing structure which does not serialize effectively using the default serialization logic. The SolidConverter serializes and deserializes starting at the Solid's Faces, using Vertex and Edge ids to reconstruct and link the Edges and Vertices as necessary. Vector3Converter"
  },
  "api/Elements.Serialization.JSON.ElementConverter.html": {
    "href": "api/Elements.Serialization.JSON.ElementConverter.html",
    "title": "Class ElementConverter | Hypar Docs",
    "keywords": "Class ElementConverter The serialization converter for elements. Inheritance System.Object Newtonsoft.Json.JsonConverter ElementConverter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Serialization.JSON Assembly : Hypar.Elements.dll Syntax public class ElementConverter : JsonConverter Constructors ElementConverter(IEnumerable<String>) Construct an ElementConverter. Declaration public ElementConverter(IEnumerable<string> extensions) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > extensions Properties CanRead Can this converter read json? Declaration public override bool CanRead { get; } Property Value Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanRead CanWrite Can this converter write json? Declaration public override bool CanWrite { get; } Property Value Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanWrite Methods CanConvert(Type) Can this converter converter objects of the provided type? Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType Returns Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanConvert(System.Type) ReadJson(JsonReader, Type, Object, JsonSerializer) Read json. Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader System.Type objectType System.Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description System.Object Overrides Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) Exceptions Type Condition System.Exception Thrown when a type matching the deserialized type name cannot be found. WriteJson(JsonWriter, Object, JsonSerializer) Write json. Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer System.Object value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)"
  },
  "api/Elements.StandardWall.html": {
    "href": "api/Elements.StandardWall.html",
    "title": "Class StandardWall | Hypar Docs",
    "keywords": "Class StandardWall A wall defined by a planar curve, a height, and a thickness. var scene = new THREE.Scene(); var div = document.getElementById(\"model\") var camera = new THREE.PerspectiveCamera( 75, div.clientWidth/div.clientHeight, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true }); renderer.setSize( div.clientWidth, div.clientHeight ); renderer.setClearColor( 0x000000, 0 ); div.appendChild( renderer.domElement ); var controls = new THREE.OrbitControls( camera, renderer.domElement ); var light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 ); scene.add( light ); var axesHelper = new THREE.AxesHelper( 2 ); scene.add( axesHelper ); var size = 100; var divisions = 100; var colorCenterLine = new THREE.Color( 0xa0a0a0 ); var colorGrid = new THREE.Color( 0xdbdbdb ); var gridHelper = new THREE.GridHelper( size, divisions, colorCenterLine, colorGrid); scene.add( gridHelper ); window.addEventListener( 'resize', onWindowResize, false ); camera.position.z = 5; // Instantiate a loader var loader = new THREE.GLTFLoader(); // Load a glTF resource loader.load( // resource URL '../models/Elements_StandardWall.glb', // called when the resource is loaded function ( gltf ) { scene.add( gltf.scene ); gltf.animations; // Array<THREE.AnimationClip> gltf.scene; // THREE.Scene gltf.scenes; // Array<THREE.Scene> gltf.cameras; // Array<THREE.Camera> gltf.asset; // Object fitCameraToObject(gltf.scene, 2.0, controls) }, // called while loading is progressing function ( xhr ) { console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' ); }, // called when loading has errors function ( error ) { console.log( 'An error happened' ); } ); var animate = function () { requestAnimationFrame( animate ); // cube.rotation.x += 0.01; // cube.rotation.y += 0.01; renderer.render( scene, camera ); }; function onWindowResize(){ var div = document.getElementById(\"model\"); camera.aspect = div.clientWidth / div.clientHeight; camera.updateProjectionMatrix(); renderer.setSize( div.clientWidth, div.clientHeight ); }; const fitCameraToObject = function ( object, offset, orbitControls ) { const boundingBox = new THREE.Box3(); boundingBox.setFromObject( object ); const center = boundingBox.getCenter(); const size = boundingBox.getSize(); // get the max side of the bounding box const maxDim = Math.max( size.x, size.y, size.z ) * 3; const fov = this.camera.fov * ( Math.PI / 180 ); let cameraZ = Math.abs( maxDim / 4 * Math.tan( fov * 2 ) ); // offset the camera as desired - usually a value of ~ 1.25 is good to prevent // object filling the whole canvas if( offset !== undefined && offset !== 0 ) cameraZ *= offset; camera.position.set( center.x, center.y, cameraZ ); // set the far plane of the camera so that it easily encompasses the whole object const minZ = boundingBox.min.z; const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ; this.camera.far = cameraToFarEdge * 3; this.camera.updateProjectionMatrix(); if ( orbitControls !== undefined ) { // set camera to rotate around center of loaded object orbitControls.target = center; // prevent camera from zooming out far enough to create far plane cutoff orbitControls.maxDistance = cameraToFarEdge * 2; } }; animate(); Examples using System.Collections.Generic; using Elements.Geometry; using Xunit; namespace Elements.Tests.Examples { public class WallExample : ModelTest { [Fact] public void Example() { this.Name = \"Elements_Wall\"; // <example> // Create a wall type. var wallType = new WallType(\"test\", new List<MaterialLayer> { new MaterialLayer(BuiltInMaterials.Concrete, 0.1) }); // Create some openings. var openings = new List<Opening>(){ new Opening(1.0, 2.0, 1.0, 1.0), new Opening(3.0, 1.0, 1.0, 2.0) }; var line = new Line(new Vector3(0, 0, 0), new Vector3(10, 10, 0)); var wall = new StandardWall(line, wallType, 3.0, openings); // </example> this.Model.AddElement(wall); } } } Inheritance System.Object Element Wall StandardWall Implements IElement IIdentifiable ITransformable IPropertySet IElementType < WallType > IExtrude IProfile ISolid IHasOpenings Inherited Members Wall.Height Wall.ElementType Wall.Geometry Wall.ExtrudeDirection Wall.ExtrudeDepth Wall.Profile Wall.Thickness() Wall.GetUpdatedSolid() Element.Id Element.Type Element.Properties Element.Transform Element.Name Element.AddProperty(String, IProperty) Element.RemoveProperty(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class StandardWall : Wall, IElement, IIdentifiable, ITransformable, IPropertySet, IElementType<WallType>, IExtrude, IProfile, ISolid, IHasOpenings Constructors StandardWall(Line, WallType, Double, List<Opening>, Transform) Construct a wall along a line. Declaration public StandardWall(Line centerLine, WallType elementType, double height, List<Opening> openings = null, Transform transform = null) Parameters Type Name Description Line centerLine The center line of the wall. WallType elementType The wall type of the wall. System.Double height The height of the wall. System.Collections.Generic.List < Opening > openings A collection of Openings in the wall. Transform transform The transform of the wall. This transform will be concatenated to the transform created to describe the wall in 2D. Exceptions Type Condition System.ArgumentOutOfRangeException Thrown when the height of the wall is less than or equal to zero. System.ArgumentOutOfRangeException Thrown when the Z components of wall's start and end points are not the same. Properties BothSides Extrude to both sides? Declaration public override bool BothSides { get; } Property Value Type Description System.Boolean Overrides Wall.BothSides CenterLine The center line of the wall. Declaration public Line CenterLine { get; } Property Value Type Description Line Openings An array of openings in the wall. Declaration public List<Opening> Openings { get; protected set; } Property Value Type Description System.Collections.Generic.List < Opening > Implements IElement IIdentifiable ITransformable IPropertySet IElementType<TElementType> IExtrude IProfile ISolid IHasOpenings"
  },
  "api/Elements.GeoJSON.FeatureCollection.html": {
    "href": "api/Elements.GeoJSON.FeatureCollection.html",
    "title": "Class FeatureCollection | Hypar Docs",
    "keywords": "Class FeatureCollection A GeoJSON feature collection. Inheritance System.Object FeatureCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax public class FeatureCollection Constructors FeatureCollection(IEnumerable<Feature>) Construct a feature collection. Declaration public FeatureCollection(IEnumerable<Feature> features) Parameters Type Name Description System.Collections.Generic.IEnumerable < Feature > features A collection of features. Properties Features A collection of features. Declaration public IEnumerable<Feature> Features { get; set; } Property Value Type Description System.Collections.Generic.IEnumerable < Feature > Type The type of the feature. Declaration public string Type { get; } Property Value Type Description System.String"
  },
  "api/Elements.ElementOfType-1.html": {
    "href": "api/Elements.ElementOfType-1.html",
    "title": "Class ElementOfType<TElementType> | Hypar Docs",
    "keywords": "Class ElementOfType<TElementType> Base class for all Elements which have an ElementType. Inheritance System.Object Element ElementOfType<TElementType> Implements IElement IIdentifiable ITransformable IPropertySet Inherited Members Element.Id Element.Type Element.Properties Element.Transform Element.Name Element.AddProperty(String, IProperty) Element.RemoveProperty(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public abstract class ElementOfType<TElementType> : Element, IElement, IIdentifiable, ITransformable, IPropertySet Type Parameters Name Description TElementType Properties ElementType The ElementType of the Element. Declaration public TElementType ElementType { get; protected set; } Property Value Type Description TElementType Implements IElement IIdentifiable ITransformable IPropertySet"
  },
  "api/Elements.Geometry.BBox3.html": {
    "href": "api/Elements.Geometry.BBox3.html",
    "title": "Class BBox3 | Hypar Docs",
    "keywords": "Class BBox3 An axis-alignment bounding box. Inheritance System.Object BBox3 Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class BBox3 Constructors BBox3(Profile) Create the BBox3 for a Profile. Declaration public BBox3(Profile profile) Parameters Type Name Description Profile profile The Profile. BBox3(Vector3, Vector3) Create a bounding box specifying minimum and maximum extents. Declaration public BBox3(Vector3 min, Vector3 max) Parameters Type Name Description Vector3 min The minimum extent of the bounding box. Vector3 max The maximum extent of the bounding box. BBox3(Vector3[]) Construct a bounding box from an array of points. Declaration public BBox3(Vector3[] points) Parameters Type Name Description Vector3 [] points The points which are contained within the bounding box. BBox3(IList<Polygon>) Create a bounding box for a collection of polygons. Declaration public BBox3(IList<Polygon> polygons) Parameters Type Name Description System.Collections.Generic.IList < Polygon > polygons Properties Max The maximum extent of the bounding box. Declaration public Vector3 Max { get; } Property Value Type Description Vector3 Min The minimum extent of the bounding box. Declaration public Vector3 Min { get; } Property Value Type Description Vector3"
  },
  "api/Elements.GeoJSON.MultiLineString.html": {
    "href": "api/Elements.GeoJSON.MultiLineString.html",
    "title": "Class MultiLineString | Hypar Docs",
    "keywords": "Class MultiLineString A GeoJSON multi line string. Inheritance System.Object Geometry MultiLineString Inherited Members Geometry.Type System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax public class MultiLineString : Geometry Constructors MultiLineString(Position[][]) Construct a MultiLineString. Declaration public MultiLineString(Position[][] coordinates) Parameters Type Name Description Position [][] coordinates Properties Coordinates The coordinates of the geometry. Declaration public Position[][] Coordinates { get; } Property Value Type Description Position [][]"
  },
  "api/Elements.Beam.html": {
    "href": "api/Elements.Beam.html",
    "title": "Class Beam | Hypar Docs",
    "keywords": "Class Beam A structural framing element defined by a center line curve and a profile. var scene = new THREE.Scene(); var div = document.getElementById(\"model\") var camera = new THREE.PerspectiveCamera( 75, div.clientWidth/div.clientHeight, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true }); renderer.setSize( div.clientWidth, div.clientHeight ); renderer.setClearColor( 0x000000, 0 ); div.appendChild( renderer.domElement ); var controls = new THREE.OrbitControls( camera, renderer.domElement ); var light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 ); scene.add( light ); var axesHelper = new THREE.AxesHelper( 2 ); scene.add( axesHelper ); var size = 100; var divisions = 100; var colorCenterLine = new THREE.Color( 0xa0a0a0 ); var colorGrid = new THREE.Color( 0xdbdbdb ); var gridHelper = new THREE.GridHelper( size, divisions, colorCenterLine, colorGrid); scene.add( gridHelper ); window.addEventListener( 'resize', onWindowResize, false ); camera.position.z = 5; // Instantiate a loader var loader = new THREE.GLTFLoader(); // Load a glTF resource loader.load( // resource URL '../models/Elements_Beam.glb', // called when the resource is loaded function ( gltf ) { scene.add( gltf.scene ); gltf.animations; // Array<THREE.AnimationClip> gltf.scene; // THREE.Scene gltf.scenes; // Array<THREE.Scene> gltf.cameras; // Array<THREE.Camera> gltf.asset; // Object fitCameraToObject(gltf.scene, 2.0, controls) }, // called while loading is progressing function ( xhr ) { console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' ); }, // called when loading has errors function ( error ) { console.log( 'An error happened' ); } ); var animate = function () { requestAnimationFrame( animate ); // cube.rotation.x += 0.01; // cube.rotation.y += 0.01; renderer.render( scene, camera ); }; function onWindowResize(){ var div = document.getElementById(\"model\"); camera.aspect = div.clientWidth / div.clientHeight; camera.updateProjectionMatrix(); renderer.setSize( div.clientWidth, div.clientHeight ); }; const fitCameraToObject = function ( object, offset, orbitControls ) { const boundingBox = new THREE.Box3(); boundingBox.setFromObject( object ); const center = boundingBox.getCenter(); const size = boundingBox.getSize(); // get the max side of the bounding box const maxDim = Math.max( size.x, size.y, size.z ) * 3; const fov = this.camera.fov * ( Math.PI / 180 ); let cameraZ = Math.abs( maxDim / 4 * Math.tan( fov * 2 ) ); // offset the camera as desired - usually a value of ~ 1.25 is good to prevent // object filling the whole canvas if( offset !== undefined && offset !== 0 ) cameraZ *= offset; camera.position.set( center.x, center.y, cameraZ ); // set the far plane of the camera so that it easily encompasses the whole object const minZ = boundingBox.min.z; const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ; this.camera.far = cameraToFarEdge * 3; this.camera.updateProjectionMatrix(); if ( orbitControls !== undefined ) { // set camera to rotate around center of loaded object orbitControls.target = center; // prevent camera from zooming out far enough to create far plane cutoff orbitControls.maxDistance = cameraToFarEdge * 2; } }; animate(); Examples // Create a framing type. var profile = WideFlangeProfileServer.Instance.GetProfileByName(\"W44x335\"); var framingType = new StructuralFramingType(profile.Name, profile, BuiltInMaterials.Steel); // Create a straight beam. var line = new Line(Vector3.Origin, new Vector3(5,0,5)); var linearBeam = new Beam(line, framingType); // Create a polygon beam. var polygon = Polygon.Ngon(5, 2); var polygonBeam = new Beam(polygon, framingType, 0, 0, new Transform(6,0,0)); // Create a curved beam. var arc = new Arc(Vector3.Origin, 5.0, 45.0, 135.0); var arcBeam = new Beam(arc, framingType, 0, 0, new Transform(12,0,0)); Inheritance System.Object Element StructuralFraming Beam Implements IElement IIdentifiable ITransformable IPropertySet IElementType < StructuralFramingType > ISweepAlongCurve IProfile ISolid Inherited Members StructuralFraming.Curve StructuralFraming.StartSetback StructuralFraming.EndSetback StructuralFraming.ElementType StructuralFraming.Profile StructuralFraming.Volume() StructuralFraming.ProfileTransformed() StructuralFraming.GetUpdatedSolid() Element.Id Element.Type Element.Properties Element.Transform Element.Name Element.AddProperty(String, IProperty) Element.RemoveProperty(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Beam : StructuralFraming, IElement, IIdentifiable, ITransformable, IPropertySet, IElementType<StructuralFramingType>, ISweepAlongCurve, IProfile, ISolid Constructors Beam(ICurve, StructuralFramingType, Double, Double, Transform) Construct a beam. Declaration [JsonConstructor] public Beam(ICurve curve, StructuralFramingType elementType, double startSetback = 0, double endSetback = 0, Transform transform = null) Parameters Type Name Description ICurve curve The beam's center line. StructuralFramingType elementType The beam's structural framing type. System.Double startSetback The setback of the beam's geometry at the start. System.Double endSetback The setback of the beam's geometry at the end. Transform transform The beam's transform. Implements IElement IIdentifiable ITransformable IPropertySet IElementType<TElementType> ISweepAlongCurve IProfile ISolid"
  },
  "api/Elements.Serialization.JSON.Vector3Converter.html": {
    "href": "api/Elements.Serialization.JSON.Vector3Converter.html",
    "title": "Class Vector3Converter | Hypar Docs",
    "keywords": "Class Vector3Converter Inheritance System.Object Newtonsoft.Json.JsonConverter Vector3Converter Inherited Members Newtonsoft.Json.JsonConverter.CanWrite System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Serialization.JSON Assembly : Hypar.Elements.dll Syntax public class Vector3Converter : JsonConverter Properties CanRead Declaration public override bool CanRead { get; } Property Value Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanRead Methods CanConvert(Type) Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType Returns Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanConvert(System.Type) ReadJson(JsonReader, Type, Object, JsonSerializer) Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader System.Type objectType System.Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description System.Object Overrides Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) WriteJson(JsonWriter, Object, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer System.Object value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)"
  },
  "api/Elements.Geometry.Interfaces.ISweepAlongCurve.html": {
    "href": "api/Elements.Geometry.Interfaces.ISweepAlongCurve.html",
    "title": "Interface ISweepAlongCurve | Hypar Docs",
    "keywords": "Interface ISweepAlongCurve Sweeps an area along a directrix. Inherited Members IProfile.Profile ISolid.GetUpdatedSolid() Namespace : Elements.Geometry.Interfaces Assembly : Hypar.Elements.dll Syntax public interface ISweepAlongCurve : IProfile, ISolid Properties Curve The curve along which the area is swept. Declaration ICurve Curve { get; } Property Value Type Description ICurve EndSetback The setback of the extrusion at the end. Declaration double EndSetback { get; } Property Value Type Description System.Double StartSetback The setback of the extrusion at the start. Declaration double StartSetback { get; } Property Value Type Description System.Double"
  },
  "api/Elements.Serialization.JSON.ElementTypeConverter.html": {
    "href": "api/Elements.Serialization.JSON.ElementTypeConverter.html",
    "title": "Class ElementTypeConverter | Hypar Docs",
    "keywords": "Class ElementTypeConverter Converter for objects of type ElementType. Inheritance System.Object Newtonsoft.Json.JsonConverter ElementTypeConverter Inherited Members Newtonsoft.Json.JsonConverter.CanRead System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Serialization.JSON Assembly : Hypar.Elements.dll Syntax public class ElementTypeConverter : JsonConverter Properties CanWrite Can this converter write json? Declaration public override bool CanWrite { get; } Property Value Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanWrite Methods CanConvert(Type) Can this converter convert an object of type objectType? Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType Returns Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanConvert(System.Type) ReadJson(JsonReader, Type, Object, JsonSerializer) Read json. Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader System.Type objectType System.Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description System.Object Overrides Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) WriteJson(JsonWriter, Object, JsonSerializer) Write json. Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer System.Object value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)"
  },
  "api/Elements.GeoJSON.Line.html": {
    "href": "api/Elements.GeoJSON.Line.html",
    "title": "Class Line | Hypar Docs",
    "keywords": "Class Line A GeoJSON line. Inheritance System.Object Geometry Line Inherited Members Geometry.Type System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax public class Line : Geometry Constructors Line(Position[]) Construct a Line. Declaration public Line(Position[] coordinates) Parameters Type Name Description Position [] coordinates Exceptions Type Condition System.ArgumentException Thrown when the coordinates provides does not contain 2 items. Properties Coordinates The coordinates of the geometry. Declaration public Position[] Coordinates { get; } Property Value Type Description Position []"
  },
  "api/Elements.Geometry.Profiles.html": {
    "href": "api/Elements.Geometry.Profiles.html",
    "title": "Namespace Elements.Geometry.Profiles | Hypar Docs",
    "keywords": "Namespace Elements.Geometry.Profiles Classes HSSPipeProfile HSSPipeProfileServer A singleton class which serves every HSS pipe section as defined by AISC. ProfileServer Base class for types which serve Profiles. WideFlangeProfile WideFlangeProfileServer A singleton class which serves every Wide Flange section as defined by AISC."
  },
  "api/Elements.Geometry.Profile.html": {
    "href": "api/Elements.Geometry.Profile.html",
    "title": "Class Profile | Hypar Docs",
    "keywords": "Class Profile A polygonal perimeter with zero or more polygonal voids. Inheritance System.Object Profile HSSPipeProfile WideFlangeProfile Implements IIdentifiable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public class Profile : IIdentifiable Constructors Profile(Polygon, Polygon, String) Construct a profile. Declaration public Profile(Polygon perimeter, Polygon singleVoid, string name = null) Parameters Type Name Description Polygon perimeter The perimeter of the profile. Polygon singleVoid A void in the profile. System.String name The name of the profile. Profile(Polygon, Polygon[], String) Construct a profile. Declaration public Profile(Polygon perimeter, Polygon[] voids, string name = null) Parameters Type Name Description Polygon perimeter The perimeter of the profile. Polygon [] voids A collection of Polygons representing voids in the profile. System.String name The name of the profile. Profile(Polygon, String) Construct a profile. Declaration public Profile(Polygon perimeter, string name = null) Parameters Type Name Description Polygon perimeter The perimeter of the profile System.String name The name of the profile. Profile(Guid, Polygon, Polygon[], String) Construct a profile. Declaration [JsonConstructor] public Profile(Guid id, Polygon perimeter, Polygon[] voids, string name = null) Parameters Type Name Description System.Guid id The unique identifier of the profile. Polygon perimeter The perimeter of the profile. Polygon [] voids A collection of Polygons representing voids in the profile. System.String name The name of the profile. Profile(String) Default constructor for profile. Declaration protected Profile(string name) Parameters Type Name Description System.String name Properties Id The identifier of the profile. Declaration public Guid Id { get; } Property Value Type Description System.Guid Name The name of the profile. Declaration public string Name { get; } Property Value Type Description System.String Perimeter The perimeter of the profile. Declaration public Polygon Perimeter { get; protected set; } Property Value Type Description Polygon Voids A collection of Polygons representing voids in the profile. Declaration public Polygon[] Voids { get; protected set; } Property Value Type Description Polygon [] Methods Area() The area of the profile. Declaration public double Area() Returns Type Description System.Double Reversed() Get a new profile which is the reverse of this profile. Declaration public Profile Reversed() Returns Type Description Profile Implements IIdentifiable"
  },
  "api/Elements.Geometry.Interfaces.ITessellate.html": {
    "href": "api/Elements.Geometry.Interfaces.ITessellate.html",
    "title": "Interface ITessellate | Hypar Docs",
    "keywords": "Interface ITessellate Namespace : Elements.Geometry.Interfaces Assembly : Hypar.Elements.dll Syntax public interface ITessellate Methods Tessellate(ref Mesh) Add the tessellated representation of this object to the provided Mesh. Declaration void Tessellate(ref Mesh mesh) Parameters Type Name Description Mesh mesh The mesh to which this object's representation will be added."
  },
  "api/Elements.Geometry.Colors.html": {
    "href": "api/Elements.Geometry.Colors.html",
    "title": "Class Colors | Hypar Docs",
    "keywords": "Class Colors Commonly used colors. Inheritance System.Object Colors Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public static class Colors Properties Aqua Aqua Declaration public static Color Aqua { get; } Property Value Type Description Color Beige Beige Declaration public static Color Beige { get; } Property Value Type Description Color Black Black Declaration public static Color Black { get; } Property Value Type Description Color Blue Blue Declaration public static Color Blue { get; } Property Value Type Description Color Brown Brown Declaration public static Color Brown { get; } Property Value Type Description Color Cobalt Cobalt Declaration public static Color Cobalt { get; } Property Value Type Description Color Coral Coral Declaration public static Color Coral { get; } Property Value Type Description Color Crimson Crimson Declaration public static Color Crimson { get; } Property Value Type Description Color Cyan Cyan Declaration public static Color Cyan { get; } Property Value Type Description Color Darkgray Dark Gray Declaration public static Color Darkgray { get; } Property Value Type Description Color Emerald Emerald Declaration public static Color Emerald { get; } Property Value Type Description Color Granite Granite Declaration public static Color Granite { get; } Property Value Type Description Color Gray Gray Declaration public static Color Gray { get; } Property Value Type Description Color Green Green Declaration public static Color Green { get; } Property Value Type Description Color Lavender Lavender Declaration public static Color Lavender { get; } Property Value Type Description Color Lime Lime Declaration public static Color Lime { get; } Property Value Type Description Color Magenta Magenta Declaration public static Color Magenta { get; } Property Value Type Description Color Maroon Maroon Declaration public static Color Maroon { get; } Property Value Type Description Color Mint Mint Declaration public static Color Mint { get; } Property Value Type Description Color Navy Navy Declaration public static Color Navy { get; } Property Value Type Description Color Olive Olive Declaration public static Color Olive { get; } Property Value Type Description Color Orange Orange Declaration public static Color Orange { get; } Property Value Type Description Color Pink Pink Declaration public static Color Pink { get; } Property Value Type Description Color Purple Purple Declaration public static Color Purple { get; } Property Value Type Description Color Red Red Declaration public static Color Red { get; } Property Value Type Description Color Sand Sand Declaration public static Color Sand { get; } Property Value Type Description Color Stone Stone Declaration public static Color Stone { get; } Property Value Type Description Color Teal Teal Declaration public static Color Teal { get; } Property Value Type Description Color White White Declaration public static Color White { get; } Property Value Type Description Color Yellow Yellow Declaration public static Color Yellow { get; } Property Value Type Description Color"
  },
  "api/Elements.Grid.html": {
    "href": "api/Elements.Grid.html",
    "title": "Class Grid | Hypar Docs",
    "keywords": "Class Grid A grid comprised of rows and columns with each cell represented by a polyline. Inheritance System.Object Grid Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Grid Constructors Grid(Line, Line, Double, Double) Construct a grid. Declaration public Grid(Line bottom, Line top, double uDistance, double vDistance) Parameters Type Name Description Line bottom The bottom edge of the Grid. Line top The top edge of the Grid. System.Double uDistance The distance along the u parameter at which points will be created. System.Double vDistance The distance along the v parameter at which points will be created. Grid(Line, Line, Int32, Int32) Construct a grid. Declaration public Grid(Line bottom, Line top, int uDivisions = 1, int vDivisions = 1) Parameters Type Name Description Line bottom Line top System.Int32 uDivisions The number of grid divisions in the u direction. System.Int32 vDivisions The number of grid divisions in the v direction. Methods Cells() Get all cells. Declaration public Vector3[][, ] Cells() Returns Type Description Vector3 [][,]"
  },
  "api/Elements.Geometry.VerticalAlignment.html": {
    "href": "api/Elements.Geometry.VerticalAlignment.html",
    "title": "Enum VerticalAlignment | Hypar Docs",
    "keywords": "Enum VerticalAlignment The vertical alignment of a profile. Namespace : Elements.Geometry Assembly : Hypar.Elements.dll Syntax public enum VerticalAlignment Fields Name Description Bottom Align the profile along its bottom. Center Align the profile along its center. Top Align the profile along its top."
  },
  "api/Elements.Serialization.JSON.SolidConverter.html": {
    "href": "api/Elements.Serialization.JSON.SolidConverter.html",
    "title": "Class SolidConverter | Hypar Docs",
    "keywords": "Class SolidConverter The SolidConverter is used to serialize and deserialize a Solid. Solids have a self-referencing structure which does not serialize effectively using the default serialization logic. The SolidConverter serializes and deserializes starting at the Solid's Faces, using Vertex and Edge ids to reconstruct and link the Edges and Vertices as necessary. Inheritance System.Object Newtonsoft.Json.JsonConverter SolidConverter Inherited Members Newtonsoft.Json.JsonConverter.CanRead Newtonsoft.Json.JsonConverter.CanWrite System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Serialization.JSON Assembly : Hypar.Elements.dll Syntax public class SolidConverter : JsonConverter Constructors SolidConverter(Dictionary<Guid, Material>) Declaration public SolidConverter(Dictionary<Guid, Material> materials) Parameters Type Name Description System.Collections.Generic.Dictionary < System.Guid , Material > materials Methods CanConvert(Type) Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType Returns Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanConvert(System.Type) ReadJson(JsonReader, Type, Object, JsonSerializer) Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader System.Type objectType System.Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description System.Object Overrides Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) WriteJson(JsonWriter, Object, JsonSerializer) Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer System.Object value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)"
  },
  "api/Elements.Serialization.IFC.html": {
    "href": "api/Elements.Serialization.IFC.html",
    "title": "Namespace Elements.Serialization.IFC | Hypar Docs",
    "keywords": "Namespace Elements.Serialization.IFC Classes IFCExtensions Extension methods for converting IFC types to Element types."
  },
  "api/Elements.Interfaces.IMaterial.html": {
    "href": "api/Elements.Interfaces.IMaterial.html",
    "title": "Interface IMaterial | Hypar Docs",
    "keywords": "Interface IMaterial A material. Namespace : Elements.Interfaces Assembly : Hypar.Elements.dll Syntax public interface IMaterial Properties Material The object's material. Declaration Material Material { get; } Property Value Type Description Material"
  },
  "api/Elements.Serialization.JSON.ElementTypeToIdConverter.html": {
    "href": "api/Elements.Serialization.JSON.ElementTypeToIdConverter.html",
    "title": "Class ElementTypeToIdConverter | Hypar Docs",
    "keywords": "Class ElementTypeToIdConverter Converter for objects of ElementType. Inheritance System.Object Newtonsoft.Json.JsonConverter ElementTypeToIdConverter Inherited Members Newtonsoft.Json.JsonConverter.CanRead Newtonsoft.Json.JsonConverter.CanWrite System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Serialization.JSON Assembly : Hypar.Elements.dll Syntax public class ElementTypeToIdConverter : JsonConverter Constructors ElementTypeToIdConverter(Dictionary<Guid, ElementType>) Construct an ElementTypeConverter. Declaration public ElementTypeToIdConverter(Dictionary<Guid, ElementType> elementTypes) Parameters Type Name Description System.Collections.Generic.Dictionary < System.Guid , ElementType > elementTypes Methods CanConvert(Type) Can this converter convert and object of type objectType? Declaration public override bool CanConvert(Type objectType) Parameters Type Name Description System.Type objectType Returns Type Description System.Boolean Overrides Newtonsoft.Json.JsonConverter.CanConvert(System.Type) ReadJson(JsonReader, Type, Object, JsonSerializer) Read json. Declaration public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonReader reader System.Type objectType System.Object existingValue Newtonsoft.Json.JsonSerializer serializer Returns Type Description System.Object Overrides Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer) WriteJson(JsonWriter, Object, JsonSerializer) Write json. Declaration public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) Parameters Type Name Description Newtonsoft.Json.JsonWriter writer System.Object value Newtonsoft.Json.JsonSerializer serializer Overrides Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)"
  },
  "api/Elements.Geometry.Profiles.HSSPipeProfileServer.html": {
    "href": "api/Elements.Geometry.Profiles.HSSPipeProfileServer.html",
    "title": "Class HSSPipeProfileServer | Hypar Docs",
    "keywords": "Class HSSPipeProfileServer A singleton class which serves every HSS pipe section as defined by AISC. Inheritance System.Object ProfileServer HSSPipeProfileServer Inherited Members ProfileServer.InchesToMeters ProfileServer._profiles ProfileServer.GetProfileByName(String) ProfileServer.AllProfiles() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.Geometry.Profiles Assembly : Hypar.Elements.dll Syntax public sealed class HSSPipeProfileServer : ProfileServer Properties Instance The HSSPipeProfileServer singleton. Declaration public static HSSPipeProfileServer Instance { get; } Property Value Type Description HSSPipeProfileServer"
  },
  "api/Elements.GeoJSON.LineString.html": {
    "href": "api/Elements.GeoJSON.LineString.html",
    "title": "Class LineString | Hypar Docs",
    "keywords": "Class LineString A GeoJSON linestring. Inheritance System.Object Geometry LineString Inherited Members Geometry.Type System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements.GeoJSON Assembly : Hypar.Elements.dll Syntax public class LineString : Geometry Constructors LineString(Position[]) Construct a LineString. Declaration public LineString(Position[] coordinates) Parameters Type Name Description Position [] coordinates Properties Coordinates The coordinates of the geometry. Declaration public Position[] Coordinates { get; } Property Value Type Description Position []"
  },
  "api/Elements.Floor.html": {
    "href": "api/Elements.Floor.html",
    "title": "Class Floor | Hypar Docs",
    "keywords": "Class Floor A floor is a horizontal element defined by a profile. var scene = new THREE.Scene(); var div = document.getElementById(\"model\") var camera = new THREE.PerspectiveCamera( 75, div.clientWidth/div.clientHeight, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true }); renderer.setSize( div.clientWidth, div.clientHeight ); renderer.setClearColor( 0x000000, 0 ); div.appendChild( renderer.domElement ); var controls = new THREE.OrbitControls( camera, renderer.domElement ); var light = new THREE.HemisphereLight( 0xffffbb, 0x080820, 1 ); scene.add( light ); var axesHelper = new THREE.AxesHelper( 2 ); scene.add( axesHelper ); var size = 100; var divisions = 100; var colorCenterLine = new THREE.Color( 0xa0a0a0 ); var colorGrid = new THREE.Color( 0xdbdbdb ); var gridHelper = new THREE.GridHelper( size, divisions, colorCenterLine, colorGrid); scene.add( gridHelper ); window.addEventListener( 'resize', onWindowResize, false ); camera.position.z = 5; // Instantiate a loader var loader = new THREE.GLTFLoader(); // Load a glTF resource loader.load( // resource URL '../models/Elements_Floor.glb', // called when the resource is loaded function ( gltf ) { scene.add( gltf.scene ); gltf.animations; // Array<THREE.AnimationClip> gltf.scene; // THREE.Scene gltf.scenes; // Array<THREE.Scene> gltf.cameras; // Array<THREE.Camera> gltf.asset; // Object fitCameraToObject(gltf.scene, 2.0, controls) }, // called while loading is progressing function ( xhr ) { console.log( ( xhr.loaded / xhr.total * 100 ) + '% loaded' ); }, // called when loading has errors function ( error ) { console.log( 'An error happened' ); } ); var animate = function () { requestAnimationFrame( animate ); // cube.rotation.x += 0.01; // cube.rotation.y += 0.01; renderer.render( scene, camera ); }; function onWindowResize(){ var div = document.getElementById(\"model\"); camera.aspect = div.clientWidth / div.clientHeight; camera.updateProjectionMatrix(); renderer.setSize( div.clientWidth, div.clientHeight ); }; const fitCameraToObject = function ( object, offset, orbitControls ) { const boundingBox = new THREE.Box3(); boundingBox.setFromObject( object ); const center = boundingBox.getCenter(); const size = boundingBox.getSize(); // get the max side of the bounding box const maxDim = Math.max( size.x, size.y, size.z ) * 3; const fov = this.camera.fov * ( Math.PI / 180 ); let cameraZ = Math.abs( maxDim / 4 * Math.tan( fov * 2 ) ); // offset the camera as desired - usually a value of ~ 1.25 is good to prevent // object filling the whole canvas if( offset !== undefined && offset !== 0 ) cameraZ *= offset; camera.position.set( center.x, center.y, cameraZ ); // set the far plane of the camera so that it easily encompasses the whole object const minZ = boundingBox.min.z; const cameraToFarEdge = ( minZ < 0 ) ? -minZ + cameraZ : cameraZ - minZ; this.camera.far = cameraToFarEdge * 3; this.camera.updateProjectionMatrix(); if ( orbitControls !== undefined ) { // set camera to rotate around center of loaded object orbitControls.target = center; // prevent camera from zooming out far enough to create far plane cutoff orbitControls.maxDistance = cameraToFarEdge * 2; } }; animate(); Examples // Create a floor type. var floorType = new FloorType(\"test\", new List<MaterialLayer> { new MaterialLayer(BuiltInMaterials.Concrete, 0.1) }); // Create some openings. var openings = new List<Opening>(){ new Opening(1, 1, 1, 1), new Opening(3, 3, 1, 3), }; // Create two floors. var p = Polygon.L(10, 20, 5); var floor1 = new Floor(p, floorType, 0, null, openings); var floor2 = new Floor(p, floorType, 3, null, openings); Inheritance System.Object Element Floor Implements IElement IIdentifiable ITransformable IPropertySet IElementType < FloorType > IExtrude IProfile ISolid IHasOpenings Inherited Members Element.Id Element.Type Element.Properties Element.Transform Element.Name Element.AddProperty(String, IProperty) Element.RemoveProperty(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Elements Assembly : Hypar.Elements.dll Syntax public class Floor : Element, IElement, IIdentifiable, ITransformable, IPropertySet, IElementType<FloorType>, IExtrude, IProfile, ISolid, IHasOpenings Constructors Floor(Polygon, FloorType, Double, Transform, List<Opening>) Create a floor. Declaration public Floor(Polygon profile, FloorType elementType, double elevation = 0, Transform transform = null, List<Opening> openings = null) Parameters Type Name Description Polygon profile The profile of the floor. FloorType elementType The floor type of the floor. System.Double elevation The elevation of the top of the floor. Transform transform The floor's transform. If set, this will override the floor's elevation. System.Collections.Generic.List < Opening > openings An array of openings in the floor. Floor(Profile, Transform, Vector3, FloorType, Double, Transform) Create a floor. Declaration public Floor(Profile profile, Transform start, Vector3 direction, FloorType elementType, double elevation = 0, Transform transform = null) Parameters Type Name Description Profile profile The profile of the floor. Transform start A tranform used to pre-transform the profile and direction vector before sweeping the geometry. Vector3 direction The direction of the floor's sweep. FloorType elementType The floor type of the floor. System.Double elevation The elevation of the floor. Transform transform The floor's transform. If set, this will override the elevation. Properties BothSides Extrude to both sides? Declaration public bool BothSides { get; } Property Value Type Description System.Boolean ElementType The floor type of the floor. Declaration public FloorType ElementType { get; } Property Value Type Description FloorType Elevation The elevation from which the floor is extruded. Declaration public double Elevation { get; } Property Value Type Description System.Double ExtrudeDepth The extrude depth of the floor. Declaration public double ExtrudeDepth { get; } Property Value Type Description System.Double ExtrudeDirection The extrude direction of the floor. Declaration public Vector3 ExtrudeDirection { get; } Property Value Type Description Vector3 Geometry The floor's geometry. Declaration public Solid Geometry { get; } Property Value Type Description Solid Openings The openings in the floor. Declaration public List<Opening> Openings { get; set; } Property Value Type Description System.Collections.Generic.List < Opening > Profile The untransformed profile of the floor. Declaration public Profile Profile { get; } Property Value Type Description Profile Methods Area() The area of the floor. Declaration public double Area() Returns Type Description System.Double The area of the floor, not including the area of openings. GetUpdatedSolid() Get the updated solid representation of the floor. Declaration public Solid GetUpdatedSolid() Returns Type Description Solid ProfileTransformed() Get the profile of the floor transformed by the floor's transform. Declaration public Profile ProfileTransformed() Returns Type Description Profile Thickness() Calculate thickness of the floor's extrusion. Declaration public double Thickness() Returns Type Description System.Double Implements IElement IIdentifiable ITransformable IPropertySet IElementType<TElementType> IExtrude IProfile ISolid IHasOpenings"
  }
}