//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.1.21.0 (Newtonsoft.Json v11.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------
using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Properties;
using Elements.Validators;
using Elements.Serialization.JSON;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace Elements.Geometry
{
    #pragma warning disable // Disable all warnings

    /// <summary>A representation containing a collection of points.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PointsRepresentation : Representation, System.ComponentModel.INotifyPropertyChanged
    {
        private IList<Vector3> _points = new List<Vector3>();
    
        [Newtonsoft.Json.JsonConstructor]
        public PointsRepresentation(IList<Vector3> @points, Material @material, System.Guid @id, string @name)
            : base(material, id, name)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<PointsRepresentation>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @points, @material, @id, @name});
            }
        
            this.Points = @points;
            
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>A collection of Points.</summary>
        [Newtonsoft.Json.JsonProperty("Points", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public IList<Vector3> Points
        {
            get { return _points; }
            set 
            {
                if (_points != value)
                {
                    _points = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
}