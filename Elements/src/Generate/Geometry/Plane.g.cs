//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.1.21.0 (Newtonsoft.Json v11.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------
using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Properties;
using Elements.Validators;
using Elements.Serialization.JSON;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace Elements.Geometry
{
    #pragma warning disable // Disable all warnings

    /// <summary>A plane.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Plane : System.ComponentModel.INotifyPropertyChanged
    {
        private Vector3 _origin;
        private Vector3 _normal;
    
        [Newtonsoft.Json.JsonConstructor]
        public Plane(Vector3 @origin, Vector3 @normal)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<Plane>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @origin, @normal});
            }
        
            this.Origin = @origin;
            this.Normal = @normal;
            
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>The origin of the plane.</summary>
        [Newtonsoft.Json.JsonProperty("Origin", Required = Newtonsoft.Json.Required.AllowNull)]
        public Vector3 Origin
        {
            get { return _origin; }
            set 
            {
                if (_origin != value)
                {
                    _origin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The normal of the plane.</summary>
        [Newtonsoft.Json.JsonProperty("Normal", Required = Newtonsoft.Json.Required.AllowNull)]
        public Vector3 Normal
        {
            get { return _normal; }
            set 
            {
                if (_normal != value)
                {
                    _normal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    
    }
}